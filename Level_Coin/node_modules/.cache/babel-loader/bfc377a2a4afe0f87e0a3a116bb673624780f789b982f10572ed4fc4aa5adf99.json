{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar errors = require('./errors');\nvar debug = require('debug')('node-telegram-bot-api');\nvar https = require('https');\nvar http = require('http');\nvar fs = require('fs');\nvar bl = require('bl');\nvar TelegramBotWebHook = function () {\n  /**\n   * Sets up a webhook to receive updates\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  function TelegramBotWebHook(bot) {\n    _classCallCheck(this, TelegramBotWebHook);\n    this.bot = bot;\n    this.options = typeof bot.options.webHook === 'boolean' ? {} : bot.options.webHook;\n    this.options.host = this.options.host || '0.0.0.0';\n    this.options.port = this.options.port || 8443;\n    this.options.https = this.options.https || {};\n    this.options.healthEndpoint = this.options.healthEndpoint || '/healthz';\n    this._healthRegex = new RegExp(this.options.healthEndpoint);\n    this._webServer = null;\n    this._open = false;\n    this._requestListener = this._requestListener.bind(this);\n    this._parseBody = this._parseBody.bind(this);\n    if (this.options.key && this.options.cert) {\n      debug('HTTPS WebHook enabled (by key/cert)');\n      this.options.https.key = fs.readFileSync(this.options.key);\n      this.options.https.cert = fs.readFileSync(this.options.cert);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (this.options.pfx) {\n      debug('HTTPS WebHook enabled (by pfx)');\n      this.options.https.pfx = fs.readFileSync(this.options.pfx);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (Object.keys(this.options.https).length) {\n      debug('HTTPS WebHook enabled by (https)');\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else {\n      debug('HTTP WebHook enabled');\n      this._webServer = http.createServer(this._requestListener);\n    }\n  }\n\n  /**\n   * Open WebHook by listening on the port\n   * @return {Promise}\n   */\n\n  _createClass(TelegramBotWebHook, [{\n    key: 'open',\n    value: function open() {\n      var _this = this;\n      if (this.isOpen()) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        _this._webServer.listen(_this.options.port, _this.options.host, function () {\n          debug('WebHook listening on port %s', _this.options.port);\n          _this._open = true;\n          return resolve();\n        });\n        _this._webServer.once('error', function (err) {\n          reject(err);\n        });\n      });\n    }\n\n    /**\n     * Close the webHook\n     * @return {Promise}\n     */\n  }, {\n    key: 'close',\n    value: function close() {\n      var _this2 = this;\n      if (!this.isOpen()) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        _this2._webServer.close(function (error) {\n          if (error) return reject(error);\n          _this2._open = false;\n          return resolve();\n        });\n      });\n    }\n\n    /**\n     * Return `true` if server is listening. Otherwise, `false`.\n     */\n  }, {\n    key: 'isOpen',\n    value: function isOpen() {\n      // NOTE: Since `http.Server.listening` was added in v5.7.0\n      // and we still need to support Node v4,\n      // we are going to fallback to 'this._open'.\n      // The following LOC would suffice for newer versions of Node.js\n      // return this._webServer.listening;\n      return this._open;\n    }\n\n    /**\n     * Handle error thrown during processing of webhook request.\n     * @private\n     * @param  {Error} error\n     */\n  }, {\n    key: '_error',\n    value: function _error(error) {\n      if (!this.bot.listeners('webhook_error').length) {\n        return console.error('error: [webhook_error] %j', error); // eslint-disable-line no-console\n      }\n      return this.bot.emit('webhook_error', error);\n    }\n\n    /**\n     * Handle request body by passing it to 'callback'\n     * @private\n     */\n  }, {\n    key: '_parseBody',\n    value: function _parseBody(error, body) {\n      if (error) {\n        return this._error(new errors.FatalError(error));\n      }\n      var data = void 0;\n      try {\n        data = JSON.parse(body.toString());\n      } catch (parseError) {\n        return this._error(new errors.ParseError(parseError.message));\n      }\n      return this.bot.processUpdate(data);\n    }\n\n    /**\n     * Listener for 'request' event on server\n     * @private\n     * @see https://nodejs.org/docs/latest/api/http.html#http_http_createserver_requestlistener\n     * @see https://nodejs.org/docs/latest/api/https.html#https_https_createserver_options_requestlistener\n     */\n  }, {\n    key: '_requestListener',\n    value: function _requestListener(req, res) {\n      debug('WebHook request URL: %s', req.url);\n      debug('WebHook request headers: %j', req.headers);\n      if (req.url.indexOf(this.bot.token) !== -1) {\n        if (req.method !== 'POST') {\n          debug('WebHook request isn\\'t a POST');\n          res.statusCode = 418; // I'm a teabot!\n          res.end();\n        } else {\n          req.pipe(bl(this._parseBody)).on('finish', function () {\n            return res.end('OK');\n          });\n        }\n      } else if (this._healthRegex.test(req.url)) {\n        debug('WebHook health check passed');\n        res.statusCode = 200;\n        res.end('OK');\n      } else {\n        debug('WebHook request unauthorized');\n        res.statusCode = 401;\n        res.end();\n      }\n    }\n  }]);\n  return TelegramBotWebHook;\n}();\nmodule.exports = TelegramBotWebHook;","map":{"version":3,"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","errors","require","debug","https","http","fs","bl","TelegramBotWebHook","bot","options","webHook","host","port","healthEndpoint","_healthRegex","RegExp","_webServer","_open","_requestListener","bind","_parseBody","cert","readFileSync","createServer","pfx","keys","value","open","_this","isOpen","Promise","resolve","reject","listen","once","err","close","_this2","error","_error","listeners","console","emit","body","FatalError","data","JSON","parse","toString","parseError","ParseError","message","processUpdate","req","res","url","headers","indexOf","token","method","statusCode","end","pipe","on","test","module","exports"],"sources":["/Users/boristrunov/Desktop/LevelCoin/project/node_modules/node-telegram-bot-api/lib/telegramWebHook.js"],"sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar errors = require('./errors');\nvar debug = require('debug')('node-telegram-bot-api');\nvar https = require('https');\nvar http = require('http');\nvar fs = require('fs');\nvar bl = require('bl');\n\nvar TelegramBotWebHook = function () {\n  /**\n   * Sets up a webhook to receive updates\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  function TelegramBotWebHook(bot) {\n    _classCallCheck(this, TelegramBotWebHook);\n\n    this.bot = bot;\n    this.options = typeof bot.options.webHook === 'boolean' ? {} : bot.options.webHook;\n    this.options.host = this.options.host || '0.0.0.0';\n    this.options.port = this.options.port || 8443;\n    this.options.https = this.options.https || {};\n    this.options.healthEndpoint = this.options.healthEndpoint || '/healthz';\n    this._healthRegex = new RegExp(this.options.healthEndpoint);\n    this._webServer = null;\n    this._open = false;\n    this._requestListener = this._requestListener.bind(this);\n    this._parseBody = this._parseBody.bind(this);\n\n    if (this.options.key && this.options.cert) {\n      debug('HTTPS WebHook enabled (by key/cert)');\n      this.options.https.key = fs.readFileSync(this.options.key);\n      this.options.https.cert = fs.readFileSync(this.options.cert);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (this.options.pfx) {\n      debug('HTTPS WebHook enabled (by pfx)');\n      this.options.https.pfx = fs.readFileSync(this.options.pfx);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (Object.keys(this.options.https).length) {\n      debug('HTTPS WebHook enabled by (https)');\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else {\n      debug('HTTP WebHook enabled');\n      this._webServer = http.createServer(this._requestListener);\n    }\n  }\n\n  /**\n   * Open WebHook by listening on the port\n   * @return {Promise}\n   */\n\n\n  _createClass(TelegramBotWebHook, [{\n    key: 'open',\n    value: function open() {\n      var _this = this;\n\n      if (this.isOpen()) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        _this._webServer.listen(_this.options.port, _this.options.host, function () {\n          debug('WebHook listening on port %s', _this.options.port);\n          _this._open = true;\n          return resolve();\n        });\n\n        _this._webServer.once('error', function (err) {\n          reject(err);\n        });\n      });\n    }\n\n    /**\n     * Close the webHook\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      var _this2 = this;\n\n      if (!this.isOpen()) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        _this2._webServer.close(function (error) {\n          if (error) return reject(error);\n          _this2._open = false;\n          return resolve();\n        });\n      });\n    }\n\n    /**\n     * Return `true` if server is listening. Otherwise, `false`.\n     */\n\n  }, {\n    key: 'isOpen',\n    value: function isOpen() {\n      // NOTE: Since `http.Server.listening` was added in v5.7.0\n      // and we still need to support Node v4,\n      // we are going to fallback to 'this._open'.\n      // The following LOC would suffice for newer versions of Node.js\n      // return this._webServer.listening;\n      return this._open;\n    }\n\n    /**\n     * Handle error thrown during processing of webhook request.\n     * @private\n     * @param  {Error} error\n     */\n\n  }, {\n    key: '_error',\n    value: function _error(error) {\n      if (!this.bot.listeners('webhook_error').length) {\n        return console.error('error: [webhook_error] %j', error); // eslint-disable-line no-console\n      }\n      return this.bot.emit('webhook_error', error);\n    }\n\n    /**\n     * Handle request body by passing it to 'callback'\n     * @private\n     */\n\n  }, {\n    key: '_parseBody',\n    value: function _parseBody(error, body) {\n      if (error) {\n        return this._error(new errors.FatalError(error));\n      }\n\n      var data = void 0;\n      try {\n        data = JSON.parse(body.toString());\n      } catch (parseError) {\n        return this._error(new errors.ParseError(parseError.message));\n      }\n\n      return this.bot.processUpdate(data);\n    }\n\n    /**\n     * Listener for 'request' event on server\n     * @private\n     * @see https://nodejs.org/docs/latest/api/http.html#http_http_createserver_requestlistener\n     * @see https://nodejs.org/docs/latest/api/https.html#https_https_createserver_options_requestlistener\n     */\n\n  }, {\n    key: '_requestListener',\n    value: function _requestListener(req, res) {\n      debug('WebHook request URL: %s', req.url);\n      debug('WebHook request headers: %j', req.headers);\n\n      if (req.url.indexOf(this.bot.token) !== -1) {\n        if (req.method !== 'POST') {\n          debug('WebHook request isn\\'t a POST');\n          res.statusCode = 418; // I'm a teabot!\n          res.end();\n        } else {\n          req.pipe(bl(this._parseBody)).on('finish', function () {\n            return res.end('OK');\n          });\n        }\n      } else if (this._healthRegex.test(req.url)) {\n        debug('WebHook health check passed');\n        res.statusCode = 200;\n        res.end('OK');\n      } else {\n        debug('WebHook request unauthorized');\n        res.statusCode = 401;\n        res.end();\n      }\n    }\n  }]);\n\n  return TelegramBotWebHook;\n}();\n\nmodule.exports = TelegramBotWebHook;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}