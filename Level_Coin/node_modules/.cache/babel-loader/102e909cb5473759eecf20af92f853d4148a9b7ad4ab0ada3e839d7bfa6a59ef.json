{"ast":null,"code":"'use strict';\n\nvar url = require('url');\nvar isUrl = /^https?:/;\nfunction Redirect(request) {\n  this.request = request;\n  this.followRedirect = true;\n  this.followRedirects = true;\n  this.followAllRedirects = false;\n  this.followOriginalHttpMethod = false;\n  this.allowRedirect = function () {\n    return true;\n  };\n  this.maxRedirects = 10;\n  this.redirects = [];\n  this.redirectsFollowed = 0;\n  this.removeRefererHeader = false;\n  this.allowInsecureRedirect = false;\n}\nRedirect.prototype.onRequest = function (options) {\n  var self = this;\n  if (options.maxRedirects !== undefined) {\n    self.maxRedirects = options.maxRedirects;\n  }\n  if (typeof options.followRedirect === 'function') {\n    self.allowRedirect = options.followRedirect;\n  }\n  if (options.followRedirect !== undefined) {\n    self.followRedirects = !!options.followRedirect;\n  }\n  if (options.followAllRedirects !== undefined) {\n    self.followAllRedirects = options.followAllRedirects;\n  }\n  if (self.followRedirects || self.followAllRedirects) {\n    self.redirects = self.redirects || [];\n  }\n  if (options.removeRefererHeader !== undefined) {\n    self.removeRefererHeader = options.removeRefererHeader;\n  }\n  if (options.followOriginalHttpMethod !== undefined) {\n    self.followOriginalHttpMethod = options.followOriginalHttpMethod;\n  }\n  if (options.allowInsecureRedirect !== undefined) {\n    self.allowInsecureRedirect = options.allowInsecureRedirect;\n  }\n};\nRedirect.prototype.redirectTo = function (response) {\n  var self = this;\n  var request = self.request;\n  var redirectTo = null;\n  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {\n    var location = response.caseless.get('location');\n    request.debug('redirect', location);\n    if (self.followAllRedirects) {\n      redirectTo = location;\n    } else if (self.followRedirects) {\n      switch (request.method) {\n        case 'PATCH':\n        case 'PUT':\n        case 'POST':\n        case 'DELETE':\n          // Do not follow redirects\n          break;\n        default:\n          redirectTo = location;\n          break;\n      }\n    }\n  } else if (response.statusCode === 401) {\n    var authHeader = request._auth.onResponse(response);\n    if (authHeader) {\n      request.setHeader('authorization', authHeader);\n      redirectTo = request.uri;\n    }\n  }\n  return redirectTo;\n};\nRedirect.prototype.onResponse = function (response, callback) {\n  var self = this;\n  var request = self.request;\n  var redirectTo = self.redirectTo(response);\n  if (!redirectTo) return callback(null, false);\n  function processRedirect(shouldRedirect) {\n    if (!shouldRedirect) return callback(null, false);\n    if (typeof shouldRedirect === 'string') {\n      // overridden redirect url\n      request.debug('redirect overridden', redirectTo);\n      redirectTo = shouldRedirect;\n    }\n    request.debug('redirect to', redirectTo);\n\n    // ignore any potential response body.  it cannot possibly be useful\n    // to us at this point.\n    // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n    if (response.resume) {\n      response.resume();\n    }\n    if (self.redirectsFollowed >= self.maxRedirects) {\n      return callback(new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href));\n    }\n    self.redirectsFollowed += 1;\n    if (!isUrl.test(redirectTo)) {\n      redirectTo = url.resolve(request.uri.href, redirectTo);\n    }\n    var uriPrev = request.uri;\n    request.uri = url.parse(redirectTo);\n\n    // handle the case where we change protocol from https to http or vice versa\n    if (request.uri.protocol !== uriPrev.protocol && self.allowInsecureRedirect) {\n      delete request.agent;\n    }\n    self.redirects.push({\n      statusCode: response.statusCode,\n      redirectUri: redirectTo\n    });\n    if (self.followAllRedirects && request.method !== 'HEAD' && response.statusCode !== 401 && response.statusCode !== 307) {\n      request.method = self.followOriginalHttpMethod ? request.method : 'GET';\n    }\n    // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215\n    delete request.src;\n    delete request.req;\n    delete request._started;\n    if (response.statusCode !== 401 && response.statusCode !== 307) {\n      // Remove parameters from the previous response, unless this is the second request\n      // for a server that requires digest authentication.\n      delete request.body;\n      delete request._form;\n      if (request.headers) {\n        request.removeHeader('host');\n        request.removeHeader('content-type');\n        request.removeHeader('content-length');\n        if (request.uri.hostname !== request.originalHost.split(':')[0]) {\n          // Remove authorization if changing hostnames (but not if just\n          // changing ports or protocols).  This matches the behavior of curl:\n          // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710\n          request.removeHeader('authorization');\n        }\n      }\n    }\n    if (!self.removeRefererHeader) {\n      request.setHeader('referer', uriPrev.href);\n    }\n    request.emit('redirect');\n    request.init();\n    callback(null, true);\n  }\n\n  // test allowRedirect arity; if has more than one argument,\n  // assume it's asynchronous via a callback\n  if (self.allowRedirect.length > 1) {\n    return self.allowRedirect.call(request, response, function (err, result) {\n      if (err) return callback(err);\n      processRedirect(result);\n    });\n  }\n  var allowsRedirect = self.allowRedirect.call(request, response);\n  if (allowsRedirect && allowsRedirect.then) {\n    return allowsRedirect.then(processRedirect, callback);\n  }\n\n  // treat as a regular boolean\n  processRedirect(allowsRedirect);\n};\nexports.Redirect = Redirect;","map":{"version":3,"names":["url","require","isUrl","Redirect","request","followRedirect","followRedirects","followAllRedirects","followOriginalHttpMethod","allowRedirect","maxRedirects","redirects","redirectsFollowed","removeRefererHeader","allowInsecureRedirect","prototype","onRequest","options","self","undefined","redirectTo","response","statusCode","caseless","has","location","get","debug","method","authHeader","_auth","onResponse","setHeader","uri","callback","processRedirect","shouldRedirect","resume","Error","href","test","resolve","uriPrev","parse","protocol","agent","push","redirectUri","src","req","_started","body","_form","headers","removeHeader","hostname","originalHost","split","emit","init","length","call","err","result","allowsRedirect","then","exports"],"sources":["/Users/boristrunov/Desktop/LevelCoin/project/node_modules/@cypress/request/lib/redirect.js"],"sourcesContent":["'use strict'\n\nvar url = require('url')\nvar isUrl = /^https?:/\n\nfunction Redirect (request) {\n  this.request = request\n  this.followRedirect = true\n  this.followRedirects = true\n  this.followAllRedirects = false\n  this.followOriginalHttpMethod = false\n  this.allowRedirect = function () { return true }\n  this.maxRedirects = 10\n  this.redirects = []\n  this.redirectsFollowed = 0\n  this.removeRefererHeader = false\n  this.allowInsecureRedirect = false\n}\n\nRedirect.prototype.onRequest = function (options) {\n  var self = this\n\n  if (options.maxRedirects !== undefined) {\n    self.maxRedirects = options.maxRedirects\n  }\n  if (typeof options.followRedirect === 'function') {\n    self.allowRedirect = options.followRedirect\n  }\n  if (options.followRedirect !== undefined) {\n    self.followRedirects = !!options.followRedirect\n  }\n  if (options.followAllRedirects !== undefined) {\n    self.followAllRedirects = options.followAllRedirects\n  }\n  if (self.followRedirects || self.followAllRedirects) {\n    self.redirects = self.redirects || []\n  }\n  if (options.removeRefererHeader !== undefined) {\n    self.removeRefererHeader = options.removeRefererHeader\n  }\n  if (options.followOriginalHttpMethod !== undefined) {\n    self.followOriginalHttpMethod = options.followOriginalHttpMethod\n  }\n  if (options.allowInsecureRedirect !== undefined) {\n    self.allowInsecureRedirect = options.allowInsecureRedirect\n  }\n}\n\nRedirect.prototype.redirectTo = function (response) {\n  var self = this\n  var request = self.request\n\n  var redirectTo = null\n  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {\n    var location = response.caseless.get('location')\n    request.debug('redirect', location)\n\n    if (self.followAllRedirects) {\n      redirectTo = location\n    } else if (self.followRedirects) {\n      switch (request.method) {\n        case 'PATCH':\n        case 'PUT':\n        case 'POST':\n        case 'DELETE':\n          // Do not follow redirects\n          break\n        default:\n          redirectTo = location\n          break\n      }\n    }\n  } else if (response.statusCode === 401) {\n    var authHeader = request._auth.onResponse(response)\n    if (authHeader) {\n      request.setHeader('authorization', authHeader)\n      redirectTo = request.uri\n    }\n  }\n  return redirectTo\n}\n\nRedirect.prototype.onResponse = function (response, callback) {\n  var self = this\n  var request = self.request\n\n  var redirectTo = self.redirectTo(response)\n  if (!redirectTo) return callback(null, false)\n\n  function processRedirect (shouldRedirect) {\n    if (!shouldRedirect) return callback(null, false)\n    if (typeof shouldRedirect === 'string') {\n      // overridden redirect url\n      request.debug('redirect overridden', redirectTo)\n      redirectTo = shouldRedirect\n    }\n\n    request.debug('redirect to', redirectTo)\n\n    // ignore any potential response body.  it cannot possibly be useful\n    // to us at this point.\n    // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n    if (response.resume) {\n      response.resume()\n    }\n\n    if (self.redirectsFollowed >= self.maxRedirects) {\n      return callback(new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href))\n    }\n    self.redirectsFollowed += 1\n\n    if (!isUrl.test(redirectTo)) {\n      redirectTo = url.resolve(request.uri.href, redirectTo)\n    }\n\n    var uriPrev = request.uri\n    request.uri = url.parse(redirectTo)\n\n    // handle the case where we change protocol from https to http or vice versa\n    if (request.uri.protocol !== uriPrev.protocol && self.allowInsecureRedirect) {\n      delete request.agent\n    }\n\n    self.redirects.push({ statusCode: response.statusCode, redirectUri: redirectTo })\n\n    if (self.followAllRedirects && request.method !== 'HEAD' &&\n      response.statusCode !== 401 && response.statusCode !== 307) {\n      request.method = self.followOriginalHttpMethod ? request.method : 'GET'\n    }\n    // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215\n    delete request.src\n    delete request.req\n    delete request._started\n    if (response.statusCode !== 401 && response.statusCode !== 307) {\n      // Remove parameters from the previous response, unless this is the second request\n      // for a server that requires digest authentication.\n      delete request.body\n      delete request._form\n      if (request.headers) {\n        request.removeHeader('host')\n        request.removeHeader('content-type')\n        request.removeHeader('content-length')\n        if (request.uri.hostname !== request.originalHost.split(':')[0]) {\n          // Remove authorization if changing hostnames (but not if just\n          // changing ports or protocols).  This matches the behavior of curl:\n          // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710\n          request.removeHeader('authorization')\n        }\n      }\n    }\n\n    if (!self.removeRefererHeader) {\n      request.setHeader('referer', uriPrev.href)\n    }\n\n    request.emit('redirect')\n    request.init()\n    callback(null, true)\n  }\n\n  // test allowRedirect arity; if has more than one argument,\n  // assume it's asynchronous via a callback\n  if (self.allowRedirect.length > 1) {\n    return self.allowRedirect.call(request, response, function (err, result) {\n      if (err) return callback(err)\n      processRedirect(result)\n    })\n  }\n\n  var allowsRedirect = self.allowRedirect.call(request, response)\n  if (allowsRedirect && allowsRedirect.then) {\n    return allowsRedirect.then(processRedirect, callback)\n  }\n\n  // treat as a regular boolean\n  processRedirect(allowsRedirect)\n}\n\nexports.Redirect = Redirect\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}