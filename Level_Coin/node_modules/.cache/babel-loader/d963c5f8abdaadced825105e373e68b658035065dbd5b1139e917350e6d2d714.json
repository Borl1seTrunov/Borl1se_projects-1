{"ast":null,"code":"const errors = require('./errors');\nconst debug = require('debug')('node-telegram-bot-api');\nconst deprecate = require('./utils').deprecate;\nconst ANOTHER_WEB_HOOK_USED = 409;\nclass TelegramBotPolling {\n  /**\n   * Handles polling against the Telegram servers.\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  constructor(bot) {\n    this.bot = bot;\n    this.options = typeof bot.options.polling === 'boolean' ? {} : bot.options.polling;\n    this.options.interval = typeof this.options.interval === 'number' ? this.options.interval : 300;\n    this.options.params = typeof this.options.params === 'object' ? this.options.params : {};\n    this.options.params.offset = typeof this.options.params.offset === 'number' ? this.options.params.offset : 0;\n    this.options.params.timeout = typeof this.options.params.timeout === 'number' ? this.options.params.timeout : 10;\n    if (typeof this.options.timeout === 'number') {\n      deprecate('`options.polling.timeout` is deprecated. Use `options.polling.params` instead.');\n      this.options.params.timeout = this.options.timeout;\n    }\n    this._lastUpdate = 0;\n    this._lastRequest = null;\n    this._abort = false;\n    this._pollingTimeout = null;\n  }\n\n  /**\n   * Start polling\n   * @param  {Object} [options]\n   * @param  {Object} [options.restart]\n   * @return {Promise}\n   */\n  start(options = {}) {\n    if (this._lastRequest) {\n      if (!options.restart) {\n        return Promise.resolve();\n      }\n      return this.stop({\n        cancel: true,\n        reason: 'Polling restart'\n      }).then(() => {\n        return this._polling();\n      });\n    }\n    return this._polling();\n  }\n\n  /**\n   * Stop polling\n   * @param  {Object} [options] Options\n   * @param  {Boolean} [options.cancel] Cancel current request\n   * @param  {String} [options.reason] Reason for stopping polling\n   * @return {Promise}\n   */\n  stop(options = {}) {\n    if (!this._lastRequest) {\n      return Promise.resolve();\n    }\n    const lastRequest = this._lastRequest;\n    this._lastRequest = null;\n    clearTimeout(this._pollingTimeout);\n    if (options.cancel) {\n      const reason = options.reason || 'Polling stop';\n      lastRequest.cancel(reason);\n      return Promise.resolve();\n    }\n    this._abort = true;\n    return lastRequest.finally(() => {\n      this._abort = false;\n    });\n  }\n\n  /**\n   * Return `true` if is polling. Otherwise, `false`.\n   */\n  isPolling() {\n    return !!this._lastRequest;\n  }\n\n  /**\n   * Handle error thrown during polling.\n   * @private\n   * @param  {Error} error\n   */\n  _error(error) {\n    if (!this.bot.listeners('polling_error').length) {\n      return console.error('error: [polling_error] %j', error); // eslint-disable-line no-console\n    }\n    return this.bot.emit('polling_error', error);\n  }\n\n  /**\n   * Invokes polling (with recursion!)\n   * @return {Promise} promise of the current request\n   * @private\n   */\n  _polling() {\n    this._lastRequest = this._getUpdates().then(updates => {\n      this._lastUpdate = Date.now();\n      debug('polling data %j', updates);\n      updates.forEach(update => {\n        this.options.params.offset = update.update_id + 1;\n        debug('updated offset: %s', this.options.params.offset);\n        try {\n          this.bot.processUpdate(update);\n        } catch (err) {\n          err._processing = true;\n          throw err;\n        }\n      });\n      return null;\n    }).catch(err => {\n      debug('polling error: %s', err.message);\n      if (!err._processing) {\n        return this._error(err);\n      }\n      delete err._processing;\n      /*\n       * An error occured while processing the items,\n       * i.e. in `this.bot.processUpdate()` above.\n       * We need to mark the already-processed items\n       * to avoid fetching them again once the application\n       * is restarted, or moves to next polling interval\n       * (in cases where unhandled rejections do not terminate\n       * the process).\n       * See https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067\n       */\n      if (!this.bot.options.badRejection) {\n        return this._error(err);\n      }\n      const opts = {\n        offset: this.options.params.offset,\n        limit: 1,\n        timeout: 0\n      };\n      return this.bot.getUpdates(opts).then(() => {\n        return this._error(err);\n      }).catch(requestErr => {\n        /*\n         * We have been unable to handle this error.\n         * We have to log this to stderr to ensure devops\n         * understands that they may receive already-processed items\n         * on app restart.\n         * We simply can not rescue this situation, emit \"error\"\n         * event, with the hope that the application exits.\n         */\n        /* eslint-disable no-console */\n        const bugUrl = 'https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067';\n        console.error('error: Internal handling of The Offset Infinite Loop failed');\n        console.error(`error: Due to error '${requestErr}'`);\n        console.error('error: You may receive already-processed updates on app restart');\n        console.error(`error: Please see ${bugUrl} for more information`);\n        /* eslint-enable no-console */\n        return this.bot.emit('error', new errors.FatalError(err));\n      });\n    }).finally(() => {\n      if (this._abort) {\n        debug('Polling is aborted!');\n      } else {\n        debug('setTimeout for %s miliseconds', this.options.interval);\n        this._pollingTimeout = setTimeout(() => this._polling(), this.options.interval);\n      }\n    });\n    return this._lastRequest;\n  }\n\n  /**\n   * Unset current webhook. Used when we detect that a webhook has been set\n   * and we are trying to poll. Polling and WebHook are mutually exclusive.\n   * @see https://core.telegram.org/bots/api#getting-updates\n   * @private\n   */\n  _unsetWebHook() {\n    debug('unsetting webhook');\n    return this.bot._request('setWebHook');\n  }\n\n  /**\n   * Retrieve updates\n   */\n  _getUpdates() {\n    debug('polling with options: %j', this.options.params);\n    return this.bot.getUpdates(this.options.params).catch(err => {\n      if (err.response && err.response.statusCode === ANOTHER_WEB_HOOK_USED) {\n        return this._unsetWebHook().then(() => {\n          return this.bot.getUpdates(this.options.params);\n        });\n      }\n      throw err;\n    });\n  }\n}\nmodule.exports = TelegramBotPolling;","map":{"version":3,"names":["errors","require","debug","deprecate","ANOTHER_WEB_HOOK_USED","TelegramBotPolling","constructor","bot","options","polling","interval","params","offset","timeout","_lastUpdate","_lastRequest","_abort","_pollingTimeout","start","restart","Promise","resolve","stop","cancel","reason","then","_polling","lastRequest","clearTimeout","finally","isPolling","_error","error","listeners","length","console","emit","_getUpdates","updates","Date","now","forEach","update","update_id","processUpdate","err","_processing","catch","message","badRejection","opts","limit","getUpdates","requestErr","bugUrl","FatalError","setTimeout","_unsetWebHook","_request","response","statusCode","module","exports"],"sources":["/Users/boristrunov/Desktop/LevelCoin/project/node_modules/node-telegram-bot-api/src/telegramPolling.js"],"sourcesContent":["const errors = require('./errors');\nconst debug = require('debug')('node-telegram-bot-api');\nconst deprecate = require('./utils').deprecate;\nconst ANOTHER_WEB_HOOK_USED = 409;\n\n\nclass TelegramBotPolling {\n  /**\n   * Handles polling against the Telegram servers.\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  constructor(bot) {\n    this.bot = bot;\n    this.options = (typeof bot.options.polling === 'boolean') ? {} : bot.options.polling;\n    this.options.interval = (typeof this.options.interval === 'number') ? this.options.interval : 300;\n    this.options.params = (typeof this.options.params === 'object') ? this.options.params : {};\n    this.options.params.offset = (typeof this.options.params.offset === 'number') ? this.options.params.offset : 0;\n    this.options.params.timeout = (typeof this.options.params.timeout === 'number') ? this.options.params.timeout : 10;\n    if (typeof this.options.timeout === 'number') {\n      deprecate('`options.polling.timeout` is deprecated. Use `options.polling.params` instead.');\n      this.options.params.timeout = this.options.timeout;\n    }\n    this._lastUpdate = 0;\n    this._lastRequest = null;\n    this._abort = false;\n    this._pollingTimeout = null;\n  }\n\n  /**\n   * Start polling\n   * @param  {Object} [options]\n   * @param  {Object} [options.restart]\n   * @return {Promise}\n   */\n  start(options = {}) {\n    if (this._lastRequest) {\n      if (!options.restart) {\n        return Promise.resolve();\n      }\n      return this.stop({\n        cancel: true,\n        reason: 'Polling restart',\n      }).then(() => {\n        return this._polling();\n      });\n    }\n    return this._polling();\n  }\n\n  /**\n   * Stop polling\n   * @param  {Object} [options] Options\n   * @param  {Boolean} [options.cancel] Cancel current request\n   * @param  {String} [options.reason] Reason for stopping polling\n   * @return {Promise}\n   */\n  stop(options = {}) {\n    if (!this._lastRequest) {\n      return Promise.resolve();\n    }\n    const lastRequest = this._lastRequest;\n    this._lastRequest = null;\n    clearTimeout(this._pollingTimeout);\n    if (options.cancel) {\n      const reason = options.reason || 'Polling stop';\n      lastRequest.cancel(reason);\n      return Promise.resolve();\n    }\n    this._abort = true;\n    return lastRequest.finally(() => {\n      this._abort = false;\n    });\n  }\n\n  /**\n   * Return `true` if is polling. Otherwise, `false`.\n   */\n  isPolling() {\n    return !!this._lastRequest;\n  }\n\n  /**\n   * Handle error thrown during polling.\n   * @private\n   * @param  {Error} error\n   */\n  _error(error) {\n    if (!this.bot.listeners('polling_error').length) {\n      return console.error('error: [polling_error] %j', error); // eslint-disable-line no-console\n    }\n    return this.bot.emit('polling_error', error);\n  }\n\n  /**\n   * Invokes polling (with recursion!)\n   * @return {Promise} promise of the current request\n   * @private\n   */\n  _polling() {\n    this._lastRequest = this\n      ._getUpdates()\n      .then(updates => {\n        this._lastUpdate = Date.now();\n        debug('polling data %j', updates);\n        updates.forEach(update => {\n          this.options.params.offset = update.update_id + 1;\n          debug('updated offset: %s', this.options.params.offset);\n          try {\n            this.bot.processUpdate(update);\n          } catch (err) {\n            err._processing = true;\n            throw err;\n          }\n        });\n        return null;\n      })\n      .catch(err => {\n        debug('polling error: %s', err.message);\n        if (!err._processing) {\n          return this._error(err);\n        }\n        delete err._processing;\n        /*\n         * An error occured while processing the items,\n         * i.e. in `this.bot.processUpdate()` above.\n         * We need to mark the already-processed items\n         * to avoid fetching them again once the application\n         * is restarted, or moves to next polling interval\n         * (in cases where unhandled rejections do not terminate\n         * the process).\n         * See https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067\n         */\n        if (!this.bot.options.badRejection) {\n          return this._error(err);\n        }\n        const opts = {\n          offset: this.options.params.offset,\n          limit: 1,\n          timeout: 0,\n        };\n        return this.bot.getUpdates(opts).then(() => {\n          return this._error(err);\n        }).catch(requestErr => {\n          /*\n           * We have been unable to handle this error.\n           * We have to log this to stderr to ensure devops\n           * understands that they may receive already-processed items\n           * on app restart.\n           * We simply can not rescue this situation, emit \"error\"\n           * event, with the hope that the application exits.\n           */\n          /* eslint-disable no-console */\n          const bugUrl = 'https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067';\n          console.error('error: Internal handling of The Offset Infinite Loop failed');\n          console.error(`error: Due to error '${requestErr}'`);\n          console.error('error: You may receive already-processed updates on app restart');\n          console.error(`error: Please see ${bugUrl} for more information`);\n          /* eslint-enable no-console */\n          return this.bot.emit('error', new errors.FatalError(err));\n        });\n      })\n      .finally(() => {\n        if (this._abort) {\n          debug('Polling is aborted!');\n        } else {\n          debug('setTimeout for %s miliseconds', this.options.interval);\n          this._pollingTimeout = setTimeout(() => this._polling(), this.options.interval);\n        }\n      });\n    return this._lastRequest;\n  }\n\n  /**\n   * Unset current webhook. Used when we detect that a webhook has been set\n   * and we are trying to poll. Polling and WebHook are mutually exclusive.\n   * @see https://core.telegram.org/bots/api#getting-updates\n   * @private\n   */\n  _unsetWebHook() {\n    debug('unsetting webhook');\n    return this.bot._request('setWebHook');\n  }\n\n  /**\n   * Retrieve updates\n   */\n  _getUpdates() {\n    debug('polling with options: %j', this.options.params);\n    return this.bot.getUpdates(this.options.params)\n      .catch(err => {\n        if (err.response && err.response.statusCode === ANOTHER_WEB_HOOK_USED) {\n          return this._unsetWebHook().then(() => {\n            return this.bot.getUpdates(this.options.params);\n          });\n        }\n        throw err;\n      });\n  }\n}\n\nmodule.exports = TelegramBotPolling;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}