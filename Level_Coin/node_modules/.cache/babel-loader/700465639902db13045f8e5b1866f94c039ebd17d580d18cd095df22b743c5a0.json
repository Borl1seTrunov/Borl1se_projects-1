{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n    if (getter === undefined) {\n      return undefined;\n    }\n    return getter.call(receiver);\n  }\n};\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n// shims\nrequire('array.prototype.findindex').shim(); // for Node.js v0.x\n\nvar errors = require('./errors');\nvar TelegramBotWebHook = require('./telegramWebHook');\nvar TelegramBotPolling = require('./telegramPolling');\nvar debug = require('debug')('node-telegram-bot-api');\nvar EventEmitter = require('eventemitter3');\nvar fileType = require('file-type');\nvar request = require('@cypress/request-promise');\nvar streamedRequest = require('@cypress/request');\nvar qs = require('querystring');\nvar stream = require('stream');\nvar mime = require('mime');\nvar path = require('path');\nvar URL = require('url');\nvar fs = require('fs');\nvar pump = require('pump');\nvar deprecate = require('./utils').deprecate;\nvar _messageTypes = ['text', 'animation', 'audio', 'channel_chat_created', 'contact', 'delete_chat_photo', 'dice', 'document', 'game', 'group_chat_created', 'invoice', 'left_chat_member', 'location', 'migrate_from_chat_id', 'migrate_to_chat_id', 'new_chat_members', 'new_chat_photo', 'new_chat_title', 'passport_data', 'photo', 'pinned_message', 'poll', 'sticker', 'successful_payment', 'supergroup_chat_created', 'video', 'video_note', 'voice', 'video_chat_started', 'video_chat_ended', 'video_chat_participants_invited', 'video_chat_scheduled', 'message_auto_delete_timer_changed', 'chat_invite_link', 'chat_member_updated', 'web_app_data', 'message_reaction'];\nvar _deprecatedMessageTypes = ['new_chat_participant', 'left_chat_participant'];\n\n/**\n * JSON-serialize data. If the provided data is already a String,\n * return it as is.\n * @private\n * @param  {*} data\n * @return {String}\n */\nfunction stringify(data) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  return JSON.stringify(data);\n}\nvar TelegramBot = function (_EventEmitter) {\n  _inherits(TelegramBot, _EventEmitter);\n  _createClass(TelegramBot, [{\n    key: 'on',\n    /**\n     * Add listener for the specified [event](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events).\n     * This is the usual `emitter.on()` method.\n     * @param  {String} event\n     * @param  {Function} listener\n     * @see {@link https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events|Available events}\n     * @see https://nodejs.org/api/events.html#events_emitter_on_eventname_listener\n     */\n    value: function on(event, listener) {\n      if (_deprecatedMessageTypes.indexOf(event) !== -1) {\n        var url = 'https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events';\n        deprecate('Events ' + _deprecatedMessageTypes.join(',') + ' are deprecated. See the updated list of events: ' + url);\n      }\n      _get(TelegramBot.prototype.__proto__ || Object.getPrototypeOf(TelegramBot.prototype), 'on', this).call(this, event, listener);\n    }\n\n    /**\n     * Both request method to obtain messages are implemented. To use standard polling, set `polling: true`\n     * on `options`. Notice that [webHook](https://core.telegram.org/bots/api#setwebhook) will need a SSL certificate.\n     * Emits `message` when a message arrives.\n     *\n     * @class TelegramBot\n     * @constructor\n     * @param {String} token Bot Token\n     * @param {Object} [options]\n     * @param {Boolean|Object} [options.polling=false] Set true to enable polling or set options.\n     *  If a WebHook has been set, it will be deleted automatically.\n     * @param {String|Number} [options.polling.timeout=10] *Deprecated. Use `options.polling.params` instead*.\n     *  Timeout in seconds for long polling.\n     * @param {Boolean} [options.testEnvironment=false] Set true to  work with test enviroment.\n     * When working with the test environment, you may use HTTP links without TLS to test your Web App.\n     * @param {String|Number} [options.polling.interval=300] Interval between requests in miliseconds\n     * @param {Boolean} [options.polling.autoStart=true] Start polling immediately\n     * @param {Object} [options.polling.params] Parameters to be used in polling API requests.\n     *  See https://core.telegram.org/bots/api#getupdates for more information.\n     * @param  {Number} [options.polling.params.timeout=10] Timeout in seconds for long polling.\n     * @param {Boolean|Object} [options.webHook=false] Set true to enable WebHook or set options\n     * @param {String} [options.webHook.host=\"0.0.0.0\"] Host to bind to\n     * @param {Number} [options.webHook.port=8443] Port to bind to\n     * @param {String} [options.webHook.key] Path to file with PEM private key for webHook server.\n     *  The file is read **synchronously**!\n     * @param {String} [options.webHook.cert] Path to file with PEM certificate (public) for webHook server.\n     *  The file is read **synchronously**!\n     * @param {String} [options.webHook.pfx] Path to file with PFX private key and certificate chain for webHook server.\n     *  The file is read **synchronously**!\n     * @param {Boolean} [options.webHook.autoOpen=true] Open webHook immediately\n     * @param {Object} [options.webHook.https] Options to be passed to `https.createServer()`.\n     *  Note that `options.webHook.key`, `options.webHook.cert` and `options.webHook.pfx`, if provided, will be\n     *  used to override `key`, `cert` and `pfx` in this object, respectively.\n     *  See https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener for more information.\n     * @param {String} [options.webHook.healthEndpoint=\"/healthz\"] An endpoint for health checks that always responds with 200 OK\n     * @param {Boolean} [options.onlyFirstMatch=false] Set to true to stop after first match. Otherwise, all regexps are executed\n     * @param {Object} [options.request] Options which will be added for all requests to telegram api.\n     *  See https://github.com/request/request#requestoptions-callback for more information.\n     * @param {String} [options.baseApiUrl=\"https://api.telegram.org\"] API Base URl; useful for proxying and testing\n     * @param {Boolean} [options.filepath=true] Allow passing file-paths as arguments when sending files,\n     *  such as photos using `TelegramBot#sendPhoto()`. See [usage information][usage-sending-files-performance]\n     *  for more information on this option and its consequences.\n     * @param {Boolean} [options.badRejection=false] Set to `true`\n     *  **if and only if** the Node.js version you're using terminates the\n     *  process on unhandled rejections. This option is only for\n     *  *forward-compatibility purposes*.\n     * @see https://core.telegram.org/bots/api\n     */\n  }], [{\n    key: 'errors',\n    /**\n     * The different errors the library uses.\n     * @type {Object}\n     */\n    get: function get() {\n      return errors;\n    }\n\n    /**\n     * The types of message updates the library handles.\n     * @type {String[]}\n     */\n  }, {\n    key: 'messageTypes',\n    get: function get() {\n      return _messageTypes;\n    }\n  }]);\n  function TelegramBot(token) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, TelegramBot);\n    var _this = _possibleConstructorReturn(this, (TelegramBot.__proto__ || Object.getPrototypeOf(TelegramBot)).call(this));\n    _this.token = token;\n    _this.options = options;\n    _this.options.polling = typeof options.polling === 'undefined' ? false : options.polling;\n    _this.options.webHook = typeof options.webHook === 'undefined' ? false : options.webHook;\n    _this.options.baseApiUrl = options.baseApiUrl || 'https://api.telegram.org';\n    _this.options.filepath = typeof options.filepath === 'undefined' ? true : options.filepath;\n    _this.options.badRejection = typeof options.badRejection === 'undefined' ? false : options.badRejection;\n    _this._textRegexpCallbacks = [];\n    _this._replyListenerId = 0;\n    _this._replyListeners = [];\n    _this._polling = null;\n    _this._webHook = null;\n    if (options.polling) {\n      var autoStart = options.polling.autoStart;\n      if (typeof autoStart === 'undefined' || autoStart === true) {\n        _this.startPolling();\n      }\n    }\n    if (options.webHook) {\n      var autoOpen = options.webHook.autoOpen;\n      if (typeof autoOpen === 'undefined' || autoOpen === true) {\n        _this.openWebHook();\n      }\n    }\n    return _this;\n  }\n\n  /**\n   * Generates url with bot token and provided path/method you want to be got/executed by bot\n   * @param  {String} path\n   * @return {String} url\n   * @private\n   * @see https://core.telegram.org/bots/api#making-requests\n   */\n\n  _createClass(TelegramBot, [{\n    key: '_buildURL',\n    value: function _buildURL(_path) {\n      return this.options.baseApiUrl + '/bot' + this.token + (this.options.testEnvironment ? '/test' : '') + '/' + _path;\n    }\n\n    /**\n     * Fix 'reply_markup' parameter by making it JSON-serialized, as\n     * required by the Telegram Bot API\n     * @param {Object} obj Object; either 'form' or 'qs'\n     * @private\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n  }, {\n    key: '_fixReplyMarkup',\n    value: function _fixReplyMarkup(obj) {\n      var replyMarkup = obj.reply_markup;\n      if (replyMarkup && typeof replyMarkup !== 'string') {\n        obj.reply_markup = stringify(replyMarkup);\n      }\n    }\n\n    /**\n     * Fix 'entities' or 'caption_entities' or 'explanation_entities' parameter by making it JSON-serialized, as\n     * required by the Telegram Bot API\n     * @param {Object} obj Object;\n     * @private\n     * @see https://core.telegram.org/bots/api#sendmessage\n     * @see https://core.telegram.org/bots/api#copymessage\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n  }, {\n    key: '_fixEntitiesField',\n    value: function _fixEntitiesField(obj) {\n      var entities = obj.entities;\n      var captionEntities = obj.caption_entities;\n      var explanationEntities = obj.explanation_entities;\n      if (entities && typeof entities !== 'string') {\n        obj.entities = stringify(entities);\n      }\n      if (captionEntities && typeof captionEntities !== 'string') {\n        obj.caption_entities = stringify(captionEntities);\n      }\n      if (explanationEntities && typeof explanationEntities !== 'string') {\n        obj.explanation_entities = stringify(explanationEntities);\n      }\n    }\n  }, {\n    key: '_fixAddFileThumbnail',\n    value: function _fixAddFileThumbnail(options, opts) {\n      if (options.thumb) {\n        if (opts.formData === null) {\n          opts.formData = {};\n        }\n        var attachName = 'photo';\n        var _formatSendData2 = this._formatSendData(attachName, options.thumb.replace('attach://', '')),\n          _formatSendData3 = _slicedToArray(_formatSendData2, 1),\n          formData = _formatSendData3[0];\n        if (formData) {\n          opts.formData[attachName] = formData[attachName];\n          opts.qs.thumbnail = 'attach://' + attachName;\n        }\n      }\n    }\n\n    /**\n     * Fix 'reply_parameters' parameter by making it JSON-serialized, as\n     * required by the Telegram Bot API\n     * @param {Object} obj Object; either 'form' or 'qs'\n     * @private\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n  }, {\n    key: '_fixReplyParameters',\n    value: function _fixReplyParameters(obj) {\n      if (obj.hasOwnProperty('reply_parameters') && typeof obj.reply_parameters !== 'string') {\n        obj.reply_parameters = stringify(obj.reply_parameters);\n      }\n    }\n\n    /**\n     * Make request against the API\n     * @param  {String} _path API endpoint\n     * @param  {Object} [options]\n     * @private\n     * @return {Promise}\n     */\n  }, {\n    key: '_request',\n    value: function _request(_path) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this.token) {\n        return Promise.reject(new errors.FatalError('Telegram Bot Token not provided!'));\n      }\n      if (this.options.request) {\n        Object.assign(options, this.options.request);\n      }\n      if (options.form) {\n        this._fixReplyMarkup(options.form);\n        this._fixEntitiesField(options.form);\n        this._fixReplyParameters(options.form);\n      }\n      if (options.qs) {\n        this._fixReplyMarkup(options.qs);\n        this._fixReplyParameters(options.qs);\n      }\n      options.method = 'POST';\n      options.url = this._buildURL(_path);\n      options.simple = false;\n      options.resolveWithFullResponse = true;\n      options.forever = true;\n      debug('HTTP request: %j', options);\n      return request(options).then(function (resp) {\n        var data = void 0;\n        try {\n          data = resp.body = JSON.parse(resp.body);\n        } catch (err) {\n          throw new errors.ParseError('Error parsing response: ' + resp.body, resp);\n        }\n        if (data.ok) {\n          return data.result;\n        }\n        throw new errors.TelegramError(data.error_code + ' ' + data.description, resp);\n      }).catch(function (error) {\n        // TODO: why can't we do `error instanceof errors.BaseError`?\n        if (error.response) throw error;\n        throw new errors.FatalError(error);\n      });\n    }\n\n    /**\n     * Format data to be uploaded; handles file paths, streams and buffers\n     * @param  {String} type\n     * @param  {String|stream.Stream|Buffer} data\n     * @param  {Object} fileOptions File options\n     * @param  {String} [fileOptions.filename] File name\n     * @param  {String} [fileOptions.contentType] Content type (i.e. MIME)\n     * @return {Array} formatted\n     * @return {Object} formatted[0] formData\n     * @return {String} formatted[1] fileId\n     * @throws Error if Buffer file type is not supported.\n     * @see https://npmjs.com/package/file-type\n     * @private\n     */\n  }, {\n    key: '_formatSendData',\n    value: function _formatSendData(type, data) {\n      var fileOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var deprecationMessage = 'See https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files' + ' for more information on how sending files has been improved and' + ' on how to disable this deprecation message altogether.';\n      var filedata = data;\n      var filename = fileOptions.filename;\n      var contentType = fileOptions.contentType;\n      if (data instanceof stream.Stream) {\n        if (!filename && data.path) {\n          // Will be 'null' if could not be parsed.\n          // For example, 'data.path' === '/?id=123' from 'request(\"https://example.com/?id=123\")'\n          var url = URL.parse(path.basename(data.path.toString()));\n          if (url.pathname) {\n            filename = qs.unescape(url.pathname);\n          }\n        }\n      } else if (Buffer.isBuffer(data)) {\n        if (!filename && !process.env.NTBA_FIX_350) {\n          deprecate('Buffers will have their filenames default to \"filename\" instead of \"data\". ' + deprecationMessage);\n          filename = 'data';\n        }\n        if (!contentType) {\n          var filetype = fileType(data);\n          if (filetype) {\n            contentType = filetype.mime;\n            var ext = filetype.ext;\n            if (ext && !process.env.NTBA_FIX_350) {\n              filename = filename + '.' + ext;\n            }\n          } else if (!process.env.NTBA_FIX_350) {\n            deprecate('An error will no longer be thrown if file-type of buffer could not be detected. ' + deprecationMessage);\n            throw new errors.FatalError('Unsupported Buffer file-type');\n          }\n        }\n      } else if (data) {\n        if (this.options.filepath && fs.existsSync(data)) {\n          filedata = fs.createReadStream(data);\n          if (!filename) {\n            filename = path.basename(data);\n          }\n        } else {\n          return [null, data];\n        }\n      } else {\n        return [null, data];\n      }\n      filename = filename || 'filename';\n      contentType = contentType || mime.lookup(filename);\n      if (process.env.NTBA_FIX_350) {\n        contentType = contentType || 'application/octet-stream';\n      } else {\n        deprecate('In the future, content-type of files you send will default to \"application/octet-stream\". ' + deprecationMessage);\n      }\n\n      // TODO: Add missing file extension.\n\n      return [_defineProperty({}, type, {\n        value: filedata,\n        options: {\n          filename: filename,\n          contentType: contentType\n        }\n      }), null];\n    }\n\n    /**\n     * Start polling.\n     * Rejects returned promise if a WebHook is being used by this instance.\n     * @param  {Object} [options]\n     * @param  {Boolean} [options.restart=true] Consecutive calls to this method causes polling to be restarted\n     * @return {Promise}\n     */\n  }, {\n    key: 'startPolling',\n    value: function startPolling() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (this.hasOpenWebHook()) {\n        return Promise.reject(new errors.FatalError('Polling and WebHook are mutually exclusive'));\n      }\n      options.restart = typeof options.restart === 'undefined' ? true : options.restart;\n      if (!this._polling) {\n        this._polling = new TelegramBotPolling(this);\n      }\n      return this._polling.start(options);\n    }\n\n    /**\n     * Alias of `TelegramBot#startPolling()`. This is **deprecated**.\n     * @param  {Object} [options]\n     * @return {Promise}\n     * @deprecated\n     */\n  }, {\n    key: 'initPolling',\n    value: function initPolling() {\n      deprecate('TelegramBot#initPolling() is deprecated. Use TelegramBot#startPolling() instead.');\n      return this.startPolling();\n    }\n\n    /**\n     * Stops polling after the last polling request resolves.\n     * Multiple invocations do nothing if polling is already stopped.\n     * Returning the promise of the last polling request is **deprecated**.\n     * @param  {Object} [options] Options\n     * @param  {Boolean} [options.cancel] Cancel current request\n     * @param  {String} [options.reason] Reason for stopping polling\n     * @return {Promise}\n     */\n  }, {\n    key: 'stopPolling',\n    value: function stopPolling(options) {\n      if (!this._polling) {\n        return Promise.resolve();\n      }\n      return this._polling.stop(options);\n    }\n\n    /**\n     * Get link for file.\n     * Use this method to get link for file for subsequent use.\n     * Attention: link will be valid for 1 hour.\n     *\n     * This method is a sugar extension of the (getFile)[#getfilefileid] method,\n     * which returns just path to file on remote server (you will have to manually build full uri after that).\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Promise which will have  *fileURI* in resolve callback\n     * @see https://core.telegram.org/bots/api#getfile\n     */\n  }, {\n    key: 'getFileLink',\n    value: function getFileLink(fileId) {\n      var _this2 = this;\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.getFile(fileId, form).then(function (resp) {\n        return _this2.options.baseApiUrl + '/file/bot' + _this2.token + '/' + resp.file_path;\n      });\n    }\n\n    /**\n     * Return a readable stream for file.\n     *\n     * `fileStream.path` is the specified file ID i.e. `fileId`.\n     * `fileStream` emits event `info` passing a single argument i.e.\n     * `info` with the interface `{ uri }` where `uri` is the URI of the\n     * file on Telegram servers.\n     *\n     * This method is a sugar extension of the [getFileLink](#TelegramBot+getFileLink) method,\n     * which returns the full URI to the file on remote server.\n     *\n     * @param  {String} fileId File identifier to get info about\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {stream.Readable} fileStream\n     */\n  }, {\n    key: 'getFileStream',\n    value: function getFileStream(fileId) {\n      var _this3 = this;\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var fileStream = new stream.PassThrough();\n      fileStream.path = fileId;\n      this.getFileLink(fileId, form).then(function (fileURI) {\n        fileStream.emit('info', {\n          uri: fileURI\n        });\n        pump(streamedRequest(Object.assign({\n          uri: fileURI\n        }, _this3.options.request)), fileStream);\n      }).catch(function (error) {\n        fileStream.emit('error', error);\n      });\n      return fileStream;\n    }\n\n    /**\n     * Downloads file in the specified folder.\n     *\n     * This method is a sugar extension of the [getFileStream](#TelegramBot+getFileStream) method,\n     * which returns a readable file stream.\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @param  {String} downloadDir Absolute path to the folder in which file will be saved\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Promise, which will have *filePath* of downloaded file in resolve callback\n     */\n  }, {\n    key: 'downloadFile',\n    value: function downloadFile(fileId, downloadDir) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var resolve = void 0;\n      var reject = void 0;\n      var promise = new Promise(function (a, b) {\n        resolve = a;\n        reject = b;\n      });\n      var fileStream = this.getFileStream(fileId, form);\n      fileStream.on('info', function (info) {\n        var fileName = info.uri.slice(info.uri.lastIndexOf('/') + 1);\n        // TODO: Ensure fileName doesn't contains slashes\n        var filePath = path.join(downloadDir, fileName);\n        pump(fileStream, fs.createWriteStream(filePath), function (error) {\n          if (error) {\n            return reject(error);\n          }\n          return resolve(filePath);\n        });\n      });\n      fileStream.on('error', function (err) {\n        reject(err);\n      });\n      return promise;\n    }\n\n    /**\n     * Register a RegExp to test against an incomming text message.\n     * @param  {RegExp}   regexpRexecuted with `exec`.\n     * @param  {Function} callback     Callback will be called with 2 parameters,\n     * the `msg` and the result of executing `regexp.exec` on message text.\n     */\n  }, {\n    key: 'onText',\n    value: function onText(regexp, callback) {\n      this._textRegexpCallbacks.push({\n        regexp: regexp,\n        callback: callback\n      });\n    }\n\n    /**\n     * Remove a listener registered with `onText()`.\n     * @param  {RegExp} regexp RegExp used previously in `onText()`\n     * @return {Object} deletedListener The removed reply listener if\n     *   found. This object has `regexp` and `callback`\n     *   properties. If not found, returns `null`.\n     */\n  }, {\n    key: 'removeTextListener',\n    value: function removeTextListener(regexp) {\n      var index = this._textRegexpCallbacks.findIndex(function (textListener) {\n        return String(textListener.regexp) === String(regexp);\n      });\n      if (index === -1) {\n        return null;\n      }\n      return this._textRegexpCallbacks.splice(index, 1)[0];\n    }\n\n    /**\n     * Remove all listeners registered with `onText()`.\n     */\n  }, {\n    key: 'clearTextListeners',\n    value: function clearTextListeners() {\n      this._textRegexpCallbacks = [];\n    }\n\n    /**\n     * Register a reply to wait for a message response.\n     *\n     * @param  {Number|String} chatId The chat id where the message cames from.\n     * @param  {Number|String} messageId The message id to be replied.\n     * @param  {Function} callback Callback will be called with the reply\n     *  message.\n     * @return {Number} id The ID of the inserted reply listener.\n     */\n  }, {\n    key: 'onReplyToMessage',\n    value: function onReplyToMessage(chatId, messageId, callback) {\n      var id = ++this._replyListenerId;\n      this._replyListeners.push({\n        id: id,\n        chatId: chatId,\n        messageId: messageId,\n        callback: callback\n      });\n      return id;\n    }\n\n    /**\n     * Removes a reply that has been prev. registered for a message response.\n     * @param   {Number} replyListenerId The ID of the reply listener.\n     * @return  {Object} deletedListener The removed reply listener if\n     *   found. This object has `id`, `chatId`, `messageId` and `callback`\n     *   properties. If not found, returns `null`.\n     */\n  }, {\n    key: 'removeReplyListener',\n    value: function removeReplyListener(replyListenerId) {\n      var index = this._replyListeners.findIndex(function (replyListener) {\n        return replyListener.id === replyListenerId;\n      });\n      if (index === -1) {\n        return null;\n      }\n      return this._replyListeners.splice(index, 1)[0];\n    }\n\n    /**\n     * Removes all replies that have been prev. registered for a message response.\n     *\n     * @return  {Array} deletedListeners An array of removed listeners.\n     */\n  }, {\n    key: 'clearReplyListeners',\n    value: function clearReplyListeners() {\n      this._replyListeners = [];\n    }\n\n    /**\n     * Return true if polling. Otherwise, false.\n     *\n     * @return {Boolean}\n     */\n  }, {\n    key: 'isPolling',\n    value: function isPolling() {\n      return this._polling ? this._polling.isPolling() : false;\n    }\n\n    /**\n     * Open webhook.\n     * Multiple invocations do nothing if webhook is already open.\n     * Rejects returned promise if Polling is being used by this instance.\n     *\n     * @return {Promise}\n     */\n  }, {\n    key: 'openWebHook',\n    value: function openWebHook() {\n      if (this.isPolling()) {\n        return Promise.reject(new errors.FatalError('WebHook and Polling are mutually exclusive'));\n      }\n      if (!this._webHook) {\n        this._webHook = new TelegramBotWebHook(this);\n      }\n      return this._webHook.open();\n    }\n\n    /**\n     * Close webhook after closing all current connections.\n     * Multiple invocations do nothing if webhook is already closed.\n     *\n     * @return {Promise} Promise\n     */\n  }, {\n    key: 'closeWebHook',\n    value: function closeWebHook() {\n      if (!this._webHook) {\n        return Promise.resolve();\n      }\n      return this._webHook.close();\n    }\n\n    /**\n     * Return true if using webhook and it is open i.e. accepts connections.\n     * Otherwise, false.\n     *\n     * @return {Boolean}\n     */\n  }, {\n    key: 'hasOpenWebHook',\n    value: function hasOpenWebHook() {\n      return this._webHook ? this._webHook.isOpen() : false;\n    }\n\n    /**\n     * Process an update; emitting the proper events and executing regexp\n     * callbacks. This method is useful should you be using a different\n     * way to fetch updates, other than those provided by TelegramBot.\n     *\n     * @param  {Object} update\n     * @see https://core.telegram.org/bots/api#update\n     */\n  }, {\n    key: 'processUpdate',\n    value: function processUpdate(update) {\n      var _this4 = this;\n      debug('Process Update %j', update);\n      var message = update.message;\n      var editedMessage = update.edited_message;\n      var channelPost = update.channel_post;\n      var editedChannelPost = update.edited_channel_post;\n      var businessConnection = update.business_connection;\n      var businesssMessage = update.business_message;\n      var editedBusinessMessage = update.edited_business_message;\n      var deletedBusinessMessage = update.deleted_business_messages;\n      var messageReaction = update.message_reaction;\n      var messageReactionCount = update.message_reaction_count;\n      var inlineQuery = update.inline_query;\n      var chosenInlineResult = update.chosen_inline_result;\n      var callbackQuery = update.callback_query;\n      var shippingQuery = update.shipping_query;\n      var preCheckoutQuery = update.pre_checkout_query;\n      var poll = update.poll;\n      var pollAnswer = update.poll_answer;\n      var myChatMember = update.my_chat_member;\n      var chatMember = update.chat_member;\n      var chatJoinRequest = update.chat_join_request;\n      var chatBoost = update.chat_boost;\n      var removedChatBoost = update.removed_chat_boost;\n      if (message) {\n        debug('Process Update message %j', message);\n        var metadata = {};\n        metadata.type = TelegramBot.messageTypes.find(function (messageType) {\n          return message[messageType];\n        });\n        this.emit('message', message, metadata);\n        if (metadata.type) {\n          debug('Emitting %s: %j', metadata.type, message);\n          this.emit(metadata.type, message, metadata);\n        }\n        if (message.text) {\n          debug('Text message');\n          this._textRegexpCallbacks.some(function (reg) {\n            debug('Matching %s with %s', message.text, reg.regexp);\n            if (!(reg.regexp instanceof RegExp)) {\n              reg.regexp = new RegExp(reg.regexp);\n            }\n            var result = reg.regexp.exec(message.text);\n            if (!result) {\n              return false;\n            }\n            // reset index so we start at the beginning of the regex each time\n            reg.regexp.lastIndex = 0;\n            debug('Matches %s', reg.regexp);\n            reg.callback(message, result);\n            // returning truthy value exits .some\n            return _this4.options.onlyFirstMatch;\n          });\n        }\n        if (message.reply_to_message) {\n          // Only callbacks waiting for this message\n          this._replyListeners.forEach(function (reply) {\n            // Message from the same chat\n            if (reply.chatId === message.chat.id) {\n              // Responding to that message\n              if (reply.messageId === message.reply_to_message.message_id) {\n                // Resolve the promise\n                reply.callback(message);\n              }\n            }\n          });\n        }\n      } else if (editedMessage) {\n        debug('Process Update edited_message %j', editedMessage);\n        this.emit('edited_message', editedMessage);\n        if (editedMessage.text) {\n          this.emit('edited_message_text', editedMessage);\n        }\n        if (editedMessage.caption) {\n          this.emit('edited_message_caption', editedMessage);\n        }\n      } else if (channelPost) {\n        debug('Process Update channel_post %j', channelPost);\n        this.emit('channel_post', channelPost);\n      } else if (editedChannelPost) {\n        debug('Process Update edited_channel_post %j', editedChannelPost);\n        this.emit('edited_channel_post', editedChannelPost);\n        if (editedChannelPost.text) {\n          this.emit('edited_channel_post_text', editedChannelPost);\n        }\n        if (editedChannelPost.caption) {\n          this.emit('edited_channel_post_caption', editedChannelPost);\n        }\n      } else if (businessConnection) {\n        debug('Process Update business_connection %j', businessConnection);\n        this.emit('business_connection', businessConnection);\n      } else if (businesssMessage) {\n        debug('Process Update business_message %j', businesssMessage);\n        this.emit('business_message', businesssMessage);\n      } else if (editedBusinessMessage) {\n        debug('Process Update edited_business_message %j', editedBusinessMessage);\n        this.emit('edited_business_message', editedBusinessMessage);\n      } else if (deletedBusinessMessage) {\n        debug('Process Update deleted_business_messages %j', deletedBusinessMessage);\n        this.emit('deleted_business_messages', deletedBusinessMessage);\n      } else if (messageReaction) {\n        debug('Process Update message_reaction %j', messageReaction);\n        this.emit('message_reaction', messageReaction);\n      } else if (messageReactionCount) {\n        debug('Process Update message_reaction_count %j', messageReactionCount);\n        this.emit('message_reaction_count', messageReactionCount);\n      } else if (inlineQuery) {\n        debug('Process Update inline_query %j', inlineQuery);\n        this.emit('inline_query', inlineQuery);\n      } else if (chosenInlineResult) {\n        debug('Process Update chosen_inline_result %j', chosenInlineResult);\n        this.emit('chosen_inline_result', chosenInlineResult);\n      } else if (callbackQuery) {\n        debug('Process Update callback_query %j', callbackQuery);\n        this.emit('callback_query', callbackQuery);\n      } else if (shippingQuery) {\n        debug('Process Update shipping_query %j', shippingQuery);\n        this.emit('shipping_query', shippingQuery);\n      } else if (preCheckoutQuery) {\n        debug('Process Update pre_checkout_query %j', preCheckoutQuery);\n        this.emit('pre_checkout_query', preCheckoutQuery);\n      } else if (poll) {\n        debug('Process Update poll %j', poll);\n        this.emit('poll', poll);\n      } else if (pollAnswer) {\n        debug('Process Update poll_answer %j', pollAnswer);\n        this.emit('poll_answer', pollAnswer);\n      } else if (chatMember) {\n        debug('Process Update chat_member %j', chatMember);\n        this.emit('chat_member', chatMember);\n      } else if (myChatMember) {\n        debug('Process Update my_chat_member %j', myChatMember);\n        this.emit('my_chat_member', myChatMember);\n      } else if (chatJoinRequest) {\n        debug('Process Update my_chat_member %j', chatJoinRequest);\n        this.emit('chat_join_request', chatJoinRequest);\n      } else if (chatBoost) {\n        debug('Process Update chat_boost %j', chatBoost);\n        this.emit('chat_boost', chatBoost);\n      } else if (removedChatBoost) {\n        debug('Process Update removed_chat_boost %j', removedChatBoost);\n        this.emit('removed_chat_boost', removedChatBoost);\n      }\n    }\n\n    /** Start Telegram Bot API methods */\n\n    /**\n    * Use this method to receive incoming updates using long polling.\n    * This method has an [older, compatible signature][getUpdates-v0.25.0]\n    * that is being deprecated.\n    *\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise}\n    * @see https://core.telegram.org/bots/api#getupdates\n    */\n  }, {\n    key: 'getUpdates',\n    value: function getUpdates() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /* The older method signature was getUpdates(timeout, limit, offset).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature getUpdates(timeout, limit, offset) has been deprecated since v0.25.0');\n        form = {\n          timeout: arguments[0],\n          limit: arguments[1],\n          offset: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n      return this._request('getUpdates', {\n        form: form\n      });\n    }\n\n    /**\n     * Specify an url to receive incoming updates via an outgoing webHook.\n     * This method has an [older, compatible signature][setWebHook-v0.25.0]\n     * that is being deprecated.\n     *\n     * @param  {String} url URL where Telegram will make HTTP Post. Leave empty to\n     * delete webHook.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {String|stream.Stream} [options.certificate] PEM certificate key (public).\n     * @param  {String} [options.secret_token] Optional secret token to be sent in a header `X-Telegram-Bot-Api-Secret-Token` in every webhook request.\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#setwebhook\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n  }, {\n    key: 'setWebHook',\n    value: function setWebHook(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var fileOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      /* The older method signature was setWebHook(url, cert).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      var cert = void 0;\n      // Note: 'options' could be an object, if a stream was provided (in place of 'cert')\n      if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object' || options instanceof stream.Stream) {\n        deprecate('The method signature setWebHook(url, cert) has been deprecated since v0.25.0');\n        cert = options;\n        options = {}; // eslint-disable-line no-param-reassign\n      } else {\n        cert = options.certificate;\n      }\n      var opts = {\n        qs: options\n      };\n      opts.qs.url = url;\n      if (cert) {\n        try {\n          var sendData = this._formatSendData('certificate', cert, fileOptions);\n          opts.formData = sendData[0];\n          opts.qs.certificate = sendData[1];\n        } catch (ex) {\n          return Promise.reject(ex);\n        }\n      }\n      return this._request('setWebHook', opts);\n    }\n\n    /**\n     * Use this method to remove webhook integration if you decide to\n     * switch back to getUpdates. Returns True on success.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#deletewebhook\n     */\n  }, {\n    key: 'deleteWebHook',\n    value: function deleteWebHook() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('deleteWebhook', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get current webhook status.\n     * On success, returns a [WebhookInfo](https://core.telegram.org/bots/api#webhookinfo) object.\n     * If the bot is using getUpdates, will return an object with the\n     * url field empty.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getwebhookinfo\n     */\n  }, {\n    key: 'getWebHookInfo',\n    value: function getWebHookInfo() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('getWebhookInfo', {\n        form: form\n      });\n    }\n\n    /**\n     * A simple method for testing your bot's authentication token. Requires no parameters.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} basic information about the bot in form of a [User](https://core.telegram.org/bots/api#user) object.\n     * @see https://core.telegram.org/bots/api#getme\n     */\n  }, {\n    key: 'getMe',\n    value: function getMe() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('getMe', {\n        form: form\n      });\n    }\n\n    /**\n     * This method log out your bot from the cloud Bot API server before launching the bot locally.\n     * You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates.\n     * After a successful call, you will not be able to log in again using the same token for 10 minutes.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#logout\n     */\n  }, {\n    key: 'logOut',\n    value: function logOut() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('logOut', {\n        form: form\n      });\n    }\n\n    /**\n     * This method close the bot instance before moving it from one local server to another.\n     * This method will return error 429 in the first 10 minutes after the bot is launched.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#close\n     */\n  }, {\n    key: 'close',\n    value: function close() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('close', {\n        form: form\n      });\n    }\n\n    /**\n     * Send text message.\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} text Text of the message to be sent\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n  }, {\n    key: 'sendMessage',\n    value: function sendMessage(chatId, text) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.text = text;\n      return this._request('sendMessage', {\n        form: form\n      });\n    }\n\n    /**\n     * Forward messages of any kind.\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * or username of the target channel (in the format `@channelusername`)\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent (or channel username in the format `@channelusername`)\n     * @param  {Number|String} messageId  Unique message identifier in the chat specified in fromChatId\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#forwardmessage\n     */\n  }, {\n    key: 'forwardMessage',\n    value: function forwardMessage(chatId, fromChatId, messageId) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_id = messageId;\n      return this._request('forwardMessage', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to forward multiple messages of any kind.\n     * If some of the specified messages can't be found or forwarded, they are skipped.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * or username of the target channel (in the format `@channelusername`)\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent (or channel username in the format `@channelusername`)\n     * @param  {Array<Number|String>} messageIds Identifiers of 1-100 messages in the chat from_chat_id to forward.\n     * The identifiers must be specified in a strictly increasing order.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} An array of MessageId of the sent messages on success\n     * @see https://core.telegram.org/bots/api#forwardmessages\n     */\n  }, {\n    key: 'forwardMessages',\n    value: function forwardMessages(chatId, fromChatId, messageIds) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_ids = messageIds;\n      return this._request('forwardMessages', {\n        form: form\n      });\n    }\n\n    /**\n     * Copy messages of any kind. **Service messages and invoice messages can't be copied.**\n     * The method is analogous to the method forwardMessages, but the copied message doesn't\n     * have a link to the original message.\n     * Returns the MessageId of the sent message on success.\n     * @param  {Number|String} chatId     Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent\n     * @param  {Number|String} messageId  Unique message identifier\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} The [MessageId](https://core.telegram.org/bots/api#messageid) of the sent message on success\n     * @see https://core.telegram.org/bots/api#copymessage\n     */\n  }, {\n    key: 'copyMessage',\n    value: function copyMessage(chatId, fromChatId, messageId) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_id = messageId;\n      return this._request('copyMessage', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped.\n     * Service messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied.\n     * Returns the MessageId of the sent message on success.\n     * @param  {Number|String} chatId Unique identifier for the target chat\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent\n     * @param  {Array} messageIds  Identifiers of 1-100 messages in the chat from_chat_id to copy.\n     * The identifiers must be specified in a strictly increasing order.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} An array of MessageId of the sent messages\n     * @see https://core.telegram.org/bots/api#copymessages\n     */\n  }, {\n    key: 'copyMessages',\n    value: function copyMessages(chatId, fromChatId, messageIds) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_ids = stringify(messageIds);\n      return this._request('copyMessages', {\n        form: form\n      });\n    }\n\n    /**\n     * Send photo\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} photo A file path or a Stream. Can\n     * also be a `file_id` previously uploaded\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendphoto\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n  }, {\n    key: 'sendPhoto',\n    value: function sendPhoto(chatId, photo) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('photo', photo, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.photo = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendPhoto', opts);\n    }\n\n    /**\n    * Send audio\n    *\n    * **Your audio must be in the .MP3 or .M4A format.**\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {String|stream.Stream|Buffer} audio A file path, Stream or Buffer.\n    * Can also be a `file_id` previously uploaded.\n    * @param  {Object} [options] Additional Telegram query options\n    * @param  {Object} [fileOptions] Optional file related meta-data\n    * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n    * @see https://core.telegram.org/bots/api#sendaudio\n    * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n    */\n  }, {\n    key: 'sendAudio',\n    value: function sendAudio(chatId, audio) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('audio', audio, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.audio = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendAudio', opts);\n    }\n\n    /**\n    * Send Document\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {String|stream.Stream|Buffer} doc A file path, Stream or Buffer.\n    * Can also be a `file_id` previously uploaded.\n    * @param  {Object} [options] Additional Telegram query options\n    * @param  {Object} [fileOptions] Optional file related meta-data\n    * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n    * @see https://core.telegram.org/bots/api#sendDocument\n    * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n    */\n  }, {\n    key: 'sendDocument',\n    value: function sendDocument(chatId, doc) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('document', doc, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.document = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendDocument', opts);\n    }\n\n    /**\n     * Use this method to send video files, **Telegram clients support mp4 videos** (other formats may be sent as Document).\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} video A file path or Stream.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendvideo\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n  }, {\n    key: 'sendVideo',\n    value: function sendVideo(chatId, video) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('video', video, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.video = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVideo', opts);\n    }\n\n    /**\n     * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound).\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} animation A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendanimation\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n  }, {\n    key: 'sendAnimation',\n    value: function sendAnimation(chatId, animation) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('animation', animation, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.animation = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendAnimation', opts);\n    }\n\n    /**\n     * Send voice\n     *\n     * **Your audio must be in an .OGG file encoded with OPUS**, or in .MP3 format, or in .M4A format (other formats may be sent as Audio or Document)\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} voice A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendvoice\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n  }, {\n    key: 'sendVoice',\n    value: function sendVoice(chatId, voice) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('voice', voice, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.voice = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVoice', opts);\n    }\n\n    /**\n     * Use this method to send video messages\n     * Telegram clients support **rounded square MPEG4 videos** of up to 1 minute long.\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} videoNote A file path or Stream.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @info The length parameter is actually optional. However, the API (at time of writing) requires you to always provide it until it is fixed.\n     * @see https://core.telegram.org/bots/api#sendvideonote\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n    */\n  }, {\n    key: 'sendVideoNote',\n    value: function sendVideoNote(chatId, videoNote) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('video_note', videoNote, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.video_note = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVideoNote', opts);\n    }\n\n    /**\n     * Use this method to send a group of photos or videos as an album.\n     *\n     * **Documents and audio files can be only grouped in an album with messages of the same type**\n     *\n     * If you wish to [specify file options](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files),\n     * add a `fileOptions` property to the target input in `media`.\n     *\n     * @param  {String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Array} media A JSON-serialized array describing photos and videos to be sent, must include 2–10 items\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, an array of the sent [Messages](https://core.telegram.org/bots/api#message)\n     * is returned.\n     * @see https://core.telegram.org/bots/api#sendmediagroup\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n  }, {\n    key: 'sendMediaGroup',\n    value: function sendMediaGroup(chatId, media) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      opts.formData = {};\n      var inputMedia = [];\n      var index = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = media[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var input = _step.value;\n          var payload = Object.assign({}, input);\n          delete payload.media;\n          delete payload.fileOptions;\n          try {\n            var attachName = String(index);\n            var _formatSendData4 = this._formatSendData(attachName, input.media, input.fileOptions),\n              _formatSendData5 = _slicedToArray(_formatSendData4, 2),\n              formData = _formatSendData5[0],\n              fileId = _formatSendData5[1];\n            if (formData) {\n              opts.formData[attachName] = formData[attachName];\n              payload.media = 'attach://' + attachName;\n            } else {\n              payload.media = fileId;\n            }\n          } catch (ex) {\n            return Promise.reject(ex);\n          }\n          inputMedia.push(payload);\n          index++;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      opts.qs.media = stringify(inputMedia);\n      return this._request('sendMediaGroup', opts);\n    }\n\n    /**\n     * Send location.\n     * Use this method to send point on the map.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendlocation\n     */\n  }, {\n    key: 'sendLocation',\n    value: function sendLocation(chatId, latitude, longitude) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      form.chat_id = chatId;\n      form.latitude = latitude;\n      form.longitude = longitude;\n      return this._request('sendLocation', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to edit live location messages sent by\n     * the bot or via the bot (for inline bots).\n     *\n     *  A location **can be edited until its live_period expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api#stopmessagelivelocation)**\n     *\n     * Note that you must provide one of chat_id, message_id, or\n     * inline_message_id in your request.\n     *\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n     * @see https://core.telegram.org/bots/api#editmessagelivelocation\n     */\n  }, {\n    key: 'editMessageLiveLocation',\n    value: function editMessageLiveLocation(latitude, longitude) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.latitude = latitude;\n      form.longitude = longitude;\n      return this._request('editMessageLiveLocation', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to stop updating a live location message sent by\n     * the bot or via the bot (for inline bots) before live_period expires.\n     *\n     * Note that you must provide one of chat_id, message_id, or\n     * inline_message_id in your request.\n     *\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n     * @see https://core.telegram.org/bots/api#stopmessagelivelocation\n     */\n  }, {\n    key: 'stopMessageLiveLocation',\n    value: function stopMessageLiveLocation() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('stopMessageLiveLocation', {\n        form: form\n      });\n    }\n\n    /**\n     * Send venue.\n     * Use this method to send information about a venue.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {String} title Name of the venue\n     * @param  {String} address Address of the venue\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned.\n     * @see https://core.telegram.org/bots/api#sendvenue\n     */\n  }, {\n    key: 'sendVenue',\n    value: function sendVenue(chatId, latitude, longitude, title, address) {\n      var form = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n      form.chat_id = chatId;\n      form.latitude = latitude;\n      form.longitude = longitude;\n      form.title = title;\n      form.address = address;\n      return this._request('sendVenue', {\n        form: form\n      });\n    }\n\n    /**\n     * Send contact.\n     * Use this method to send phone contacts.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} phoneNumber Contact's phone number\n     * @param  {String} firstName Contact's first name\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendcontact\n     */\n  }, {\n    key: 'sendContact',\n    value: function sendContact(chatId, phoneNumber, firstName) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      form.chat_id = chatId;\n      form.phone_number = phoneNumber;\n      form.first_name = firstName;\n      return this._request('sendContact', {\n        form: form\n      });\n    }\n\n    /**\n     * Send poll.\n     * Use this method to send a native poll.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the group/channel\n     * @param  {String} question Poll question, 1-300 characters\n     * @param  {Array} pollOptions Poll options, between 2-10 options (only 1-100 characters each)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n  }, {\n    key: 'sendPoll',\n    value: function sendPoll(chatId, question, pollOptions) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      form.chat_id = chatId;\n      form.question = question;\n      form.options = stringify(pollOptions);\n      return this._request('sendPoll', {\n        form: form\n      });\n    }\n\n    /**\n     * Send Dice\n     * Use this method to send an animated emoji that will display a random value.\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#senddice\n     */\n  }, {\n    key: 'sendDice',\n    value: function sendDice(chatId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('dice');\n        opts.formData = sendData[0];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendDice', opts);\n    }\n\n    /**\n     * Send chat action.\n     *\n     * Use this method when you need to tell the user that something is happening on the bot's side.\n     * **The status is set for 5 seconds or less** (when a message arrives from your bot, Telegram clients clear its typing status).\n     *\n     *  Action `typing` for [text messages](https://core.telegram.org/bots/api#sendmessage),\n     * `upload_photo` for [photos](https://core.telegram.org/bots/api#sendphoto), `record_video` or `upload_video` for [videos](https://core.telegram.org/bots/api#sendvideo),\n     * `record_voice` or `upload_voice` for [voice notes](https://core.telegram.org/bots/api#sendvoice), `upload_document` for [general files](https://core.telegram.org/bots/api#senddocument),\n     * `choose_sticker` for [stickers](https://core.telegram.org/bots/api#sendsticker), `find_location` for [location data](https://core.telegram.org/bots/api#sendlocation),\n     * `record_video_note` or `upload_video_note` for [video notes](https://core.telegram.org/bots/api#sendvideonote).\n     *\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} action Type of action to broadcast.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#sendchataction\n     */\n  }, {\n    key: 'sendChatAction',\n    value: function sendChatAction(chatId, action) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.action = action;\n      return this._request('sendChatAction', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to change the chosen reactions on a message.\n     * - Service messages can't be reacted to.\n     * - Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel.\n     * - In albums, bots must react to the first message.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param  {Number} messageId  Unique identifier of the target message\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise<Boolean>} True on success\n     * @see https://core.telegram.org/bots/api#setmessagereaction\n     */\n  }, {\n    key: 'setMessageReaction',\n    value: function setMessageReaction(chatId, messageId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.message_id = messageId;\n      if (form.reaction) {\n        form.reaction = stringify(form.reaction);\n      }\n      return this._request('setMessageReaction', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get a list of profile pictures for a user.\n     * Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.\n     * This method has an [older, compatible signature][getUserProfilePhotos-v0.25.0]\n     * that is being deprecated.\n     *\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object\n     * @see https://core.telegram.org/bots/api#getuserprofilephotos\n     */\n  }, {\n    key: 'getUserProfilePhotos',\n    value: function getUserProfilePhotos(userId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      /* The older method signature was getUserProfilePhotos(userId, offset, limit).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature getUserProfilePhotos(userId, offset, limit) has been deprecated since v0.25.0');\n        form = {\n          offset: arguments[1],\n          limit: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n      form.user_id = userId;\n      return this._request('getUserProfilePhotos', {\n        form: form\n      });\n    }\n\n    /**\n     * Get file.\n     * Use this method to get basic info about a file and prepare it for downloading.\n     *\n     * Attention: **link will be valid for 1 hour.**\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n     * @see https://core.telegram.org/bots/api#getfile\n     */\n  }, {\n    key: 'getFile',\n    value: function getFile(fileId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.file_id = fileId;\n      return this._request('getFile', {\n        form: form\n      });\n    }\n\n    /**\n      * Use this method to ban a user in a group, a supergroup or a channel.\n      * In the case of supergroups and channels, the user will not be able to\n      * return to the chat on their own using invite links, etc., unless unbanned first..\n      *\n      * The **bot must be an administrator in the group, supergroup or a channel** for this to work.\n      *\n      *\n      * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n      * @param  {Number} userId  Unique identifier of the target user\n      * @param  {Object} [options] Additional Telegram query options\n      * @return {Promise} True on success.\n      * @see https://core.telegram.org/bots/api#banchatmember\n      */\n  }, {\n    key: 'banChatMember',\n    value: function banChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('banChatMember', {\n        form: form\n      });\n    }\n\n    /**\n    * Use this method to unban a previously kicked user in a supergroup.\n    * The user will not return to the group automatically, but will be\n    * able to join via link, etc.\n    *\n    * The **bot must be an administrator** in the supergroup or channel for this to work.\n    *\n    * **By default**, this method guarantees that after the call the user is not a member of the chat, but will be able to join it.\n    * So **if the user is a member of the chat they will also be removed from the chat**. If you don't want this, use the parameter *only_if_banned*\n    *\n    * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} userId  Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#unbanchatmember\n    */\n  }, {\n    key: 'unbanChatMember',\n    value: function unbanChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('unbanChatMember', {\n        form: form\n      });\n    }\n\n    /**\n    * Use this method to restrict a user in a supergroup.\n    * The bot **must be an administrator in the supergroup** for this to work\n    * and must have the appropriate admin rights. Pass True for all boolean parameters\n    * to lift restrictions from a user. Returns True on success.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} userId Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#restrictchatmember\n    */\n  }, {\n    key: 'restrictChatMember',\n    value: function restrictChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('restrictChatMember', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to promote or demote a user in a supergroup or a channel.\n     * The bot **must be an administrator** in the chat for this to work\n     * and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success.\n     * @see https://core.telegram.org/bots/api#promotechatmember\n     */\n  }, {\n    key: 'promoteChatMember',\n    value: function promoteChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('promoteChatMember', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to set a custom title for an administrator in a supergroup promoted by the bot.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId Unique identifier of the target user\n     * @param  {String} customTitle New custom title for the administrator; 0-16 characters, emoji are not allowed\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatadministratorcustomtitle\n     */\n  }, {\n    key: 'setChatAdministratorCustomTitle',\n    value: function setChatAdministratorCustomTitle(chatId, userId, customTitle) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      form.chat_id = chatId;\n      form.user_id = userId;\n      form.custom_title = customTitle;\n      return this._request('setChatAdministratorCustomTitle', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to ban a channel chat in a supergroup or a channel.\n     *\n     * Until the chat is [unbanned](https://core.telegram.org/bots/api#unbanchatsenderchat), the owner of the banned chat won't be able to send messages on behalf of any of their channels.\n     * The bot **must be an administrator in the supergroup or channel** for this to work and must have the appropriate administrator rights\n     *\n     * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} senderChatId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success.\n     * @see https://core.telegram.org/bots/api#banchatsenderchat\n     */\n  }, {\n    key: 'banChatSenderChat',\n    value: function banChatSenderChat(chatId, senderChatId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.sender_chat_id = senderChatId;\n      return this._request('banChatSenderChat', {\n        form: form\n      });\n    }\n\n    /**\n    * Use this method to unban a previously banned channel chat in a supergroup or channel.\n    *\n    * The bot **must be an administrator** for this to work and must have the appropriate administrator rights.\n    *\n    * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} senderChatId Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#unbanchatsenderchat\n    */\n  }, {\n    key: 'unbanChatSenderChat',\n    value: function unbanChatSenderChat(chatId, senderChatId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.sender_chat_id = senderChatId;\n      return this._request('unbanChatSenderChat', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to set default chat permissions for all members.\n     *\n     * The bot **must be an administrator in the group or a supergroup** for this to\n     * work and **must have the `can_restrict_members` admin rights.**\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Array} chatPermissions New default chat permissions\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatpermissions\n     */\n  }, {\n    key: 'setChatPermissions',\n    value: function setChatPermissions(chatId, chatPermissions) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.permissions = stringify(chatPermissions);\n      return this._request('setChatPermissions', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to generate a new primary invite link for a chat. **Any previously generated primary link is revoked**.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Exported invite link as String on success.\n     * @see https://core.telegram.org/bots/api#exportchatinvitelink\n     */\n  }, {\n    key: 'exportChatInviteLink',\n    value: function exportChatInviteLink(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('exportChatInviteLink', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to create an additional invite link for a chat.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * The link generated with this method can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api#revokechatinvitelink)\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Object} The new invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n     * @see https://core.telegram.org/bots/api#createchatinvitelink\n     */\n  }, {\n    key: 'createChatInviteLink',\n    value: function createChatInviteLink(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('createChatInviteLink', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to edit a non-primary invite link created by the bot.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} inviteLink Text with the invite link to edit\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} The edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n     * @see https://core.telegram.org/bots/api#editchatinvitelink\n     */\n  }, {\n    key: 'editChatInviteLink',\n    value: function editChatInviteLink(chatId, inviteLink) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.invite_link = inviteLink;\n      return this._request('editChatInviteLink', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to revoke an invite link created by the bot.\n     * Note: If the primary link is revoked, a new link is automatically generated\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} inviteLink The invite link to revoke\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} The revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n     * @see https://core.telegram.org/bots/api#revokechatinvitelink\n     */\n  }, {\n    key: 'revokeChatInviteLink',\n    value: function revokeChatInviteLink(chatId, inviteLink) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.invite_link = inviteLink;\n      return this._request('revokeChatInviteLink', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to approve a chat join request.\n     *\n     * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right.**\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#approvechatjoinrequest\n     */\n  }, {\n    key: 'approveChatJoinRequest',\n    value: function approveChatJoinRequest(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('approveChatJoinRequest', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to decline a chat join request.\n     *\n     * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right**.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#declinechatjoinrequest\n     */\n  }, {\n    key: 'declineChatJoinRequest',\n    value: function declineChatJoinRequest(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('declineChatJoinRequest', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to set a new profile photo for the chat. **Photos can't be changed for private chats**.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {stream.Stream|Buffer} photo A file path or a Stream.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatphoto\n     */\n  }, {\n    key: 'setChatPhoto',\n    value: function setChatPhoto(chatId, photo) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('photo', photo, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.photo = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('setChatPhoto', opts);\n    }\n\n    /**\n    * Use this method to delete a chat photo. **Photos can't be changed for private chats**.\n    *\n    * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#deletechatphoto\n    */\n  }, {\n    key: 'deleteChatPhoto',\n    value: function deleteChatPhoto(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('deleteChatPhoto', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to change the title of a chat. **Titles can't be changed for private chats**.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} title New chat title, 1-255 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchattitle\n     */\n  }, {\n    key: 'setChatTitle',\n    value: function setChatTitle(chatId, title) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.title = title;\n      return this._request('setChatTitle', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to change the description of a group, a supergroup or a channel.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} description New chat title, 0-255 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatdescription\n     */\n  }, {\n    key: 'setChatDescription',\n    value: function setChatDescription(chatId, description) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.description = description;\n      return this._request('setChatDescription', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to pin a message in a supergroup.\n     *\n     * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n     * right in a supergroup or `can_edit_messages` administrator right in a channel.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} messageId Identifier of a message to pin\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#pinchatmessage\n     */\n  }, {\n    key: 'pinChatMessage',\n    value: function pinChatMessage(chatId, messageId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.message_id = messageId;\n      return this._request('pinChatMessage', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to remove a message from the list of pinned messages in a chat\n     *\n     * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n     * right in a supergroup or `can_edit_messages` administrator right in a channel.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unpinchatmessage\n     */\n  }, {\n    key: 'unpinChatMessage',\n    value: function unpinChatMessage(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('unpinChatMessage', {\n        form: form\n      });\n    }\n\n    /**\n    * Use this method to clear the list of pinned messages in a chat.\n    *\n    * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n    * right in a supergroup or `can_edit_messages` administrator right in a channel.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#unpinallchatmessages\n    */\n  }, {\n    key: 'unpinAllChatMessages',\n    value: function unpinAllChatMessages(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('unpinAllChatMessages', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method for your bot to leave a group, supergroup or channel\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#leavechat\n     */\n  }, {\n    key: 'leaveChat',\n    value: function leaveChat(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('leaveChat', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get up to date information about the chat\n     * (current name of the user for one-on-one conversations, current\n     * username of a user, group or channel, etc.).\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`) or channel\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [ChatFullInfo](https://core.telegram.org/bots/api#chatfullinfo) object on success\n     * @see https://core.telegram.org/bots/api#getchat\n     */\n  }, {\n    key: 'getChat',\n    value: function getChat(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('getChat', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get a list of administrators in a chat\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api#chatmember) objects that contains information about all chat administrators except other bots.\n     * If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned\n     * @see https://core.telegram.org/bots/api#getchatadministrators\n     */\n  }, {\n    key: 'getChatAdministrators',\n    value: function getChatAdministrators(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('getChatAdministrators', {\n        form: form\n      });\n    }\n\n    /**\n    * Use this method to get the number of members in a chat.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} Int on success\n    * @see https://core.telegram.org/bots/api#getchatmembercount\n    */\n  }, {\n    key: 'getChatMemberCount',\n    value: function getChatMemberCount(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('getChatMemberCount', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get information about a member of a chat.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [ChatMember](https://core.telegram.org/bots/api#chatmember) object on success\n     * @see https://core.telegram.org/bots/api#getchatmember\n     */\n  }, {\n    key: 'getChatMember',\n    value: function getChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('getChatMember', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to set a new group sticker set for a supergroup.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n     *\n     * **Note:** Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {String} stickerSetName Name of the sticker set to be set as the group sticker set\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatstickerset\n     */\n  }, {\n    key: 'setChatStickerSet',\n    value: function setChatStickerSet(chatId, stickerSetName) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.sticker_set_name = stickerSetName;\n      return this._request('setChatStickerSet', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to delete a group sticker set from a supergroup.\n     *\n     * Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletechatstickerset\n     */\n  }, {\n    key: 'deleteChatStickerSet',\n    value: function deleteChatStickerSet(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('deleteChatStickerSet', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects\n     * @see https://core.telegram.org/bots/api#getforumtopiciconstickers\n     */\n  }, {\n    key: 'getForumTopicIconStickers',\n    value: function getForumTopicIconStickers(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('getForumTopicIconStickers', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to create a topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n     *\n     * Returns information about the created topic as a [ForumTopic](https://core.telegram.org/bots/api#forumtopic) object.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {String} name Topic name, 1-128 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @see https://core.telegram.org/bots/api#createforumtopic\n     */\n  }, {\n    key: 'createForumTopic',\n    value: function createForumTopic(chatId, name) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.name = name;\n      return this._request('createForumTopic', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to edit name and icon of a topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#editforumtopic\n     */\n  }, {\n    key: 'editForumTopic',\n    value: function editForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('editForumTopic', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to close an open topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#closeforumtopic\n     */\n  }, {\n    key: 'closeForumTopic',\n    value: function closeForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('closeForumTopic', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to reopen a closed topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#reopenforumtopic\n     */\n  }, {\n    key: 'reopenForumTopic',\n    value: function reopenForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('reopenForumTopic', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to delete a forum topic along with all its messages in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deleteforumtopic\n     */\n  }, {\n    key: 'deleteForumTopic',\n    value: function deleteForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('deleteForumTopic', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to clear the list of pinned messages in a forum topic.\n     * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unpinallforumtopicmessages\n     */\n  }, {\n    key: 'unpinAllForumTopicMessages',\n    value: function unpinAllForumTopicMessages(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('unpinAllForumTopicMessages', {\n        form: form\n      });\n    }\n\n    /**\n    * Use this method to edit the name of the 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically unhidden if it was hidden.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {String} name New topic name, 1-128 characters\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#editgeneralforumtopic\n    */\n  }, {\n    key: 'editGeneralForumTopic',\n    value: function editGeneralForumTopic(chatId, name) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.name = name;\n      return this._request('editGeneralForumTopic', {\n        form: form\n      });\n    }\n\n    /**\n    * Use this method to close an open 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically unhidden if it was hidden.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#closegeneralforumtopic\n    */\n  }, {\n    key: 'closeGeneralForumTopic',\n    value: function closeGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('closeGeneralForumTopic', {\n        form: form\n      });\n    }\n\n    /**\n    * Use this method to reopen a closed 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically unhidden if it was hidden.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#reopengeneralforumtopic\n    */\n  }, {\n    key: 'reopenGeneralForumTopic',\n    value: function reopenGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('reopenGeneralForumTopic', {\n        form: form\n      });\n    }\n\n    /**\n    * Use this method to hide the 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically closed if it was open.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#hidegeneralforumtopic\n    */\n  }, {\n    key: 'hideGeneralForumTopic',\n    value: function hideGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('hideGeneralForumTopic', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to unhide the 'General' topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unhidegeneralforumtopic\n     */\n  }, {\n    key: 'unhideGeneralForumTopic',\n    value: function unhideGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('unhideGeneralForumTopic', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to clear the list of pinned messages in a General forum topic.\n     * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages\n     */\n  }, {\n    key: 'unpinAllGeneralForumTopicMessages',\n    value: function unpinAllGeneralForumTopicMessages(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.chat_id = chatId;\n      return this._request('unhideGeneralForumTopic', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to send answers to callback queries sent from\n     * [inline keyboards](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating).\n     *\n     * The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.\n     *\n     * This method has **older, compatible signatures ([1][answerCallbackQuery-v0.27.1])([2][answerCallbackQuery-v0.29.0])**\n     * that are being deprecated.\n     *\n     * @param  {String} callbackQueryId Unique identifier for the query to be answered\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#answercallbackquery\n     */\n  }, {\n    key: 'answerCallbackQuery',\n    value: function answerCallbackQuery(callbackQueryId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      /* The older method signature (in/before v0.27.1) was answerCallbackQuery(callbackQueryId, text, showAlert).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature answerCallbackQuery(callbackQueryId, text, showAlert) has been deprecated since v0.27.1');\n        form = {\n          callback_query_id: arguments[0],\n          text: arguments[1],\n          show_alert: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n      /* The older method signature (in/before v0.29.0) was answerCallbackQuery([options]).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library. */\n      if ((typeof callbackQueryId === 'undefined' ? 'undefined' : _typeof(callbackQueryId)) === 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature answerCallbackQuery([options]) has been deprecated since v0.29.0');\n        form = callbackQueryId;\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      } else {\n        form.callback_query_id = callbackQueryId;\n      }\n      return this._request('answerCallbackQuery', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get the list of boosts added to a chat by a use.\n     * Requires administrator rights in the chat\n     *\n     * @param  {Number|String} chatId  Unique identifier for the group/channel\n     * @param  {Number} user_id Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns a [UserChatBoosts](https://core.telegram.org/bots/api#userchatboosts) object\n     * @see https://core.telegram.org/bots/api#getuserchatboosts\n     */\n  }, {\n    key: 'getUserChatBoosts',\n    value: function getUserChatBoosts(chatId, pollId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.message_id = pollId;\n      return this._request('getUserChatBoosts', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get information about the connection of the bot with a business account\n     *\n     * @param  {Number|String} businessConnectionId  Unique identifier for the group/channel\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns [BusinessConnection](https://core.telegram.org/bots/api#businessconnection) object\n     * @see https://core.telegram.org/bots/api#getbusinessconnection\n     */\n  }, {\n    key: 'getBusinessConnection',\n    value: function getBusinessConnection(businessConnectionId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.business_connection_id = businessConnectionId;\n      return this._request('getBusinessConnection', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to change the list of the bot's commands.\n     *\n     * See https://core.telegram.org/bots#commands for more details about bot commands\n     *\n     * @param  {Array} commands  List of bot commands to be set as the list of the [bot's commands](https://core.telegram.org/bots/api#botcommand). At most 100 commands can be specified.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setmycommands\n     */\n  }, {\n    key: 'setMyCommands',\n    value: function setMyCommands(commands) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.commands = stringify(commands);\n      if (form.scope) {\n        form.scope = stringify(form.scope);\n      }\n      return this._request('setMyCommands', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to delete the list of the bot's commands for the given scope and user language.\n     *\n     *  After deletion, [higher level commands](https://core.telegram.org/bots/api#determining-list-of-commands) will be shown to affected users.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletemycommands\n     */\n  }, {\n    key: 'deleteMyCommands',\n    value: function deleteMyCommands() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('deleteMyCommands', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get the current list of the bot's commands for the given scope and user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Array of [BotCommand](https://core.telegram.org/bots/api#botcommand) on success. If commands aren't set, an empty list is returned.\n     * @see https://core.telegram.org/bots/api#getmycommands\n     */\n  }, {\n    key: 'getMyCommands',\n    value: function getMyCommands() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (form.scope) {\n        form.scope = stringify(form.scope);\n      }\n      return this._request('getMyCommands', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to change the bot's name.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setmyname\n     */\n  }, {\n    key: 'setMyName',\n    value: function setMyName() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('setMyName', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get the current bot name for the given user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [BotName](https://core.telegram.org/bots/api#botname) on success\n     * @see https://core.telegram.org/bots/api#getmyname\n     */\n  }, {\n    key: 'getMyName',\n    value: function getMyName() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('getMyName', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.\n     *\n     * Returns True on success.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setmydescription\n     */\n  }, {\n    key: 'setMyDescription',\n    value: function setMyDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('setMyDescription', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get the current bot description for the given user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Returns [BotDescription](https://core.telegram.org/bots/api#botdescription) on success.\n     * @see https://core.telegram.org/bots/api#getmydescription\n     */\n  }, {\n    key: 'getMyDescription',\n    value: function getMyDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('getMyDescription', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to change the bot's short description, which is shown on the bot's profile page\n     * and is sent together with the link when users share the bot.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Returns True on success.\n     * @see https://core.telegram.org/bots/api#setmyshortdescription\n     */\n  }, {\n    key: 'setMyShortDescription',\n    value: function setMyShortDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('setMyShortDescription', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get the current bot short description for the given user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Returns [BotShortDescription](https://core.telegram.org/bots/api#botshortdescription) on success.\n     * @see https://core.telegram.org/bots/api#getmyshortdescription\n     */\n  }, {\n    key: 'getMyShortDescription',\n    value: function getMyShortDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('getMyShortDescription', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to change the bot's menu button in a private chat, or the default menu button.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatmenubutton\n     */\n  }, {\n    key: 'setChatMenuButton',\n    value: function setChatMenuButton() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('setChatMenuButton', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get the current value of the bot's menu button in a private chat, or the default menu button.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [MenuButton](https://core.telegram.org/bots/api#menubutton) on success\n     * @see https://core.telegram.org/bots/api#getchatmenubutton\n     */\n  }, {\n    key: 'getChatMenuButton',\n    value: function getChatMenuButton() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('getChatMenuButton', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels.\n     *\n     * These rights will be suggested to users, but they are are free to modify the list before adding the bot.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#getchatmenubutton\n     */\n  }, {\n    key: 'setMyDefaultAdministratorRights',\n    value: function setMyDefaultAdministratorRights() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('setMyDefaultAdministratorRights', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get the current default administrator rights of the bot.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [ChatAdministratorRights](https://core.telegram.org/bots/api#chatadministratorrights) on success\n     * @see https://core.telegram.org/bots/api#getmydefaultadministratorrights\n     */\n  }, {\n    key: 'getMyDefaultAdministratorRights',\n    value: function getMyDefaultAdministratorRights() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._request('getMyDefaultAdministratorRights', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to edit text or [game](https://core.telegram.org/bots/api#games) messages sent by the bot or via the bot (for inline bots).\n     *\n     * Note: that **you must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {String} text  New text of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagetext\n     */\n  }, {\n    key: 'editMessageText',\n    value: function editMessageText(text) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.text = text;\n      return this._request('editMessageText', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to edit captions of messages sent by the bot or via the bot (for inline bots).\n     *\n     * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {String} caption  New caption of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagecaption\n     */\n  }, {\n    key: 'editMessageCaption',\n    value: function editMessageCaption(caption) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.caption = caption;\n      return this._request('editMessageCaption', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to edit animation, audio, document, photo, or video messages.\n     *\n     * If a message is a part of a message album, then it can be edited only to a photo or a video.\n     *\n     * Otherwise, message type can be changed arbitrarily. When inline message is edited, new file can't be uploaded.\n     * Use previously uploaded file via its file_id or specify a URL.\n     *\n     * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {Object} media  A JSON-serialized object for a new media content of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagemedia\n     */\n  }, {\n    key: 'editMessageMedia',\n    value: function editMessageMedia(media) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var regexAttach = /attach:\\/\\/.+/;\n      if (typeof media.media === 'string' && regexAttach.test(media.media)) {\n        var opts = {\n          qs: form\n        };\n        opts.formData = {};\n        var payload = Object.assign({}, media);\n        delete payload.media;\n        try {\n          var attachName = String(0);\n          var _formatSendData6 = this._formatSendData(attachName, media.media.replace('attach://', ''), media.fileOptions),\n            _formatSendData7 = _slicedToArray(_formatSendData6, 1),\n            formData = _formatSendData7[0];\n          if (formData) {\n            opts.formData[attachName] = formData[attachName];\n            payload.media = 'attach://' + attachName;\n          } else {\n            throw new errors.FatalError('Failed to process the replacement action for your ' + media.type);\n          }\n        } catch (ex) {\n          return Promise.reject(ex);\n        }\n        opts.qs.media = stringify(payload);\n        return this._request('editMessageMedia', opts);\n      }\n      form.media = stringify(media);\n      return this._request('editMessageMedia', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).\n     *\n     * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {Object} replyMarkup  A JSON-serialized object for an inline keyboard.\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagetext\n     */\n  }, {\n    key: 'editMessageReplyMarkup',\n    value: function editMessageReplyMarkup(replyMarkup) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.reply_markup = replyMarkup;\n      return this._request('editMessageReplyMarkup', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to stop a poll which was sent by the bot.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the group/channel\n     * @param  {Number} pollId Identifier of the original message with the poll\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the stopped [Poll](https://core.telegram.org/bots/api#poll) is returned\n     * @see https://core.telegram.org/bots/api#stoppoll\n     */\n  }, {\n    key: 'stopPoll',\n    value: function stopPoll(chatId, pollId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.message_id = pollId;\n      return this._request('stopPoll', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS,\n     * or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers.\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} sticker A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded. Stickers are WebP format files.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n     * @see https://core.telegram.org/bots/api#sendsticker\n     */\n  }, {\n    key: 'sendSticker',\n    value: function sendSticker(chatId, sticker) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('sticker', sticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.sticker = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendSticker', opts);\n    }\n\n    /**\n     * Use this method to get a sticker set.\n     *\n     * @param  {String} name Name of the sticker set\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, a [StickerSet](https://core.telegram.org/bots/api#stickerset) object is returned\n     * @see https://core.telegram.org/bots/api#getstickerset\n     */\n  }, {\n    key: 'getStickerSet',\n    value: function getStickerSet(name) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.name = name;\n      return this._request('getStickerSet', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get information about custom emoji stickers by their identifiers.\n     *\n     * @param  {Array} custom_emoji_ids List of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects.\n     * @see https://core.telegram.org/bots/api#getcustomemojistickers\n     */\n  }, {\n    key: 'getCustomEmojiStickers',\n    value: function getCustomEmojiStickers(customEmojiIds) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.custom_emoji_ids = stringify(customEmojiIds);\n      return this._request('getCustomEmojiStickers', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to upload a file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple\n     * times).\n     *\n     * @param  {Number} userId User identifier of sticker file owner\n     * @param  {String|stream.Stream|Buffer} sticker A file path or a Stream with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. Can also be a `file_id` previously uploaded.\n     * @param {String} stickerFormat Allow values:  `static`, `animated` or `video`\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n     * @see https://core.telegram.org/bots/api#uploadstickerfile\n     */\n  }, {\n    key: 'uploadStickerFile',\n    value: function uploadStickerFile(userId, sticker) {\n      var stickerFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'static';\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var fileOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.sticker_format = stickerFormat;\n      try {\n        var sendData = this._formatSendData('sticker', sticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.sticker = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('uploadStickerFile', opts);\n    }\n\n    /**\n     * Use this method to create new sticker set owned by a user.\n     *\n     * The bot will be able to edit the created sticker set.\n     *\n     * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n     *\n     * @param  {Number} userId User identifier of created sticker set owner\n     * @param  {String} name Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g.,   *\"animals\"*). Can contain only english letters, digits and underscores.\n     *  Must begin with a letter, can't contain consecutive underscores and must end in `\"_by_<bot_username>\"`. `<bot_username>` is case insensitive. 1-64 characters.\n     * @param  {String} title Sticker set title, 1-64 characters\n     * @param  {String|stream.Stream|Buffer} pngSticker Png image with the sticker, must be up to 512 kilobytes in size,\n     *  dimensions must not exceed 512px, and either width or height must be exactly 512px.\n     * @param  {String} emojis One or more emoji corresponding to the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#createnewstickerset\n     */\n  }, {\n    key: 'createNewStickerSet',\n    value: function createNewStickerSet(userId, name, title, pngSticker, emojis) {\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n      var fileOptions = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.name = name;\n      opts.qs.title = title;\n      opts.qs.emojis = emojis;\n      opts.qs.mask_position = stringify(options.mask_position);\n      try {\n        var sendData = this._formatSendData('png_sticker', pngSticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.png_sticker = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('createNewStickerSet', opts);\n    }\n\n    /**\n     * Use this method to add a new sticker to a set created by the bot.\n     *\n     * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n     *\n     * Animated stickers can be added to animated sticker sets and only to them\n     *\n     * Note:\n     * - Emoji sticker sets can have up to 200 sticker\n     * - Static or Animated sticker sets can have up to 120 stickers\n     *\n     * @param  {Number} userId User identifier of sticker set owner\n     * @param  {String} name Sticker set name\n     * @param  {String|stream.Stream|Buffer} sticker Png image with the sticker (must be up to 512 kilobytes in size,\n     * dimensions must not exceed 512px, and either width or height must be exactly 512px, [TGS animation](https://core.telegram.org/stickers#animated-sticker-requirements)\n     * with the sticker or [WEBM video](https://core.telegram.org/stickers#video-sticker-requirements) with the sticker.\n     * @param  {String} emojis One or more emoji corresponding to the sticker\n     * @param  {String} stickerType Allow values: `png_sticker`, `tgs_sticker`, or `webm_sticker`.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#addstickertoset\n     */\n  }, {\n    key: 'addStickerToSet',\n    value: function addStickerToSet(userId, name, sticker, emojis) {\n      var stickerType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'png_sticker';\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n      var fileOptions = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.name = name;\n      opts.qs.emojis = emojis;\n      opts.qs.mask_position = stringify(options.mask_position);\n      if (typeof stickerType !== 'string' || ['png_sticker', 'tgs_sticker', 'webm_sticker'].indexOf(stickerType) === -1) {\n        return Promise.reject(new Error('stickerType must be a string and the allow types is: png_sticker, tgs_sticker, webm_sticker'));\n      }\n      try {\n        var sendData = this._formatSendData(stickerType, sticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs[stickerType] = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('addStickerToSet', opts);\n    }\n\n    /**\n     * Use this method to move a sticker in a set created by the bot to a specific position.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Number} position New sticker position in the set, zero-based\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickerpositioninset\n     */\n  }, {\n    key: 'setStickerPositionInSet',\n    value: function setStickerPositionInSet(sticker, position) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.sticker = sticker;\n      form.position = position;\n      return this._request('setStickerPositionInSet', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to delete a sticker from a set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletestickerfromset\n     * @todo Add tests for this method!\n     */\n  }, {\n    key: 'deleteStickerFromSet',\n    value: function deleteStickerFromSet(sticker) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.sticker = sticker;\n      return this._request('deleteStickerFromSet', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to replace an existing sticker in a sticker set with a new one\n     *\n     * @param  {Number} user_id User identifier of the sticker set owner\n     * @param  {String} name Sticker set name\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#replacestickerinset\n     * @todo Add tests for this method!\n     */\n  }, {\n    key: 'replaceStickerInSet',\n    value: function replaceStickerInSet(userId, name, oldSticker) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      form.user_id = userId;\n      form.name = name;\n      form.old_sticker = oldSticker;\n      return this._request('deleteStickerFromSet', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to change the list of emoji assigned to a regular or custom emoji sticker.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param { Array } emojiList A JSON-serialized list of 1-20 emoji associated with the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickeremojilist\n     */\n  }, {\n    key: 'setStickerEmojiList',\n    value: function setStickerEmojiList(sticker, emojiList) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.sticker = sticker;\n      form.emoji_list = stringify(emojiList);\n      return this._request('setStickerEmojiList', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to change the list of emoji assigned to a `regular` or `custom emoji` sticker.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickerkeywords\n     */\n  }, {\n    key: 'setStickerKeywords',\n    value: function setStickerKeywords(sticker) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.sticker = sticker;\n      if (form.keywords) {\n        form.keywords = stringify(form.keywords);\n      }\n      return this._request('setStickerKeywords', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to change the [mask position](https://core.telegram.org/bots/api#maskposition) of a mask sticker.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickermaskposition\n     */\n  }, {\n    key: 'setStickerMaskPosition',\n    value: function setStickerMaskPosition(sticker) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.sticker = sticker;\n      if (form.mask_position) {\n        form.mask_position = stringify(form.mask_position);\n      }\n      return this._request('setStickerMaskPosition', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to set the title of a created sticker set.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} name Sticker set name\n     * @param  {String} title Sticker set title, 1-64 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickersettitle\n     */\n  }, {\n    key: 'setStickerSetTitle',\n    value: function setStickerSetTitle(name, title) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.name = name;\n      form.title = title;\n      return this._request('setStickerSetTitle', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to add a thumb to a set created by the bot.\n     *\n     * Animated thumbnails can be set for animated sticker sets only. Video thumbnails can be set only for video sticker sets only\n     *\n     * @param  {Number} userId User identifier of sticker set owner\n     * @param  {String} name Sticker set name\n     * @param  {String|stream.Stream|Buffer} thumbnail A .WEBP or .PNG image with the thumbnail,\n     * must be up to 128 kilobytes in size and have width and height exactly 100px,\n     * a TGS animation with the thumbnail up to 32 kilobytes in size or a WEBM video with the thumbnail up to 32 kilobytes in size.\n     *\n     * Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram\n     * to get a file from the Internet, or upload a new one. Animated sticker set thumbnails can't be uploaded via HTTP URL.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickersetthumbnail\n     */\n  }, {\n    key: 'setStickerSetThumbnail',\n    value: function setStickerSetThumbnail(userId, name, thumbnail) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var fileOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.name = name;\n      opts.qs.mask_position = stringify(options.mask_position);\n      try {\n        var sendData = this._formatSendData('thumbnail', thumbnail, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.thumbnail = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('setStickerSetThumbnail', opts);\n    }\n\n    /**\n     * Use this method to set the thumbnail of a custom emoji sticker set.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} name Sticker set name\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setcustomemojistickersetthumbnail\n     */\n  }, {\n    key: 'setCustomEmojiStickerSetThumbnail',\n    value: function setCustomEmojiStickerSetThumbnail(name) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.name = name;\n      return this._request('setCustomEmojiStickerSetThumbnail', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to delete a sticker set that was created by the bot.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} name Sticker set name\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletestickerset\n     */\n  }, {\n    key: 'deleteStickerSet',\n    value: function deleteStickerSet(name) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.name = name;\n      return this._request('deleteStickerSet', {\n        form: form\n      });\n    }\n\n    /**\n     * Send answers to an inline query.\n     *\n     * Note: No more than 50 results per query are allowed.\n     *\n     * @param  {String} inlineQueryId Unique identifier of the query\n     * @param  {InlineQueryResult[]} results An array of results for the inline query\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, True is returned\n     * @see https://core.telegram.org/bots/api#answerinlinequery\n     */\n  }, {\n    key: 'answerInlineQuery',\n    value: function answerInlineQuery(inlineQueryId, results) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.inline_query_id = inlineQueryId;\n      form.results = stringify(results);\n      return this._request('answerInlineQuery', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to set the result of an interaction with a [Web App](https://core.telegram.org/bots/webapps)\n     * and send a corresponding message on behalf of the user to the chat from which the query originated.\n     *\n     * @param  {String} webAppQueryId Unique identifier for the query to be answered\n     * @param  {InlineQueryResult} result object that represents one result of an inline query\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, a [SentWebAppMessage](https://core.telegram.org/bots/api#sentwebappmessage) object is returned\n     * @see https://core.telegram.org/bots/api#answerwebappquery\n     */\n  }, {\n    key: 'answerWebAppQuery',\n    value: function answerWebAppQuery(webAppQueryId, result) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.web_app_query_id = webAppQueryId;\n      form.result = stringify(result);\n      return this._request('answerWebAppQuery', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to send an invoice.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} title Product name, 1-32 characters\n     * @param  {String} description Product description, 1-255 characters\n     * @param  {String} payload Bot defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.\n     * @param  {String} providerToken Payments provider token, obtained via `@BotFather`\n     * @param  {String} currency Three-letter ISO 4217 currency code\n     * @param  {Array} prices Breakdown of prices\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n     * @see https://core.telegram.org/bots/api#sendinvoice\n     */\n  }, {\n    key: 'sendInvoice',\n    value: function sendInvoice(chatId, title, description, payload, providerToken, currency, prices) {\n      var form = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};\n      form.chat_id = chatId;\n      form.title = title;\n      form.description = description;\n      form.payload = payload;\n      form.provider_token = providerToken;\n      form.currency = currency;\n      form.prices = stringify(prices);\n      form.provider_data = stringify(form.provider_data);\n      if (form.suggested_tip_amounts) {\n        form.suggested_tip_amounts = stringify(form.suggested_tip_amounts);\n      }\n      return this._request('sendInvoice', {\n        form: form\n      });\n    }\n\n    /**\n    * Use this method to create a link for an invoice.\n    *\n    * @param {String} title Product name, 1-32 characters\n    * @param {String} description Product description, 1-255 characters\n    * @param {String} payload Bot defined invoice payload\n    * @param {String} providerToken Payment provider token\n    * @param {String} currency Three-letter ISO 4217 currency code\n    * @param {Array} prices Breakdown of prices\n    * @param {Object} [options] Additional Telegram query options\n    * @returns {Promise} The created invoice link as String on success.\n    * @see https://core.telegram.org/bots/api#createinvoicelink\n    */\n  }, {\n    key: 'createInvoiceLink',\n    value: function createInvoiceLink(title, description, payload, providerToken, currency, prices) {\n      var form = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n      form.title = title;\n      form.description = description;\n      form.payload = payload;\n      form.provider_token = providerToken;\n      form.currency = currency;\n      form.prices = stringify(prices);\n      return this._request('createInvoiceLink', {\n        form: form\n      });\n    }\n\n    /**\n    * Use this method to reply to shipping queries.\n    *\n    * If you sent an invoice requesting a shipping address and the parameter is_flexible was specified,\n    * the Bot API will send an [Update](https://core.telegram.org/bots/api#update) with a shipping_query field to the bot\n    *\n    * @param  {String} shippingQueryId  Unique identifier for the query to be answered\n    * @param  {Boolean} ok Specify if delivery of the product is possible\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} On success, True is returned\n    * @see https://core.telegram.org/bots/api#answershippingquery\n    */\n  }, {\n    key: 'answerShippingQuery',\n    value: function answerShippingQuery(shippingQueryId, ok) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.shipping_query_id = shippingQueryId;\n      form.ok = ok;\n      form.shipping_options = stringify(form.shipping_options);\n      return this._request('answerShippingQuery', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to respond to such pre-checkout queries\n     *\n     * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of\n     * an [Update](https://core.telegram.org/bots/api#update) with the field *pre_checkout_query*.\n     *\n     * **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n     *\n     * @param  {String} preCheckoutQueryId  Unique identifier for the query to be answered\n     * @param  {Boolean} ok Specify if every order details are ok\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, True is returned\n     * @see https://core.telegram.org/bots/api#answerprecheckoutquery\n     */\n  }, {\n    key: 'answerPreCheckoutQuery',\n    value: function answerPreCheckoutQuery(preCheckoutQueryId, ok) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.pre_checkout_query_id = preCheckoutQueryId;\n      form.ok = ok;\n      return this._request('answerPreCheckoutQuery', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to send a game.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} gameShortName name of the game to be sent. Set up your games via `@BotFather`.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n     * @see https://core.telegram.org/bots/api#sendgame\n     */\n  }, {\n    key: 'sendGame',\n    value: function sendGame(chatId, gameShortName) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.game_short_name = gameShortName;\n      return this._request('sendGame', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to set the score of the specified user in a game message.\n     *\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Number} score New score value, must be non-negative\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, if the message is not an inline message, the [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#setgamescore\n     */\n  }, {\n    key: 'setGameScore',\n    value: function setGameScore(userId, score) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.user_id = userId;\n      form.score = score;\n      return this._request('setGameScore', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to get data for high score tables.\n     *\n     * Will return the score of the specified user and several of their neighbors in a game.\n     *\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns an Array of [GameHighScore](https://core.telegram.org/bots/api#gamehighscore) objects\n     * @see https://core.telegram.org/bots/api#getgamehighscores\n     */\n  }, {\n    key: 'getGameHighScores',\n    value: function getGameHighScores(userId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      form.user_id = userId;\n      return this._request('getGameHighScores', {\n        form: form\n      });\n    }\n\n    /**\n    * Use this method to delete a message, including service messages, with the following limitations:\n    * - A message can only be deleted if it was sent less than 48 hours ago.\n    * - A dice message can only be deleted if it was sent more than 24 hours ago.\n    * - Bots can delete outgoing messages in groups and supergroups.\n    * - Bots can delete incoming messages in groups, supergroups and channels.\n    * - Bots granted `can_post_messages` permissions can delete outgoing messages in channels.\n    * - If the bot is an administrator of a group, it can delete any message there.\n    * - If the bot has `can_delete_messages` permission in a supergroup, it can delete any message there.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n    * @param  {Number} messageId  Unique identifier of the target message\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#deletemessage\n    */\n  }, {\n    key: 'deleteMessage',\n    value: function deleteMessage(chatId, messageId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.message_id = messageId;\n      return this._request('deleteMessage', {\n        form: form\n      });\n    }\n\n    /**\n     * Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param  {Array<Number|String>} messageIds  Identifiers of 1-100 messages to delete. See deleteMessage for limitations on which messages can be deleted\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise<Boolean>} True on success\n     * @see https://core.telegram.org/bots/api#deletemessages\n     */\n  }, {\n    key: 'deleteMessages',\n    value: function deleteMessages(chatId, messageIds) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      form.chat_id = chatId;\n      form.message_ids = stringify(messageIds);\n      return this._request('deleteMessages', {\n        form: form\n      });\n    }\n  }]);\n  return TelegramBot;\n}(EventEmitter);\nmodule.exports = TelegramBot;","map":{"version":3,"names":["_typeof","Symbol","iterator","obj","constructor","prototype","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","Constructor","protoProps","staticProps","_get","get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","parent","getPrototypeOf","getter","call","_defineProperty","_classCallCheck","instance","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","setPrototypeOf","__proto__","require","shim","errors","TelegramBotWebHook","TelegramBotPolling","debug","EventEmitter","fileType","request","streamedRequest","qs","stream","mime","path","URL","fs","pump","deprecate","_messageTypes","_deprecatedMessageTypes","stringify","data","JSON","TelegramBot","_EventEmitter","on","event","listener","indexOf","url","join","token","options","arguments","_this","polling","webHook","baseApiUrl","filepath","badRejection","_textRegexpCallbacks","_replyListenerId","_replyListeners","_polling","_webHook","autoStart","startPolling","autoOpen","openWebHook","_buildURL","_path","testEnvironment","_fixReplyMarkup","replyMarkup","reply_markup","_fixEntitiesField","entities","captionEntities","caption_entities","explanationEntities","explanation_entities","_fixAddFileThumbnail","opts","thumb","formData","attachName","_formatSendData2","_formatSendData","replace","_formatSendData3","thumbnail","_fixReplyParameters","hasOwnProperty","reply_parameters","_request","Promise","reject","FatalError","assign","form","method","simple","resolveWithFullResponse","forever","then","resp","body","parse","ParseError","ok","result","TelegramError","error_code","description","catch","error","response","type","fileOptions","deprecationMessage","filedata","filename","contentType","Stream","basename","toString","pathname","unescape","Buffer","isBuffer","process","env","NTBA_FIX_350","filetype","ext","existsSync","createReadStream","lookup","hasOpenWebHook","restart","start","initPolling","stopPolling","resolve","stop","getFileLink","fileId","_this2","getFile","file_path","getFileStream","_this3","fileStream","PassThrough","fileURI","emit","uri","downloadFile","downloadDir","promise","a","b","info","fileName","slice","lastIndexOf","filePath","createWriteStream","onText","regexp","callback","removeTextListener","index","findIndex","textListener","String","splice","clearTextListeners","onReplyToMessage","chatId","messageId","id","removeReplyListener","replyListenerId","replyListener","clearReplyListeners","isPolling","open","closeWebHook","close","isOpen","processUpdate","update","_this4","message","editedMessage","edited_message","channelPost","channel_post","editedChannelPost","edited_channel_post","businessConnection","business_connection","businesssMessage","business_message","editedBusinessMessage","edited_business_message","deletedBusinessMessage","deleted_business_messages","messageReaction","message_reaction","messageReactionCount","message_reaction_count","inlineQuery","inline_query","chosenInlineResult","chosen_inline_result","callbackQuery","callback_query","shippingQuery","shipping_query","preCheckoutQuery","pre_checkout_query","poll","pollAnswer","poll_answer","myChatMember","my_chat_member","chatMember","chat_member","chatJoinRequest","chat_join_request","chatBoost","chat_boost","removedChatBoost","removed_chat_boost","metadata","messageTypes","find","messageType","text","some","reg","RegExp","exec","lastIndex","onlyFirstMatch","reply_to_message","forEach","reply","chat","message_id","caption","getUpdates","timeout","limit","offset","setWebHook","cert","certificate","sendData","ex","deleteWebHook","getWebHookInfo","getMe","logOut","sendMessage","chat_id","forwardMessage","fromChatId","from_chat_id","forwardMessages","messageIds","message_ids","copyMessage","copyMessages","sendPhoto","photo","sendAudio","audio","sendDocument","doc","document","sendVideo","video","sendAnimation","animation","sendVoice","voice","sendVideoNote","videoNote","video_note","sendMediaGroup","media","inputMedia","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","input","payload","_formatSendData4","_formatSendData5","return","sendLocation","latitude","longitude","editMessageLiveLocation","stopMessageLiveLocation","sendVenue","title","address","sendContact","phoneNumber","firstName","phone_number","first_name","sendPoll","question","pollOptions","sendDice","sendChatAction","action","setMessageReaction","reaction","getUserProfilePhotos","userId","user_id","file_id","banChatMember","unbanChatMember","restrictChatMember","promoteChatMember","setChatAdministratorCustomTitle","customTitle","custom_title","banChatSenderChat","senderChatId","sender_chat_id","unbanChatSenderChat","setChatPermissions","chatPermissions","permissions","exportChatInviteLink","createChatInviteLink","editChatInviteLink","inviteLink","invite_link","revokeChatInviteLink","approveChatJoinRequest","declineChatJoinRequest","setChatPhoto","deleteChatPhoto","setChatTitle","setChatDescription","pinChatMessage","unpinChatMessage","unpinAllChatMessages","leaveChat","getChat","getChatAdministrators","getChatMemberCount","getChatMember","setChatStickerSet","stickerSetName","sticker_set_name","deleteChatStickerSet","getForumTopicIconStickers","createForumTopic","name","editForumTopic","messageThreadId","message_thread_id","closeForumTopic","reopenForumTopic","deleteForumTopic","unpinAllForumTopicMessages","editGeneralForumTopic","closeGeneralForumTopic","reopenGeneralForumTopic","hideGeneralForumTopic","unhideGeneralForumTopic","unpinAllGeneralForumTopicMessages","answerCallbackQuery","callbackQueryId","callback_query_id","show_alert","getUserChatBoosts","pollId","getBusinessConnection","businessConnectionId","business_connection_id","setMyCommands","commands","scope","deleteMyCommands","getMyCommands","setMyName","getMyName","setMyDescription","getMyDescription","setMyShortDescription","getMyShortDescription","setChatMenuButton","getChatMenuButton","setMyDefaultAdministratorRights","getMyDefaultAdministratorRights","editMessageText","editMessageCaption","editMessageMedia","regexAttach","test","_formatSendData6","_formatSendData7","editMessageReplyMarkup","stopPoll","sendSticker","sticker","getStickerSet","getCustomEmojiStickers","customEmojiIds","custom_emoji_ids","uploadStickerFile","stickerFormat","sticker_format","createNewStickerSet","pngSticker","emojis","mask_position","png_sticker","addStickerToSet","stickerType","Error","setStickerPositionInSet","position","deleteStickerFromSet","replaceStickerInSet","oldSticker","old_sticker","setStickerEmojiList","emojiList","emoji_list","setStickerKeywords","keywords","setStickerMaskPosition","setStickerSetTitle","setStickerSetThumbnail","setCustomEmojiStickerSetThumbnail","deleteStickerSet","answerInlineQuery","inlineQueryId","results","inline_query_id","answerWebAppQuery","webAppQueryId","web_app_query_id","sendInvoice","providerToken","currency","prices","provider_token","provider_data","suggested_tip_amounts","createInvoiceLink","answerShippingQuery","shippingQueryId","shipping_query_id","shipping_options","answerPreCheckoutQuery","preCheckoutQueryId","pre_checkout_query_id","sendGame","gameShortName","game_short_name","setGameScore","score","getGameHighScores","deleteMessage","deleteMessages","module","exports"],"sources":["/Users/boristrunov/Desktop/LevelCoin/project/node_modules/node-telegram-bot-api/lib/telegram.js"],"sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// shims\nrequire('array.prototype.findindex').shim(); // for Node.js v0.x\n\nvar errors = require('./errors');\nvar TelegramBotWebHook = require('./telegramWebHook');\nvar TelegramBotPolling = require('./telegramPolling');\nvar debug = require('debug')('node-telegram-bot-api');\nvar EventEmitter = require('eventemitter3');\nvar fileType = require('file-type');\nvar request = require('@cypress/request-promise');\nvar streamedRequest = require('@cypress/request');\nvar qs = require('querystring');\nvar stream = require('stream');\nvar mime = require('mime');\nvar path = require('path');\nvar URL = require('url');\nvar fs = require('fs');\nvar pump = require('pump');\nvar deprecate = require('./utils').deprecate;\n\nvar _messageTypes = ['text', 'animation', 'audio', 'channel_chat_created', 'contact', 'delete_chat_photo', 'dice', 'document', 'game', 'group_chat_created', 'invoice', 'left_chat_member', 'location', 'migrate_from_chat_id', 'migrate_to_chat_id', 'new_chat_members', 'new_chat_photo', 'new_chat_title', 'passport_data', 'photo', 'pinned_message', 'poll', 'sticker', 'successful_payment', 'supergroup_chat_created', 'video', 'video_note', 'voice', 'video_chat_started', 'video_chat_ended', 'video_chat_participants_invited', 'video_chat_scheduled', 'message_auto_delete_timer_changed', 'chat_invite_link', 'chat_member_updated', 'web_app_data', 'message_reaction'];\n\nvar _deprecatedMessageTypes = ['new_chat_participant', 'left_chat_participant'];\n\n/**\n * JSON-serialize data. If the provided data is already a String,\n * return it as is.\n * @private\n * @param  {*} data\n * @return {String}\n */\nfunction stringify(data) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  return JSON.stringify(data);\n}\n\nvar TelegramBot = function (_EventEmitter) {\n  _inherits(TelegramBot, _EventEmitter);\n\n  _createClass(TelegramBot, [{\n    key: 'on',\n\n\n    /**\n     * Add listener for the specified [event](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events).\n     * This is the usual `emitter.on()` method.\n     * @param  {String} event\n     * @param  {Function} listener\n     * @see {@link https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events|Available events}\n     * @see https://nodejs.org/api/events.html#events_emitter_on_eventname_listener\n     */\n    value: function on(event, listener) {\n      if (_deprecatedMessageTypes.indexOf(event) !== -1) {\n        var url = 'https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events';\n        deprecate('Events ' + _deprecatedMessageTypes.join(',') + ' are deprecated. See the updated list of events: ' + url);\n      }\n      _get(TelegramBot.prototype.__proto__ || Object.getPrototypeOf(TelegramBot.prototype), 'on', this).call(this, event, listener);\n    }\n\n    /**\n     * Both request method to obtain messages are implemented. To use standard polling, set `polling: true`\n     * on `options`. Notice that [webHook](https://core.telegram.org/bots/api#setwebhook) will need a SSL certificate.\n     * Emits `message` when a message arrives.\n     *\n     * @class TelegramBot\n     * @constructor\n     * @param {String} token Bot Token\n     * @param {Object} [options]\n     * @param {Boolean|Object} [options.polling=false] Set true to enable polling or set options.\n     *  If a WebHook has been set, it will be deleted automatically.\n     * @param {String|Number} [options.polling.timeout=10] *Deprecated. Use `options.polling.params` instead*.\n     *  Timeout in seconds for long polling.\n     * @param {Boolean} [options.testEnvironment=false] Set true to  work with test enviroment.\n     * When working with the test environment, you may use HTTP links without TLS to test your Web App.\n     * @param {String|Number} [options.polling.interval=300] Interval between requests in miliseconds\n     * @param {Boolean} [options.polling.autoStart=true] Start polling immediately\n     * @param {Object} [options.polling.params] Parameters to be used in polling API requests.\n     *  See https://core.telegram.org/bots/api#getupdates for more information.\n     * @param  {Number} [options.polling.params.timeout=10] Timeout in seconds for long polling.\n     * @param {Boolean|Object} [options.webHook=false] Set true to enable WebHook or set options\n     * @param {String} [options.webHook.host=\"0.0.0.0\"] Host to bind to\n     * @param {Number} [options.webHook.port=8443] Port to bind to\n     * @param {String} [options.webHook.key] Path to file with PEM private key for webHook server.\n     *  The file is read **synchronously**!\n     * @param {String} [options.webHook.cert] Path to file with PEM certificate (public) for webHook server.\n     *  The file is read **synchronously**!\n     * @param {String} [options.webHook.pfx] Path to file with PFX private key and certificate chain for webHook server.\n     *  The file is read **synchronously**!\n     * @param {Boolean} [options.webHook.autoOpen=true] Open webHook immediately\n     * @param {Object} [options.webHook.https] Options to be passed to `https.createServer()`.\n     *  Note that `options.webHook.key`, `options.webHook.cert` and `options.webHook.pfx`, if provided, will be\n     *  used to override `key`, `cert` and `pfx` in this object, respectively.\n     *  See https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener for more information.\n     * @param {String} [options.webHook.healthEndpoint=\"/healthz\"] An endpoint for health checks that always responds with 200 OK\n     * @param {Boolean} [options.onlyFirstMatch=false] Set to true to stop after first match. Otherwise, all regexps are executed\n     * @param {Object} [options.request] Options which will be added for all requests to telegram api.\n     *  See https://github.com/request/request#requestoptions-callback for more information.\n     * @param {String} [options.baseApiUrl=\"https://api.telegram.org\"] API Base URl; useful for proxying and testing\n     * @param {Boolean} [options.filepath=true] Allow passing file-paths as arguments when sending files,\n     *  such as photos using `TelegramBot#sendPhoto()`. See [usage information][usage-sending-files-performance]\n     *  for more information on this option and its consequences.\n     * @param {Boolean} [options.badRejection=false] Set to `true`\n     *  **if and only if** the Node.js version you're using terminates the\n     *  process on unhandled rejections. This option is only for\n     *  *forward-compatibility purposes*.\n     * @see https://core.telegram.org/bots/api\n     */\n\n  }], [{\n    key: 'errors',\n\n    /**\n     * The different errors the library uses.\n     * @type {Object}\n     */\n    get: function get() {\n      return errors;\n    }\n\n    /**\n     * The types of message updates the library handles.\n     * @type {String[]}\n     */\n\n  }, {\n    key: 'messageTypes',\n    get: function get() {\n      return _messageTypes;\n    }\n  }]);\n\n  function TelegramBot(token) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TelegramBot);\n\n    var _this = _possibleConstructorReturn(this, (TelegramBot.__proto__ || Object.getPrototypeOf(TelegramBot)).call(this));\n\n    _this.token = token;\n    _this.options = options;\n    _this.options.polling = typeof options.polling === 'undefined' ? false : options.polling;\n    _this.options.webHook = typeof options.webHook === 'undefined' ? false : options.webHook;\n    _this.options.baseApiUrl = options.baseApiUrl || 'https://api.telegram.org';\n    _this.options.filepath = typeof options.filepath === 'undefined' ? true : options.filepath;\n    _this.options.badRejection = typeof options.badRejection === 'undefined' ? false : options.badRejection;\n    _this._textRegexpCallbacks = [];\n    _this._replyListenerId = 0;\n    _this._replyListeners = [];\n    _this._polling = null;\n    _this._webHook = null;\n\n    if (options.polling) {\n      var autoStart = options.polling.autoStart;\n      if (typeof autoStart === 'undefined' || autoStart === true) {\n        _this.startPolling();\n      }\n    }\n\n    if (options.webHook) {\n      var autoOpen = options.webHook.autoOpen;\n      if (typeof autoOpen === 'undefined' || autoOpen === true) {\n        _this.openWebHook();\n      }\n    }\n    return _this;\n  }\n\n  /**\n   * Generates url with bot token and provided path/method you want to be got/executed by bot\n   * @param  {String} path\n   * @return {String} url\n   * @private\n   * @see https://core.telegram.org/bots/api#making-requests\n   */\n\n\n  _createClass(TelegramBot, [{\n    key: '_buildURL',\n    value: function _buildURL(_path) {\n      return this.options.baseApiUrl + '/bot' + this.token + (this.options.testEnvironment ? '/test' : '') + '/' + _path;\n    }\n\n    /**\n     * Fix 'reply_markup' parameter by making it JSON-serialized, as\n     * required by the Telegram Bot API\n     * @param {Object} obj Object; either 'form' or 'qs'\n     * @private\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n\n  }, {\n    key: '_fixReplyMarkup',\n    value: function _fixReplyMarkup(obj) {\n      var replyMarkup = obj.reply_markup;\n      if (replyMarkup && typeof replyMarkup !== 'string') {\n        obj.reply_markup = stringify(replyMarkup);\n      }\n    }\n\n    /**\n     * Fix 'entities' or 'caption_entities' or 'explanation_entities' parameter by making it JSON-serialized, as\n     * required by the Telegram Bot API\n     * @param {Object} obj Object;\n     * @private\n     * @see https://core.telegram.org/bots/api#sendmessage\n     * @see https://core.telegram.org/bots/api#copymessage\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n\n  }, {\n    key: '_fixEntitiesField',\n    value: function _fixEntitiesField(obj) {\n      var entities = obj.entities;\n      var captionEntities = obj.caption_entities;\n      var explanationEntities = obj.explanation_entities;\n      if (entities && typeof entities !== 'string') {\n        obj.entities = stringify(entities);\n      }\n\n      if (captionEntities && typeof captionEntities !== 'string') {\n        obj.caption_entities = stringify(captionEntities);\n      }\n\n      if (explanationEntities && typeof explanationEntities !== 'string') {\n        obj.explanation_entities = stringify(explanationEntities);\n      }\n    }\n  }, {\n    key: '_fixAddFileThumbnail',\n    value: function _fixAddFileThumbnail(options, opts) {\n      if (options.thumb) {\n        if (opts.formData === null) {\n          opts.formData = {};\n        }\n\n        var attachName = 'photo';\n\n        var _formatSendData2 = this._formatSendData(attachName, options.thumb.replace('attach://', '')),\n            _formatSendData3 = _slicedToArray(_formatSendData2, 1),\n            formData = _formatSendData3[0];\n\n        if (formData) {\n          opts.formData[attachName] = formData[attachName];\n          opts.qs.thumbnail = 'attach://' + attachName;\n        }\n      }\n    }\n\n    /**\n     * Fix 'reply_parameters' parameter by making it JSON-serialized, as\n     * required by the Telegram Bot API\n     * @param {Object} obj Object; either 'form' or 'qs'\n     * @private\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n\n  }, {\n    key: '_fixReplyParameters',\n    value: function _fixReplyParameters(obj) {\n      if (obj.hasOwnProperty('reply_parameters') && typeof obj.reply_parameters !== 'string') {\n        obj.reply_parameters = stringify(obj.reply_parameters);\n      }\n    }\n\n    /**\n     * Make request against the API\n     * @param  {String} _path API endpoint\n     * @param  {Object} [options]\n     * @private\n     * @return {Promise}\n     */\n\n  }, {\n    key: '_request',\n    value: function _request(_path) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!this.token) {\n        return Promise.reject(new errors.FatalError('Telegram Bot Token not provided!'));\n      }\n\n      if (this.options.request) {\n        Object.assign(options, this.options.request);\n      }\n\n      if (options.form) {\n        this._fixReplyMarkup(options.form);\n        this._fixEntitiesField(options.form);\n        this._fixReplyParameters(options.form);\n      }\n      if (options.qs) {\n        this._fixReplyMarkup(options.qs);\n        this._fixReplyParameters(options.qs);\n      }\n\n      options.method = 'POST';\n      options.url = this._buildURL(_path);\n      options.simple = false;\n      options.resolveWithFullResponse = true;\n      options.forever = true;\n      debug('HTTP request: %j', options);\n      return request(options).then(function (resp) {\n        var data = void 0;\n        try {\n          data = resp.body = JSON.parse(resp.body);\n        } catch (err) {\n          throw new errors.ParseError('Error parsing response: ' + resp.body, resp);\n        }\n\n        if (data.ok) {\n          return data.result;\n        }\n\n        throw new errors.TelegramError(data.error_code + ' ' + data.description, resp);\n      }).catch(function (error) {\n        // TODO: why can't we do `error instanceof errors.BaseError`?\n        if (error.response) throw error;\n        throw new errors.FatalError(error);\n      });\n    }\n\n    /**\n     * Format data to be uploaded; handles file paths, streams and buffers\n     * @param  {String} type\n     * @param  {String|stream.Stream|Buffer} data\n     * @param  {Object} fileOptions File options\n     * @param  {String} [fileOptions.filename] File name\n     * @param  {String} [fileOptions.contentType] Content type (i.e. MIME)\n     * @return {Array} formatted\n     * @return {Object} formatted[0] formData\n     * @return {String} formatted[1] fileId\n     * @throws Error if Buffer file type is not supported.\n     * @see https://npmjs.com/package/file-type\n     * @private\n     */\n\n  }, {\n    key: '_formatSendData',\n    value: function _formatSendData(type, data) {\n      var fileOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var deprecationMessage = 'See https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files' + ' for more information on how sending files has been improved and' + ' on how to disable this deprecation message altogether.';\n      var filedata = data;\n      var filename = fileOptions.filename;\n      var contentType = fileOptions.contentType;\n\n      if (data instanceof stream.Stream) {\n        if (!filename && data.path) {\n          // Will be 'null' if could not be parsed.\n          // For example, 'data.path' === '/?id=123' from 'request(\"https://example.com/?id=123\")'\n          var url = URL.parse(path.basename(data.path.toString()));\n          if (url.pathname) {\n            filename = qs.unescape(url.pathname);\n          }\n        }\n      } else if (Buffer.isBuffer(data)) {\n        if (!filename && !process.env.NTBA_FIX_350) {\n          deprecate('Buffers will have their filenames default to \"filename\" instead of \"data\". ' + deprecationMessage);\n          filename = 'data';\n        }\n        if (!contentType) {\n          var filetype = fileType(data);\n          if (filetype) {\n            contentType = filetype.mime;\n            var ext = filetype.ext;\n            if (ext && !process.env.NTBA_FIX_350) {\n              filename = filename + '.' + ext;\n            }\n          } else if (!process.env.NTBA_FIX_350) {\n            deprecate('An error will no longer be thrown if file-type of buffer could not be detected. ' + deprecationMessage);\n            throw new errors.FatalError('Unsupported Buffer file-type');\n          }\n        }\n      } else if (data) {\n        if (this.options.filepath && fs.existsSync(data)) {\n          filedata = fs.createReadStream(data);\n          if (!filename) {\n            filename = path.basename(data);\n          }\n        } else {\n          return [null, data];\n        }\n      } else {\n        return [null, data];\n      }\n\n      filename = filename || 'filename';\n      contentType = contentType || mime.lookup(filename);\n      if (process.env.NTBA_FIX_350) {\n        contentType = contentType || 'application/octet-stream';\n      } else {\n        deprecate('In the future, content-type of files you send will default to \"application/octet-stream\". ' + deprecationMessage);\n      }\n\n      // TODO: Add missing file extension.\n\n      return [_defineProperty({}, type, {\n        value: filedata,\n        options: {\n          filename: filename,\n          contentType: contentType\n        }\n      }), null];\n    }\n\n    /**\n     * Start polling.\n     * Rejects returned promise if a WebHook is being used by this instance.\n     * @param  {Object} [options]\n     * @param  {Boolean} [options.restart=true] Consecutive calls to this method causes polling to be restarted\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'startPolling',\n    value: function startPolling() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this.hasOpenWebHook()) {\n        return Promise.reject(new errors.FatalError('Polling and WebHook are mutually exclusive'));\n      }\n      options.restart = typeof options.restart === 'undefined' ? true : options.restart;\n      if (!this._polling) {\n        this._polling = new TelegramBotPolling(this);\n      }\n      return this._polling.start(options);\n    }\n\n    /**\n     * Alias of `TelegramBot#startPolling()`. This is **deprecated**.\n     * @param  {Object} [options]\n     * @return {Promise}\n     * @deprecated\n     */\n\n  }, {\n    key: 'initPolling',\n    value: function initPolling() {\n      deprecate('TelegramBot#initPolling() is deprecated. Use TelegramBot#startPolling() instead.');\n      return this.startPolling();\n    }\n\n    /**\n     * Stops polling after the last polling request resolves.\n     * Multiple invocations do nothing if polling is already stopped.\n     * Returning the promise of the last polling request is **deprecated**.\n     * @param  {Object} [options] Options\n     * @param  {Boolean} [options.cancel] Cancel current request\n     * @param  {String} [options.reason] Reason for stopping polling\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'stopPolling',\n    value: function stopPolling(options) {\n      if (!this._polling) {\n        return Promise.resolve();\n      }\n      return this._polling.stop(options);\n    }\n\n    /**\n     * Get link for file.\n     * Use this method to get link for file for subsequent use.\n     * Attention: link will be valid for 1 hour.\n     *\n     * This method is a sugar extension of the (getFile)[#getfilefileid] method,\n     * which returns just path to file on remote server (you will have to manually build full uri after that).\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Promise which will have  *fileURI* in resolve callback\n     * @see https://core.telegram.org/bots/api#getfile\n     */\n\n  }, {\n    key: 'getFileLink',\n    value: function getFileLink(fileId) {\n      var _this2 = this;\n\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return this.getFile(fileId, form).then(function (resp) {\n        return _this2.options.baseApiUrl + '/file/bot' + _this2.token + '/' + resp.file_path;\n      });\n    }\n\n    /**\n     * Return a readable stream for file.\n     *\n     * `fileStream.path` is the specified file ID i.e. `fileId`.\n     * `fileStream` emits event `info` passing a single argument i.e.\n     * `info` with the interface `{ uri }` where `uri` is the URI of the\n     * file on Telegram servers.\n     *\n     * This method is a sugar extension of the [getFileLink](#TelegramBot+getFileLink) method,\n     * which returns the full URI to the file on remote server.\n     *\n     * @param  {String} fileId File identifier to get info about\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {stream.Readable} fileStream\n     */\n\n  }, {\n    key: 'getFileStream',\n    value: function getFileStream(fileId) {\n      var _this3 = this;\n\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var fileStream = new stream.PassThrough();\n      fileStream.path = fileId;\n      this.getFileLink(fileId, form).then(function (fileURI) {\n        fileStream.emit('info', {\n          uri: fileURI\n        });\n        pump(streamedRequest(Object.assign({ uri: fileURI }, _this3.options.request)), fileStream);\n      }).catch(function (error) {\n        fileStream.emit('error', error);\n      });\n      return fileStream;\n    }\n\n    /**\n     * Downloads file in the specified folder.\n     *\n     * This method is a sugar extension of the [getFileStream](#TelegramBot+getFileStream) method,\n     * which returns a readable file stream.\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @param  {String} downloadDir Absolute path to the folder in which file will be saved\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Promise, which will have *filePath* of downloaded file in resolve callback\n     */\n\n  }, {\n    key: 'downloadFile',\n    value: function downloadFile(fileId, downloadDir) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var resolve = void 0;\n      var reject = void 0;\n      var promise = new Promise(function (a, b) {\n        resolve = a;\n        reject = b;\n      });\n      var fileStream = this.getFileStream(fileId, form);\n      fileStream.on('info', function (info) {\n        var fileName = info.uri.slice(info.uri.lastIndexOf('/') + 1);\n        // TODO: Ensure fileName doesn't contains slashes\n        var filePath = path.join(downloadDir, fileName);\n        pump(fileStream, fs.createWriteStream(filePath), function (error) {\n          if (error) {\n            return reject(error);\n          }\n          return resolve(filePath);\n        });\n      });\n      fileStream.on('error', function (err) {\n        reject(err);\n      });\n      return promise;\n    }\n\n    /**\n     * Register a RegExp to test against an incomming text message.\n     * @param  {RegExp}   regexpRexecuted with `exec`.\n     * @param  {Function} callback     Callback will be called with 2 parameters,\n     * the `msg` and the result of executing `regexp.exec` on message text.\n     */\n\n  }, {\n    key: 'onText',\n    value: function onText(regexp, callback) {\n      this._textRegexpCallbacks.push({ regexp: regexp, callback: callback });\n    }\n\n    /**\n     * Remove a listener registered with `onText()`.\n     * @param  {RegExp} regexp RegExp used previously in `onText()`\n     * @return {Object} deletedListener The removed reply listener if\n     *   found. This object has `regexp` and `callback`\n     *   properties. If not found, returns `null`.\n     */\n\n  }, {\n    key: 'removeTextListener',\n    value: function removeTextListener(regexp) {\n      var index = this._textRegexpCallbacks.findIndex(function (textListener) {\n        return String(textListener.regexp) === String(regexp);\n      });\n      if (index === -1) {\n        return null;\n      }\n      return this._textRegexpCallbacks.splice(index, 1)[0];\n    }\n\n    /**\n     * Remove all listeners registered with `onText()`.\n     */\n\n  }, {\n    key: 'clearTextListeners',\n    value: function clearTextListeners() {\n      this._textRegexpCallbacks = [];\n    }\n\n    /**\n     * Register a reply to wait for a message response.\n     *\n     * @param  {Number|String} chatId The chat id where the message cames from.\n     * @param  {Number|String} messageId The message id to be replied.\n     * @param  {Function} callback Callback will be called with the reply\n     *  message.\n     * @return {Number} id The ID of the inserted reply listener.\n     */\n\n  }, {\n    key: 'onReplyToMessage',\n    value: function onReplyToMessage(chatId, messageId, callback) {\n      var id = ++this._replyListenerId;\n      this._replyListeners.push({\n        id: id,\n        chatId: chatId,\n        messageId: messageId,\n        callback: callback\n      });\n      return id;\n    }\n\n    /**\n     * Removes a reply that has been prev. registered for a message response.\n     * @param   {Number} replyListenerId The ID of the reply listener.\n     * @return  {Object} deletedListener The removed reply listener if\n     *   found. This object has `id`, `chatId`, `messageId` and `callback`\n     *   properties. If not found, returns `null`.\n     */\n\n  }, {\n    key: 'removeReplyListener',\n    value: function removeReplyListener(replyListenerId) {\n      var index = this._replyListeners.findIndex(function (replyListener) {\n        return replyListener.id === replyListenerId;\n      });\n      if (index === -1) {\n        return null;\n      }\n      return this._replyListeners.splice(index, 1)[0];\n    }\n\n    /**\n     * Removes all replies that have been prev. registered for a message response.\n     *\n     * @return  {Array} deletedListeners An array of removed listeners.\n     */\n\n  }, {\n    key: 'clearReplyListeners',\n    value: function clearReplyListeners() {\n      this._replyListeners = [];\n    }\n\n    /**\n     * Return true if polling. Otherwise, false.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isPolling',\n    value: function isPolling() {\n      return this._polling ? this._polling.isPolling() : false;\n    }\n\n    /**\n     * Open webhook.\n     * Multiple invocations do nothing if webhook is already open.\n     * Rejects returned promise if Polling is being used by this instance.\n     *\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'openWebHook',\n    value: function openWebHook() {\n      if (this.isPolling()) {\n        return Promise.reject(new errors.FatalError('WebHook and Polling are mutually exclusive'));\n      }\n      if (!this._webHook) {\n        this._webHook = new TelegramBotWebHook(this);\n      }\n      return this._webHook.open();\n    }\n\n    /**\n     * Close webhook after closing all current connections.\n     * Multiple invocations do nothing if webhook is already closed.\n     *\n     * @return {Promise} Promise\n     */\n\n  }, {\n    key: 'closeWebHook',\n    value: function closeWebHook() {\n      if (!this._webHook) {\n        return Promise.resolve();\n      }\n      return this._webHook.close();\n    }\n\n    /**\n     * Return true if using webhook and it is open i.e. accepts connections.\n     * Otherwise, false.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'hasOpenWebHook',\n    value: function hasOpenWebHook() {\n      return this._webHook ? this._webHook.isOpen() : false;\n    }\n\n    /**\n     * Process an update; emitting the proper events and executing regexp\n     * callbacks. This method is useful should you be using a different\n     * way to fetch updates, other than those provided by TelegramBot.\n     *\n     * @param  {Object} update\n     * @see https://core.telegram.org/bots/api#update\n     */\n\n  }, {\n    key: 'processUpdate',\n    value: function processUpdate(update) {\n      var _this4 = this;\n\n      debug('Process Update %j', update);\n      var message = update.message;\n      var editedMessage = update.edited_message;\n      var channelPost = update.channel_post;\n      var editedChannelPost = update.edited_channel_post;\n      var businessConnection = update.business_connection;\n      var businesssMessage = update.business_message;\n      var editedBusinessMessage = update.edited_business_message;\n      var deletedBusinessMessage = update.deleted_business_messages;\n      var messageReaction = update.message_reaction;\n      var messageReactionCount = update.message_reaction_count;\n      var inlineQuery = update.inline_query;\n      var chosenInlineResult = update.chosen_inline_result;\n      var callbackQuery = update.callback_query;\n      var shippingQuery = update.shipping_query;\n      var preCheckoutQuery = update.pre_checkout_query;\n      var poll = update.poll;\n      var pollAnswer = update.poll_answer;\n      var myChatMember = update.my_chat_member;\n      var chatMember = update.chat_member;\n      var chatJoinRequest = update.chat_join_request;\n      var chatBoost = update.chat_boost;\n      var removedChatBoost = update.removed_chat_boost;\n\n      if (message) {\n        debug('Process Update message %j', message);\n        var metadata = {};\n        metadata.type = TelegramBot.messageTypes.find(function (messageType) {\n          return message[messageType];\n        });\n        this.emit('message', message, metadata);\n        if (metadata.type) {\n          debug('Emitting %s: %j', metadata.type, message);\n          this.emit(metadata.type, message, metadata);\n        }\n        if (message.text) {\n          debug('Text message');\n          this._textRegexpCallbacks.some(function (reg) {\n            debug('Matching %s with %s', message.text, reg.regexp);\n\n            if (!(reg.regexp instanceof RegExp)) {\n              reg.regexp = new RegExp(reg.regexp);\n            }\n\n            var result = reg.regexp.exec(message.text);\n            if (!result) {\n              return false;\n            }\n            // reset index so we start at the beginning of the regex each time\n            reg.regexp.lastIndex = 0;\n            debug('Matches %s', reg.regexp);\n            reg.callback(message, result);\n            // returning truthy value exits .some\n            return _this4.options.onlyFirstMatch;\n          });\n        }\n        if (message.reply_to_message) {\n          // Only callbacks waiting for this message\n          this._replyListeners.forEach(function (reply) {\n            // Message from the same chat\n            if (reply.chatId === message.chat.id) {\n              // Responding to that message\n              if (reply.messageId === message.reply_to_message.message_id) {\n                // Resolve the promise\n                reply.callback(message);\n              }\n            }\n          });\n        }\n      } else if (editedMessage) {\n        debug('Process Update edited_message %j', editedMessage);\n        this.emit('edited_message', editedMessage);\n        if (editedMessage.text) {\n          this.emit('edited_message_text', editedMessage);\n        }\n        if (editedMessage.caption) {\n          this.emit('edited_message_caption', editedMessage);\n        }\n      } else if (channelPost) {\n        debug('Process Update channel_post %j', channelPost);\n        this.emit('channel_post', channelPost);\n      } else if (editedChannelPost) {\n        debug('Process Update edited_channel_post %j', editedChannelPost);\n        this.emit('edited_channel_post', editedChannelPost);\n        if (editedChannelPost.text) {\n          this.emit('edited_channel_post_text', editedChannelPost);\n        }\n        if (editedChannelPost.caption) {\n          this.emit('edited_channel_post_caption', editedChannelPost);\n        }\n      } else if (businessConnection) {\n        debug('Process Update business_connection %j', businessConnection);\n        this.emit('business_connection', businessConnection);\n      } else if (businesssMessage) {\n        debug('Process Update business_message %j', businesssMessage);\n        this.emit('business_message', businesssMessage);\n      } else if (editedBusinessMessage) {\n        debug('Process Update edited_business_message %j', editedBusinessMessage);\n        this.emit('edited_business_message', editedBusinessMessage);\n      } else if (deletedBusinessMessage) {\n        debug('Process Update deleted_business_messages %j', deletedBusinessMessage);\n        this.emit('deleted_business_messages', deletedBusinessMessage);\n      } else if (messageReaction) {\n        debug('Process Update message_reaction %j', messageReaction);\n        this.emit('message_reaction', messageReaction);\n      } else if (messageReactionCount) {\n        debug('Process Update message_reaction_count %j', messageReactionCount);\n        this.emit('message_reaction_count', messageReactionCount);\n      } else if (inlineQuery) {\n        debug('Process Update inline_query %j', inlineQuery);\n        this.emit('inline_query', inlineQuery);\n      } else if (chosenInlineResult) {\n        debug('Process Update chosen_inline_result %j', chosenInlineResult);\n        this.emit('chosen_inline_result', chosenInlineResult);\n      } else if (callbackQuery) {\n        debug('Process Update callback_query %j', callbackQuery);\n        this.emit('callback_query', callbackQuery);\n      } else if (shippingQuery) {\n        debug('Process Update shipping_query %j', shippingQuery);\n        this.emit('shipping_query', shippingQuery);\n      } else if (preCheckoutQuery) {\n        debug('Process Update pre_checkout_query %j', preCheckoutQuery);\n        this.emit('pre_checkout_query', preCheckoutQuery);\n      } else if (poll) {\n        debug('Process Update poll %j', poll);\n        this.emit('poll', poll);\n      } else if (pollAnswer) {\n        debug('Process Update poll_answer %j', pollAnswer);\n        this.emit('poll_answer', pollAnswer);\n      } else if (chatMember) {\n        debug('Process Update chat_member %j', chatMember);\n        this.emit('chat_member', chatMember);\n      } else if (myChatMember) {\n        debug('Process Update my_chat_member %j', myChatMember);\n        this.emit('my_chat_member', myChatMember);\n      } else if (chatJoinRequest) {\n        debug('Process Update my_chat_member %j', chatJoinRequest);\n        this.emit('chat_join_request', chatJoinRequest);\n      } else if (chatBoost) {\n        debug('Process Update chat_boost %j', chatBoost);\n        this.emit('chat_boost', chatBoost);\n      } else if (removedChatBoost) {\n        debug('Process Update removed_chat_boost %j', removedChatBoost);\n        this.emit('removed_chat_boost', removedChatBoost);\n      }\n    }\n\n    /** Start Telegram Bot API methods */\n\n    /**\n    * Use this method to receive incoming updates using long polling.\n    * This method has an [older, compatible signature][getUpdates-v0.25.0]\n    * that is being deprecated.\n    *\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise}\n    * @see https://core.telegram.org/bots/api#getupdates\n    */\n\n  }, {\n    key: 'getUpdates',\n    value: function getUpdates() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /* The older method signature was getUpdates(timeout, limit, offset).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature getUpdates(timeout, limit, offset) has been deprecated since v0.25.0');\n        form = {\n          timeout: arguments[0],\n          limit: arguments[1],\n          offset: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n\n      return this._request('getUpdates', { form: form });\n    }\n\n    /**\n     * Specify an url to receive incoming updates via an outgoing webHook.\n     * This method has an [older, compatible signature][setWebHook-v0.25.0]\n     * that is being deprecated.\n     *\n     * @param  {String} url URL where Telegram will make HTTP Post. Leave empty to\n     * delete webHook.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {String|stream.Stream} [options.certificate] PEM certificate key (public).\n     * @param  {String} [options.secret_token] Optional secret token to be sent in a header `X-Telegram-Bot-Api-Secret-Token` in every webhook request.\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#setwebhook\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'setWebHook',\n    value: function setWebHook(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var fileOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      /* The older method signature was setWebHook(url, cert).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      var cert = void 0;\n      // Note: 'options' could be an object, if a stream was provided (in place of 'cert')\n      if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object' || options instanceof stream.Stream) {\n        deprecate('The method signature setWebHook(url, cert) has been deprecated since v0.25.0');\n        cert = options;\n        options = {}; // eslint-disable-line no-param-reassign\n      } else {\n        cert = options.certificate;\n      }\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.url = url;\n\n      if (cert) {\n        try {\n          var sendData = this._formatSendData('certificate', cert, fileOptions);\n          opts.formData = sendData[0];\n          opts.qs.certificate = sendData[1];\n        } catch (ex) {\n          return Promise.reject(ex);\n        }\n      }\n\n      return this._request('setWebHook', opts);\n    }\n\n    /**\n     * Use this method to remove webhook integration if you decide to\n     * switch back to getUpdates. Returns True on success.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#deletewebhook\n     */\n\n  }, {\n    key: 'deleteWebHook',\n    value: function deleteWebHook() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('deleteWebhook', { form: form });\n    }\n\n    /**\n     * Use this method to get current webhook status.\n     * On success, returns a [WebhookInfo](https://core.telegram.org/bots/api#webhookinfo) object.\n     * If the bot is using getUpdates, will return an object with the\n     * url field empty.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getwebhookinfo\n     */\n\n  }, {\n    key: 'getWebHookInfo',\n    value: function getWebHookInfo() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getWebhookInfo', { form: form });\n    }\n\n    /**\n     * A simple method for testing your bot's authentication token. Requires no parameters.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} basic information about the bot in form of a [User](https://core.telegram.org/bots/api#user) object.\n     * @see https://core.telegram.org/bots/api#getme\n     */\n\n  }, {\n    key: 'getMe',\n    value: function getMe() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMe', { form: form });\n    }\n\n    /**\n     * This method log out your bot from the cloud Bot API server before launching the bot locally.\n     * You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates.\n     * After a successful call, you will not be able to log in again using the same token for 10 minutes.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#logout\n     */\n\n  }, {\n    key: 'logOut',\n    value: function logOut() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('logOut', { form: form });\n    }\n\n    /**\n     * This method close the bot instance before moving it from one local server to another.\n     * This method will return error 429 in the first 10 minutes after the bot is launched.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#close\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('close', { form: form });\n    }\n\n    /**\n     * Send text message.\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} text Text of the message to be sent\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n\n  }, {\n    key: 'sendMessage',\n    value: function sendMessage(chatId, text) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.text = text;\n      return this._request('sendMessage', { form: form });\n    }\n\n    /**\n     * Forward messages of any kind.\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * or username of the target channel (in the format `@channelusername`)\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent (or channel username in the format `@channelusername`)\n     * @param  {Number|String} messageId  Unique message identifier in the chat specified in fromChatId\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#forwardmessage\n     */\n\n  }, {\n    key: 'forwardMessage',\n    value: function forwardMessage(chatId, fromChatId, messageId) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_id = messageId;\n      return this._request('forwardMessage', { form: form });\n    }\n\n    /**\n     * Use this method to forward multiple messages of any kind.\n     * If some of the specified messages can't be found or forwarded, they are skipped.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * or username of the target channel (in the format `@channelusername`)\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent (or channel username in the format `@channelusername`)\n     * @param  {Array<Number|String>} messageIds Identifiers of 1-100 messages in the chat from_chat_id to forward.\n     * The identifiers must be specified in a strictly increasing order.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} An array of MessageId of the sent messages on success\n     * @see https://core.telegram.org/bots/api#forwardmessages\n     */\n\n  }, {\n    key: 'forwardMessages',\n    value: function forwardMessages(chatId, fromChatId, messageIds) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_ids = messageIds;\n      return this._request('forwardMessages', { form: form });\n    }\n\n    /**\n     * Copy messages of any kind. **Service messages and invoice messages can't be copied.**\n     * The method is analogous to the method forwardMessages, but the copied message doesn't\n     * have a link to the original message.\n     * Returns the MessageId of the sent message on success.\n     * @param  {Number|String} chatId     Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent\n     * @param  {Number|String} messageId  Unique message identifier\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} The [MessageId](https://core.telegram.org/bots/api#messageid) of the sent message on success\n     * @see https://core.telegram.org/bots/api#copymessage\n     */\n\n  }, {\n    key: 'copyMessage',\n    value: function copyMessage(chatId, fromChatId, messageId) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_id = messageId;\n      return this._request('copyMessage', { form: form });\n    }\n\n    /**\n     * Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped.\n     * Service messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied.\n     * Returns the MessageId of the sent message on success.\n     * @param  {Number|String} chatId Unique identifier for the target chat\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent\n     * @param  {Array} messageIds  Identifiers of 1-100 messages in the chat from_chat_id to copy.\n     * The identifiers must be specified in a strictly increasing order.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} An array of MessageId of the sent messages\n     * @see https://core.telegram.org/bots/api#copymessages\n     */\n\n  }, {\n    key: 'copyMessages',\n    value: function copyMessages(chatId, fromChatId, messageIds) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_ids = stringify(messageIds);\n      return this._request('copyMessages', { form: form });\n    }\n\n    /**\n     * Send photo\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} photo A file path or a Stream. Can\n     * also be a `file_id` previously uploaded\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendphoto\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendPhoto',\n    value: function sendPhoto(chatId, photo) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('photo', photo, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.photo = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendPhoto', opts);\n    }\n\n    /**\n    * Send audio\n    *\n    * **Your audio must be in the .MP3 or .M4A format.**\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {String|stream.Stream|Buffer} audio A file path, Stream or Buffer.\n    * Can also be a `file_id` previously uploaded.\n    * @param  {Object} [options] Additional Telegram query options\n    * @param  {Object} [fileOptions] Optional file related meta-data\n    * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n    * @see https://core.telegram.org/bots/api#sendaudio\n    * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n    */\n\n  }, {\n    key: 'sendAudio',\n    value: function sendAudio(chatId, audio) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n\n      opts.qs.chat_id = chatId;\n\n      try {\n        var sendData = this._formatSendData('audio', audio, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.audio = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n\n      return this._request('sendAudio', opts);\n    }\n\n    /**\n    * Send Document\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {String|stream.Stream|Buffer} doc A file path, Stream or Buffer.\n    * Can also be a `file_id` previously uploaded.\n    * @param  {Object} [options] Additional Telegram query options\n    * @param  {Object} [fileOptions] Optional file related meta-data\n    * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n    * @see https://core.telegram.org/bots/api#sendDocument\n    * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n    */\n\n  }, {\n    key: 'sendDocument',\n    value: function sendDocument(chatId, doc) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('document', doc, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.document = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n\n      return this._request('sendDocument', opts);\n    }\n\n    /**\n     * Use this method to send video files, **Telegram clients support mp4 videos** (other formats may be sent as Document).\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} video A file path or Stream.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendvideo\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendVideo',\n    value: function sendVideo(chatId, video) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('video', video, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.video = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVideo', opts);\n    }\n\n    /**\n     * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound).\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} animation A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendanimation\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendAnimation',\n    value: function sendAnimation(chatId, animation) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('animation', animation, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.animation = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendAnimation', opts);\n    }\n\n    /**\n     * Send voice\n     *\n     * **Your audio must be in an .OGG file encoded with OPUS**, or in .MP3 format, or in .M4A format (other formats may be sent as Audio or Document)\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} voice A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendvoice\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendVoice',\n    value: function sendVoice(chatId, voice) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('voice', voice, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.voice = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVoice', opts);\n    }\n\n    /**\n     * Use this method to send video messages\n     * Telegram clients support **rounded square MPEG4 videos** of up to 1 minute long.\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} videoNote A file path or Stream.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @info The length parameter is actually optional. However, the API (at time of writing) requires you to always provide it until it is fixed.\n     * @see https://core.telegram.org/bots/api#sendvideonote\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n    */\n\n  }, {\n    key: 'sendVideoNote',\n    value: function sendVideoNote(chatId, videoNote) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('video_note', videoNote, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.video_note = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVideoNote', opts);\n    }\n\n    /**\n     * Use this method to send a group of photos or videos as an album.\n     *\n     * **Documents and audio files can be only grouped in an album with messages of the same type**\n     *\n     * If you wish to [specify file options](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files),\n     * add a `fileOptions` property to the target input in `media`.\n     *\n     * @param  {String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Array} media A JSON-serialized array describing photos and videos to be sent, must include 2–10 items\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, an array of the sent [Messages](https://core.telegram.org/bots/api#message)\n     * is returned.\n     * @see https://core.telegram.org/bots/api#sendmediagroup\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendMediaGroup',\n    value: function sendMediaGroup(chatId, media) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n\n      opts.formData = {};\n      var inputMedia = [];\n      var index = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = media[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var input = _step.value;\n\n          var payload = Object.assign({}, input);\n          delete payload.media;\n          delete payload.fileOptions;\n          try {\n            var attachName = String(index);\n\n            var _formatSendData4 = this._formatSendData(attachName, input.media, input.fileOptions),\n                _formatSendData5 = _slicedToArray(_formatSendData4, 2),\n                formData = _formatSendData5[0],\n                fileId = _formatSendData5[1];\n\n            if (formData) {\n              opts.formData[attachName] = formData[attachName];\n              payload.media = 'attach://' + attachName;\n            } else {\n              payload.media = fileId;\n            }\n          } catch (ex) {\n            return Promise.reject(ex);\n          }\n          inputMedia.push(payload);\n          index++;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      opts.qs.media = stringify(inputMedia);\n\n      return this._request('sendMediaGroup', opts);\n    }\n\n    /**\n     * Send location.\n     * Use this method to send point on the map.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendlocation\n     */\n\n  }, {\n    key: 'sendLocation',\n    value: function sendLocation(chatId, latitude, longitude) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.latitude = latitude;\n      form.longitude = longitude;\n      return this._request('sendLocation', { form: form });\n    }\n\n    /**\n     * Use this method to edit live location messages sent by\n     * the bot or via the bot (for inline bots).\n     *\n     *  A location **can be edited until its live_period expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api#stopmessagelivelocation)**\n     *\n     * Note that you must provide one of chat_id, message_id, or\n     * inline_message_id in your request.\n     *\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n     * @see https://core.telegram.org/bots/api#editmessagelivelocation\n     */\n\n  }, {\n    key: 'editMessageLiveLocation',\n    value: function editMessageLiveLocation(latitude, longitude) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.latitude = latitude;\n      form.longitude = longitude;\n      return this._request('editMessageLiveLocation', { form: form });\n    }\n\n    /**\n     * Use this method to stop updating a live location message sent by\n     * the bot or via the bot (for inline bots) before live_period expires.\n     *\n     * Note that you must provide one of chat_id, message_id, or\n     * inline_message_id in your request.\n     *\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n     * @see https://core.telegram.org/bots/api#stopmessagelivelocation\n     */\n\n  }, {\n    key: 'stopMessageLiveLocation',\n    value: function stopMessageLiveLocation() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('stopMessageLiveLocation', { form: form });\n    }\n\n    /**\n     * Send venue.\n     * Use this method to send information about a venue.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {String} title Name of the venue\n     * @param  {String} address Address of the venue\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned.\n     * @see https://core.telegram.org/bots/api#sendvenue\n     */\n\n  }, {\n    key: 'sendVenue',\n    value: function sendVenue(chatId, latitude, longitude, title, address) {\n      var form = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n      form.chat_id = chatId;\n      form.latitude = latitude;\n      form.longitude = longitude;\n      form.title = title;\n      form.address = address;\n      return this._request('sendVenue', { form: form });\n    }\n\n    /**\n     * Send contact.\n     * Use this method to send phone contacts.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} phoneNumber Contact's phone number\n     * @param  {String} firstName Contact's first name\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendcontact\n     */\n\n  }, {\n    key: 'sendContact',\n    value: function sendContact(chatId, phoneNumber, firstName) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.phone_number = phoneNumber;\n      form.first_name = firstName;\n      return this._request('sendContact', { form: form });\n    }\n\n    /**\n     * Send poll.\n     * Use this method to send a native poll.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the group/channel\n     * @param  {String} question Poll question, 1-300 characters\n     * @param  {Array} pollOptions Poll options, between 2-10 options (only 1-100 characters each)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n\n  }, {\n    key: 'sendPoll',\n    value: function sendPoll(chatId, question, pollOptions) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.question = question;\n      form.options = stringify(pollOptions);\n      return this._request('sendPoll', { form: form });\n    }\n\n    /**\n     * Send Dice\n     * Use this method to send an animated emoji that will display a random value.\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#senddice\n     */\n\n  }, {\n    key: 'sendDice',\n    value: function sendDice(chatId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('dice');\n        opts.formData = sendData[0];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendDice', opts);\n    }\n\n    /**\n     * Send chat action.\n     *\n     * Use this method when you need to tell the user that something is happening on the bot's side.\n     * **The status is set for 5 seconds or less** (when a message arrives from your bot, Telegram clients clear its typing status).\n     *\n     *  Action `typing` for [text messages](https://core.telegram.org/bots/api#sendmessage),\n     * `upload_photo` for [photos](https://core.telegram.org/bots/api#sendphoto), `record_video` or `upload_video` for [videos](https://core.telegram.org/bots/api#sendvideo),\n     * `record_voice` or `upload_voice` for [voice notes](https://core.telegram.org/bots/api#sendvoice), `upload_document` for [general files](https://core.telegram.org/bots/api#senddocument),\n     * `choose_sticker` for [stickers](https://core.telegram.org/bots/api#sendsticker), `find_location` for [location data](https://core.telegram.org/bots/api#sendlocation),\n     * `record_video_note` or `upload_video_note` for [video notes](https://core.telegram.org/bots/api#sendvideonote).\n     *\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} action Type of action to broadcast.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#sendchataction\n     */\n\n  }, {\n    key: 'sendChatAction',\n    value: function sendChatAction(chatId, action) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.action = action;\n      return this._request('sendChatAction', { form: form });\n    }\n\n    /**\n     * Use this method to change the chosen reactions on a message.\n     * - Service messages can't be reacted to.\n     * - Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel.\n     * - In albums, bots must react to the first message.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param  {Number} messageId  Unique identifier of the target message\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise<Boolean>} True on success\n     * @see https://core.telegram.org/bots/api#setmessagereaction\n     */\n\n  }, {\n    key: 'setMessageReaction',\n    value: function setMessageReaction(chatId, messageId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_id = messageId;\n      if (form.reaction) {\n        form.reaction = stringify(form.reaction);\n      }\n      return this._request('setMessageReaction', { form: form });\n    }\n\n    /**\n     * Use this method to get a list of profile pictures for a user.\n     * Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.\n     * This method has an [older, compatible signature][getUserProfilePhotos-v0.25.0]\n     * that is being deprecated.\n     *\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object\n     * @see https://core.telegram.org/bots/api#getuserprofilephotos\n     */\n\n  }, {\n    key: 'getUserProfilePhotos',\n    value: function getUserProfilePhotos(userId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      /* The older method signature was getUserProfilePhotos(userId, offset, limit).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature getUserProfilePhotos(userId, offset, limit) has been deprecated since v0.25.0');\n        form = {\n          offset: arguments[1],\n          limit: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n      form.user_id = userId;\n      return this._request('getUserProfilePhotos', { form: form });\n    }\n\n    /**\n     * Get file.\n     * Use this method to get basic info about a file and prepare it for downloading.\n     *\n     * Attention: **link will be valid for 1 hour.**\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n     * @see https://core.telegram.org/bots/api#getfile\n     */\n\n  }, {\n    key: 'getFile',\n    value: function getFile(fileId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.file_id = fileId;\n      return this._request('getFile', { form: form });\n    }\n\n    /**\n      * Use this method to ban a user in a group, a supergroup or a channel.\n      * In the case of supergroups and channels, the user will not be able to\n      * return to the chat on their own using invite links, etc., unless unbanned first..\n      *\n      * The **bot must be an administrator in the group, supergroup or a channel** for this to work.\n      *\n      *\n      * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n      * @param  {Number} userId  Unique identifier of the target user\n      * @param  {Object} [options] Additional Telegram query options\n      * @return {Promise} True on success.\n      * @see https://core.telegram.org/bots/api#banchatmember\n      */\n\n  }, {\n    key: 'banChatMember',\n    value: function banChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('banChatMember', { form: form });\n    }\n\n    /**\n    * Use this method to unban a previously kicked user in a supergroup.\n    * The user will not return to the group automatically, but will be\n    * able to join via link, etc.\n    *\n    * The **bot must be an administrator** in the supergroup or channel for this to work.\n    *\n    * **By default**, this method guarantees that after the call the user is not a member of the chat, but will be able to join it.\n    * So **if the user is a member of the chat they will also be removed from the chat**. If you don't want this, use the parameter *only_if_banned*\n    *\n    * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} userId  Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#unbanchatmember\n    */\n\n  }, {\n    key: 'unbanChatMember',\n    value: function unbanChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('unbanChatMember', { form: form });\n    }\n\n    /**\n    * Use this method to restrict a user in a supergroup.\n    * The bot **must be an administrator in the supergroup** for this to work\n    * and must have the appropriate admin rights. Pass True for all boolean parameters\n    * to lift restrictions from a user. Returns True on success.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} userId Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#restrictchatmember\n    */\n\n  }, {\n    key: 'restrictChatMember',\n    value: function restrictChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('restrictChatMember', { form: form });\n    }\n\n    /**\n     * Use this method to promote or demote a user in a supergroup or a channel.\n     * The bot **must be an administrator** in the chat for this to work\n     * and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success.\n     * @see https://core.telegram.org/bots/api#promotechatmember\n     */\n\n  }, {\n    key: 'promoteChatMember',\n    value: function promoteChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('promoteChatMember', { form: form });\n    }\n\n    /**\n     * Use this method to set a custom title for an administrator in a supergroup promoted by the bot.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId Unique identifier of the target user\n     * @param  {String} customTitle New custom title for the administrator; 0-16 characters, emoji are not allowed\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatadministratorcustomtitle\n     */\n\n  }, {\n    key: 'setChatAdministratorCustomTitle',\n    value: function setChatAdministratorCustomTitle(chatId, userId, customTitle) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      form.custom_title = customTitle;\n      return this._request('setChatAdministratorCustomTitle', { form: form });\n    }\n\n    /**\n     * Use this method to ban a channel chat in a supergroup or a channel.\n     *\n     * Until the chat is [unbanned](https://core.telegram.org/bots/api#unbanchatsenderchat), the owner of the banned chat won't be able to send messages on behalf of any of their channels.\n     * The bot **must be an administrator in the supergroup or channel** for this to work and must have the appropriate administrator rights\n     *\n     * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} senderChatId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success.\n     * @see https://core.telegram.org/bots/api#banchatsenderchat\n     */\n\n  }, {\n    key: 'banChatSenderChat',\n    value: function banChatSenderChat(chatId, senderChatId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.sender_chat_id = senderChatId;\n      return this._request('banChatSenderChat', { form: form });\n    }\n\n    /**\n    * Use this method to unban a previously banned channel chat in a supergroup or channel.\n    *\n    * The bot **must be an administrator** for this to work and must have the appropriate administrator rights.\n    *\n    * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} senderChatId Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#unbanchatsenderchat\n    */\n\n  }, {\n    key: 'unbanChatSenderChat',\n    value: function unbanChatSenderChat(chatId, senderChatId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.sender_chat_id = senderChatId;\n      return this._request('unbanChatSenderChat', { form: form });\n    }\n\n    /**\n     * Use this method to set default chat permissions for all members.\n     *\n     * The bot **must be an administrator in the group or a supergroup** for this to\n     * work and **must have the `can_restrict_members` admin rights.**\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Array} chatPermissions New default chat permissions\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatpermissions\n     */\n\n  }, {\n    key: 'setChatPermissions',\n    value: function setChatPermissions(chatId, chatPermissions) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.permissions = stringify(chatPermissions);\n      return this._request('setChatPermissions', { form: form });\n    }\n\n    /**\n     * Use this method to generate a new primary invite link for a chat. **Any previously generated primary link is revoked**.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Exported invite link as String on success.\n     * @see https://core.telegram.org/bots/api#exportchatinvitelink\n     */\n\n  }, {\n    key: 'exportChatInviteLink',\n    value: function exportChatInviteLink(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('exportChatInviteLink', { form: form });\n    }\n\n    /**\n     * Use this method to create an additional invite link for a chat.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * The link generated with this method can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api#revokechatinvitelink)\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Object} The new invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n     * @see https://core.telegram.org/bots/api#createchatinvitelink\n     */\n\n  }, {\n    key: 'createChatInviteLink',\n    value: function createChatInviteLink(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('createChatInviteLink', { form: form });\n    }\n\n    /**\n     * Use this method to edit a non-primary invite link created by the bot.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} inviteLink Text with the invite link to edit\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} The edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n     * @see https://core.telegram.org/bots/api#editchatinvitelink\n     */\n\n  }, {\n    key: 'editChatInviteLink',\n    value: function editChatInviteLink(chatId, inviteLink) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.invite_link = inviteLink;\n      return this._request('editChatInviteLink', { form: form });\n    }\n\n    /**\n     * Use this method to revoke an invite link created by the bot.\n     * Note: If the primary link is revoked, a new link is automatically generated\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} inviteLink The invite link to revoke\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} The revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n     * @see https://core.telegram.org/bots/api#revokechatinvitelink\n     */\n\n  }, {\n    key: 'revokeChatInviteLink',\n    value: function revokeChatInviteLink(chatId, inviteLink) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.invite_link = inviteLink;\n      return this._request('revokeChatInviteLink', { form: form });\n    }\n\n    /**\n     * Use this method to approve a chat join request.\n     *\n     * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right.**\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#approvechatjoinrequest\n     */\n\n  }, {\n    key: 'approveChatJoinRequest',\n    value: function approveChatJoinRequest(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('approveChatJoinRequest', { form: form });\n    }\n\n    /**\n     * Use this method to decline a chat join request.\n     *\n     * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right**.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#declinechatjoinrequest\n     */\n\n  }, {\n    key: 'declineChatJoinRequest',\n    value: function declineChatJoinRequest(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('declineChatJoinRequest', { form: form });\n    }\n\n    /**\n     * Use this method to set a new profile photo for the chat. **Photos can't be changed for private chats**.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {stream.Stream|Buffer} photo A file path or a Stream.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatphoto\n     */\n\n  }, {\n    key: 'setChatPhoto',\n    value: function setChatPhoto(chatId, photo) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('photo', photo, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.photo = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('setChatPhoto', opts);\n    }\n\n    /**\n    * Use this method to delete a chat photo. **Photos can't be changed for private chats**.\n    *\n    * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#deletechatphoto\n    */\n\n  }, {\n    key: 'deleteChatPhoto',\n    value: function deleteChatPhoto(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('deleteChatPhoto', { form: form });\n    }\n\n    /**\n     * Use this method to change the title of a chat. **Titles can't be changed for private chats**.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} title New chat title, 1-255 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchattitle\n     */\n\n  }, {\n    key: 'setChatTitle',\n    value: function setChatTitle(chatId, title) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.title = title;\n      return this._request('setChatTitle', { form: form });\n    }\n\n    /**\n     * Use this method to change the description of a group, a supergroup or a channel.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} description New chat title, 0-255 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatdescription\n     */\n\n  }, {\n    key: 'setChatDescription',\n    value: function setChatDescription(chatId, description) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.description = description;\n      return this._request('setChatDescription', { form: form });\n    }\n\n    /**\n     * Use this method to pin a message in a supergroup.\n     *\n     * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n     * right in a supergroup or `can_edit_messages` administrator right in a channel.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} messageId Identifier of a message to pin\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#pinchatmessage\n     */\n\n  }, {\n    key: 'pinChatMessage',\n    value: function pinChatMessage(chatId, messageId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_id = messageId;\n      return this._request('pinChatMessage', { form: form });\n    }\n\n    /**\n     * Use this method to remove a message from the list of pinned messages in a chat\n     *\n     * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n     * right in a supergroup or `can_edit_messages` administrator right in a channel.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unpinchatmessage\n     */\n\n  }, {\n    key: 'unpinChatMessage',\n    value: function unpinChatMessage(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('unpinChatMessage', { form: form });\n    }\n\n    /**\n    * Use this method to clear the list of pinned messages in a chat.\n    *\n    * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n    * right in a supergroup or `can_edit_messages` administrator right in a channel.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#unpinallchatmessages\n    */\n\n  }, {\n    key: 'unpinAllChatMessages',\n    value: function unpinAllChatMessages(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('unpinAllChatMessages', { form: form });\n    }\n\n    /**\n     * Use this method for your bot to leave a group, supergroup or channel\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#leavechat\n     */\n\n  }, {\n    key: 'leaveChat',\n    value: function leaveChat(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('leaveChat', { form: form });\n    }\n\n    /**\n     * Use this method to get up to date information about the chat\n     * (current name of the user for one-on-one conversations, current\n     * username of a user, group or channel, etc.).\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`) or channel\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [ChatFullInfo](https://core.telegram.org/bots/api#chatfullinfo) object on success\n     * @see https://core.telegram.org/bots/api#getchat\n     */\n\n  }, {\n    key: 'getChat',\n    value: function getChat(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('getChat', { form: form });\n    }\n\n    /**\n     * Use this method to get a list of administrators in a chat\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api#chatmember) objects that contains information about all chat administrators except other bots.\n     * If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned\n     * @see https://core.telegram.org/bots/api#getchatadministrators\n     */\n\n  }, {\n    key: 'getChatAdministrators',\n    value: function getChatAdministrators(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('getChatAdministrators', { form: form });\n    }\n\n    /**\n    * Use this method to get the number of members in a chat.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} Int on success\n    * @see https://core.telegram.org/bots/api#getchatmembercount\n    */\n\n  }, {\n    key: 'getChatMemberCount',\n    value: function getChatMemberCount(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('getChatMemberCount', { form: form });\n    }\n\n    /**\n     * Use this method to get information about a member of a chat.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [ChatMember](https://core.telegram.org/bots/api#chatmember) object on success\n     * @see https://core.telegram.org/bots/api#getchatmember\n     */\n\n  }, {\n    key: 'getChatMember',\n    value: function getChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('getChatMember', { form: form });\n    }\n\n    /**\n     * Use this method to set a new group sticker set for a supergroup.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n     *\n     * **Note:** Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {String} stickerSetName Name of the sticker set to be set as the group sticker set\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatstickerset\n     */\n\n  }, {\n    key: 'setChatStickerSet',\n    value: function setChatStickerSet(chatId, stickerSetName) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.sticker_set_name = stickerSetName;\n      return this._request('setChatStickerSet', { form: form });\n    }\n\n    /**\n     * Use this method to delete a group sticker set from a supergroup.\n     *\n     * Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletechatstickerset\n     */\n\n  }, {\n    key: 'deleteChatStickerSet',\n    value: function deleteChatStickerSet(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('deleteChatStickerSet', { form: form });\n    }\n\n    /**\n     * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects\n     * @see https://core.telegram.org/bots/api#getforumtopiciconstickers\n     */\n\n  }, {\n    key: 'getForumTopicIconStickers',\n    value: function getForumTopicIconStickers(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('getForumTopicIconStickers', { form: form });\n    }\n\n    /**\n     * Use this method to create a topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n     *\n     * Returns information about the created topic as a [ForumTopic](https://core.telegram.org/bots/api#forumtopic) object.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {String} name Topic name, 1-128 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @see https://core.telegram.org/bots/api#createforumtopic\n     */\n\n  }, {\n    key: 'createForumTopic',\n    value: function createForumTopic(chatId, name) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.name = name;\n      return this._request('createForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to edit name and icon of a topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#editforumtopic\n     */\n\n  }, {\n    key: 'editForumTopic',\n    value: function editForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('editForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to close an open topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#closeforumtopic\n     */\n\n  }, {\n    key: 'closeForumTopic',\n    value: function closeForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('closeForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to reopen a closed topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#reopenforumtopic\n     */\n\n  }, {\n    key: 'reopenForumTopic',\n    value: function reopenForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('reopenForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to delete a forum topic along with all its messages in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deleteforumtopic\n     */\n\n  }, {\n    key: 'deleteForumTopic',\n    value: function deleteForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('deleteForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to clear the list of pinned messages in a forum topic.\n     * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unpinallforumtopicmessages\n     */\n\n  }, {\n    key: 'unpinAllForumTopicMessages',\n    value: function unpinAllForumTopicMessages(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('unpinAllForumTopicMessages', { form: form });\n    }\n\n    /**\n    * Use this method to edit the name of the 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically unhidden if it was hidden.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {String} name New topic name, 1-128 characters\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#editgeneralforumtopic\n    */\n\n  }, {\n    key: 'editGeneralForumTopic',\n    value: function editGeneralForumTopic(chatId, name) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.name = name;\n      return this._request('editGeneralForumTopic', { form: form });\n    }\n\n    /**\n    * Use this method to close an open 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically unhidden if it was hidden.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#closegeneralforumtopic\n    */\n\n  }, {\n    key: 'closeGeneralForumTopic',\n    value: function closeGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('closeGeneralForumTopic', { form: form });\n    }\n\n    /**\n    * Use this method to reopen a closed 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically unhidden if it was hidden.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#reopengeneralforumtopic\n    */\n\n  }, {\n    key: 'reopenGeneralForumTopic',\n    value: function reopenGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('reopenGeneralForumTopic', { form: form });\n    }\n\n    /**\n    * Use this method to hide the 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically closed if it was open.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#hidegeneralforumtopic\n    */\n\n  }, {\n    key: 'hideGeneralForumTopic',\n    value: function hideGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('hideGeneralForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to unhide the 'General' topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unhidegeneralforumtopic\n     */\n\n  }, {\n    key: 'unhideGeneralForumTopic',\n    value: function unhideGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('unhideGeneralForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to clear the list of pinned messages in a General forum topic.\n     * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages\n     */\n\n  }, {\n    key: 'unpinAllGeneralForumTopicMessages',\n    value: function unpinAllGeneralForumTopicMessages(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('unhideGeneralForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to send answers to callback queries sent from\n     * [inline keyboards](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating).\n     *\n     * The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.\n     *\n     * This method has **older, compatible signatures ([1][answerCallbackQuery-v0.27.1])([2][answerCallbackQuery-v0.29.0])**\n     * that are being deprecated.\n     *\n     * @param  {String} callbackQueryId Unique identifier for the query to be answered\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#answercallbackquery\n     */\n\n  }, {\n    key: 'answerCallbackQuery',\n    value: function answerCallbackQuery(callbackQueryId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      /* The older method signature (in/before v0.27.1) was answerCallbackQuery(callbackQueryId, text, showAlert).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature answerCallbackQuery(callbackQueryId, text, showAlert) has been deprecated since v0.27.1');\n        form = {\n          callback_query_id: arguments[0],\n          text: arguments[1],\n          show_alert: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n      /* The older method signature (in/before v0.29.0) was answerCallbackQuery([options]).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library. */\n      if ((typeof callbackQueryId === 'undefined' ? 'undefined' : _typeof(callbackQueryId)) === 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature answerCallbackQuery([options]) has been deprecated since v0.29.0');\n        form = callbackQueryId;\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      } else {\n        form.callback_query_id = callbackQueryId;\n      }\n      return this._request('answerCallbackQuery', { form: form });\n    }\n\n    /**\n     * Use this method to get the list of boosts added to a chat by a use.\n     * Requires administrator rights in the chat\n     *\n     * @param  {Number|String} chatId  Unique identifier for the group/channel\n     * @param  {Number} user_id Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns a [UserChatBoosts](https://core.telegram.org/bots/api#userchatboosts) object\n     * @see https://core.telegram.org/bots/api#getuserchatboosts\n     */\n\n  }, {\n    key: 'getUserChatBoosts',\n    value: function getUserChatBoosts(chatId, pollId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_id = pollId;\n      return this._request('getUserChatBoosts', { form: form });\n    }\n\n    /**\n     * Use this method to get information about the connection of the bot with a business account\n     *\n     * @param  {Number|String} businessConnectionId  Unique identifier for the group/channel\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns [BusinessConnection](https://core.telegram.org/bots/api#businessconnection) object\n     * @see https://core.telegram.org/bots/api#getbusinessconnection\n     */\n\n  }, {\n    key: 'getBusinessConnection',\n    value: function getBusinessConnection(businessConnectionId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.business_connection_id = businessConnectionId;\n      return this._request('getBusinessConnection', { form: form });\n    }\n\n    /**\n     * Use this method to change the list of the bot's commands.\n     *\n     * See https://core.telegram.org/bots#commands for more details about bot commands\n     *\n     * @param  {Array} commands  List of bot commands to be set as the list of the [bot's commands](https://core.telegram.org/bots/api#botcommand). At most 100 commands can be specified.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setmycommands\n     */\n\n  }, {\n    key: 'setMyCommands',\n    value: function setMyCommands(commands) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.commands = stringify(commands);\n\n      if (form.scope) {\n        form.scope = stringify(form.scope);\n      }\n\n      return this._request('setMyCommands', { form: form });\n    }\n\n    /**\n     * Use this method to delete the list of the bot's commands for the given scope and user language.\n     *\n     *  After deletion, [higher level commands](https://core.telegram.org/bots/api#determining-list-of-commands) will be shown to affected users.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletemycommands\n     */\n\n  }, {\n    key: 'deleteMyCommands',\n    value: function deleteMyCommands() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('deleteMyCommands', { form: form });\n    }\n\n    /**\n     * Use this method to get the current list of the bot's commands for the given scope and user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Array of [BotCommand](https://core.telegram.org/bots/api#botcommand) on success. If commands aren't set, an empty list is returned.\n     * @see https://core.telegram.org/bots/api#getmycommands\n     */\n\n  }, {\n    key: 'getMyCommands',\n    value: function getMyCommands() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (form.scope) {\n        form.scope = stringify(form.scope);\n      }\n      return this._request('getMyCommands', { form: form });\n    }\n\n    /**\n     * Use this method to change the bot's name.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setmyname\n     */\n\n  }, {\n    key: 'setMyName',\n    value: function setMyName() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setMyName', { form: form });\n    }\n\n    /**\n     * Use this method to get the current bot name for the given user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [BotName](https://core.telegram.org/bots/api#botname) on success\n     * @see https://core.telegram.org/bots/api#getmyname\n     */\n\n  }, {\n    key: 'getMyName',\n    value: function getMyName() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMyName', { form: form });\n    }\n\n    /**\n     * Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.\n     *\n     * Returns True on success.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setmydescription\n     */\n\n  }, {\n    key: 'setMyDescription',\n    value: function setMyDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setMyDescription', { form: form });\n    }\n\n    /**\n     * Use this method to get the current bot description for the given user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Returns [BotDescription](https://core.telegram.org/bots/api#botdescription) on success.\n     * @see https://core.telegram.org/bots/api#getmydescription\n     */\n\n  }, {\n    key: 'getMyDescription',\n    value: function getMyDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMyDescription', { form: form });\n    }\n\n    /**\n     * Use this method to change the bot's short description, which is shown on the bot's profile page\n     * and is sent together with the link when users share the bot.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Returns True on success.\n     * @see https://core.telegram.org/bots/api#setmyshortdescription\n     */\n\n  }, {\n    key: 'setMyShortDescription',\n    value: function setMyShortDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setMyShortDescription', { form: form });\n    }\n\n    /**\n     * Use this method to get the current bot short description for the given user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Returns [BotShortDescription](https://core.telegram.org/bots/api#botshortdescription) on success.\n     * @see https://core.telegram.org/bots/api#getmyshortdescription\n     */\n\n  }, {\n    key: 'getMyShortDescription',\n    value: function getMyShortDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMyShortDescription', { form: form });\n    }\n\n    /**\n     * Use this method to change the bot's menu button in a private chat, or the default menu button.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatmenubutton\n     */\n\n  }, {\n    key: 'setChatMenuButton',\n    value: function setChatMenuButton() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setChatMenuButton', { form: form });\n    }\n\n    /**\n     * Use this method to get the current value of the bot's menu button in a private chat, or the default menu button.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [MenuButton](https://core.telegram.org/bots/api#menubutton) on success\n     * @see https://core.telegram.org/bots/api#getchatmenubutton\n     */\n\n  }, {\n    key: 'getChatMenuButton',\n    value: function getChatMenuButton() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getChatMenuButton', { form: form });\n    }\n\n    /**\n     * Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels.\n     *\n     * These rights will be suggested to users, but they are are free to modify the list before adding the bot.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#getchatmenubutton\n     */\n\n  }, {\n    key: 'setMyDefaultAdministratorRights',\n    value: function setMyDefaultAdministratorRights() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setMyDefaultAdministratorRights', { form: form });\n    }\n\n    /**\n     * Use this method to get the current default administrator rights of the bot.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [ChatAdministratorRights](https://core.telegram.org/bots/api#chatadministratorrights) on success\n     * @see https://core.telegram.org/bots/api#getmydefaultadministratorrights\n     */\n\n  }, {\n    key: 'getMyDefaultAdministratorRights',\n    value: function getMyDefaultAdministratorRights() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMyDefaultAdministratorRights', { form: form });\n    }\n\n    /**\n     * Use this method to edit text or [game](https://core.telegram.org/bots/api#games) messages sent by the bot or via the bot (for inline bots).\n     *\n     * Note: that **you must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {String} text  New text of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagetext\n     */\n\n  }, {\n    key: 'editMessageText',\n    value: function editMessageText(text) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.text = text;\n      return this._request('editMessageText', { form: form });\n    }\n\n    /**\n     * Use this method to edit captions of messages sent by the bot or via the bot (for inline bots).\n     *\n     * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {String} caption  New caption of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagecaption\n     */\n\n  }, {\n    key: 'editMessageCaption',\n    value: function editMessageCaption(caption) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.caption = caption;\n      return this._request('editMessageCaption', { form: form });\n    }\n\n    /**\n     * Use this method to edit animation, audio, document, photo, or video messages.\n     *\n     * If a message is a part of a message album, then it can be edited only to a photo or a video.\n     *\n     * Otherwise, message type can be changed arbitrarily. When inline message is edited, new file can't be uploaded.\n     * Use previously uploaded file via its file_id or specify a URL.\n     *\n     * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {Object} media  A JSON-serialized object for a new media content of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagemedia\n     */\n\n  }, {\n    key: 'editMessageMedia',\n    value: function editMessageMedia(media) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var regexAttach = /attach:\\/\\/.+/;\n\n      if (typeof media.media === 'string' && regexAttach.test(media.media)) {\n        var opts = {\n          qs: form\n        };\n\n        opts.formData = {};\n\n        var payload = Object.assign({}, media);\n        delete payload.media;\n\n        try {\n          var attachName = String(0);\n\n          var _formatSendData6 = this._formatSendData(attachName, media.media.replace('attach://', ''), media.fileOptions),\n              _formatSendData7 = _slicedToArray(_formatSendData6, 1),\n              formData = _formatSendData7[0];\n\n          if (formData) {\n            opts.formData[attachName] = formData[attachName];\n            payload.media = 'attach://' + attachName;\n          } else {\n            throw new errors.FatalError('Failed to process the replacement action for your ' + media.type);\n          }\n        } catch (ex) {\n          return Promise.reject(ex);\n        }\n\n        opts.qs.media = stringify(payload);\n\n        return this._request('editMessageMedia', opts);\n      }\n\n      form.media = stringify(media);\n\n      return this._request('editMessageMedia', { form: form });\n    }\n\n    /**\n     * Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).\n     *\n     * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {Object} replyMarkup  A JSON-serialized object for an inline keyboard.\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagetext\n     */\n\n  }, {\n    key: 'editMessageReplyMarkup',\n    value: function editMessageReplyMarkup(replyMarkup) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.reply_markup = replyMarkup;\n      return this._request('editMessageReplyMarkup', { form: form });\n    }\n\n    /**\n     * Use this method to stop a poll which was sent by the bot.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the group/channel\n     * @param  {Number} pollId Identifier of the original message with the poll\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the stopped [Poll](https://core.telegram.org/bots/api#poll) is returned\n     * @see https://core.telegram.org/bots/api#stoppoll\n     */\n\n  }, {\n    key: 'stopPoll',\n    value: function stopPoll(chatId, pollId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_id = pollId;\n      return this._request('stopPoll', { form: form });\n    }\n\n    /**\n     * Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS,\n     * or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers.\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} sticker A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded. Stickers are WebP format files.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n     * @see https://core.telegram.org/bots/api#sendsticker\n     */\n\n  }, {\n    key: 'sendSticker',\n    value: function sendSticker(chatId, sticker) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('sticker', sticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.sticker = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendSticker', opts);\n    }\n\n    /**\n     * Use this method to get a sticker set.\n     *\n     * @param  {String} name Name of the sticker set\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, a [StickerSet](https://core.telegram.org/bots/api#stickerset) object is returned\n     * @see https://core.telegram.org/bots/api#getstickerset\n     */\n\n  }, {\n    key: 'getStickerSet',\n    value: function getStickerSet(name) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.name = name;\n      return this._request('getStickerSet', { form: form });\n    }\n\n    /**\n     * Use this method to get information about custom emoji stickers by their identifiers.\n     *\n     * @param  {Array} custom_emoji_ids List of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects.\n     * @see https://core.telegram.org/bots/api#getcustomemojistickers\n     */\n\n  }, {\n    key: 'getCustomEmojiStickers',\n    value: function getCustomEmojiStickers(customEmojiIds) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.custom_emoji_ids = stringify(customEmojiIds);\n      return this._request('getCustomEmojiStickers', { form: form });\n    }\n\n    /**\n     * Use this method to upload a file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple\n     * times).\n     *\n     * @param  {Number} userId User identifier of sticker file owner\n     * @param  {String|stream.Stream|Buffer} sticker A file path or a Stream with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. Can also be a `file_id` previously uploaded.\n     * @param {String} stickerFormat Allow values:  `static`, `animated` or `video`\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n     * @see https://core.telegram.org/bots/api#uploadstickerfile\n     */\n\n  }, {\n    key: 'uploadStickerFile',\n    value: function uploadStickerFile(userId, sticker) {\n      var stickerFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'static';\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var fileOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.sticker_format = stickerFormat;\n\n      try {\n        var sendData = this._formatSendData('sticker', sticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.sticker = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('uploadStickerFile', opts);\n    }\n\n    /**\n     * Use this method to create new sticker set owned by a user.\n     *\n     * The bot will be able to edit the created sticker set.\n     *\n     * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n     *\n     * @param  {Number} userId User identifier of created sticker set owner\n     * @param  {String} name Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g.,   *\"animals\"*). Can contain only english letters, digits and underscores.\n     *  Must begin with a letter, can't contain consecutive underscores and must end in `\"_by_<bot_username>\"`. `<bot_username>` is case insensitive. 1-64 characters.\n     * @param  {String} title Sticker set title, 1-64 characters\n     * @param  {String|stream.Stream|Buffer} pngSticker Png image with the sticker, must be up to 512 kilobytes in size,\n     *  dimensions must not exceed 512px, and either width or height must be exactly 512px.\n     * @param  {String} emojis One or more emoji corresponding to the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#createnewstickerset\n     */\n\n  }, {\n    key: 'createNewStickerSet',\n    value: function createNewStickerSet(userId, name, title, pngSticker, emojis) {\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n      var fileOptions = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.name = name;\n      opts.qs.title = title;\n      opts.qs.emojis = emojis;\n      opts.qs.mask_position = stringify(options.mask_position);\n      try {\n        var sendData = this._formatSendData('png_sticker', pngSticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.png_sticker = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('createNewStickerSet', opts);\n    }\n\n    /**\n     * Use this method to add a new sticker to a set created by the bot.\n     *\n     * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n     *\n     * Animated stickers can be added to animated sticker sets and only to them\n     *\n     * Note:\n     * - Emoji sticker sets can have up to 200 sticker\n     * - Static or Animated sticker sets can have up to 120 stickers\n     *\n     * @param  {Number} userId User identifier of sticker set owner\n     * @param  {String} name Sticker set name\n     * @param  {String|stream.Stream|Buffer} sticker Png image with the sticker (must be up to 512 kilobytes in size,\n     * dimensions must not exceed 512px, and either width or height must be exactly 512px, [TGS animation](https://core.telegram.org/stickers#animated-sticker-requirements)\n     * with the sticker or [WEBM video](https://core.telegram.org/stickers#video-sticker-requirements) with the sticker.\n     * @param  {String} emojis One or more emoji corresponding to the sticker\n     * @param  {String} stickerType Allow values: `png_sticker`, `tgs_sticker`, or `webm_sticker`.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#addstickertoset\n     */\n\n  }, {\n    key: 'addStickerToSet',\n    value: function addStickerToSet(userId, name, sticker, emojis) {\n      var stickerType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'png_sticker';\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n      var fileOptions = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.name = name;\n      opts.qs.emojis = emojis;\n      opts.qs.mask_position = stringify(options.mask_position);\n\n      if (typeof stickerType !== 'string' || ['png_sticker', 'tgs_sticker', 'webm_sticker'].indexOf(stickerType) === -1) {\n        return Promise.reject(new Error('stickerType must be a string and the allow types is: png_sticker, tgs_sticker, webm_sticker'));\n      }\n\n      try {\n        var sendData = this._formatSendData(stickerType, sticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs[stickerType] = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('addStickerToSet', opts);\n    }\n\n    /**\n     * Use this method to move a sticker in a set created by the bot to a specific position.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Number} position New sticker position in the set, zero-based\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickerpositioninset\n     */\n\n  }, {\n    key: 'setStickerPositionInSet',\n    value: function setStickerPositionInSet(sticker, position) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.sticker = sticker;\n      form.position = position;\n      return this._request('setStickerPositionInSet', { form: form });\n    }\n\n    /**\n     * Use this method to delete a sticker from a set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletestickerfromset\n     * @todo Add tests for this method!\n     */\n\n  }, {\n    key: 'deleteStickerFromSet',\n    value: function deleteStickerFromSet(sticker) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.sticker = sticker;\n      return this._request('deleteStickerFromSet', { form: form });\n    }\n\n    /**\n     * Use this method to replace an existing sticker in a sticker set with a new one\n     *\n     * @param  {Number} user_id User identifier of the sticker set owner\n     * @param  {String} name Sticker set name\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#replacestickerinset\n     * @todo Add tests for this method!\n     */\n\n  }, {\n    key: 'replaceStickerInSet',\n    value: function replaceStickerInSet(userId, name, oldSticker) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.user_id = userId;\n      form.name = name;\n      form.old_sticker = oldSticker;\n      return this._request('deleteStickerFromSet', { form: form });\n    }\n\n    /**\n     * Use this method to change the list of emoji assigned to a regular or custom emoji sticker.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param { Array } emojiList A JSON-serialized list of 1-20 emoji associated with the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickeremojilist\n     */\n\n  }, {\n    key: 'setStickerEmojiList',\n    value: function setStickerEmojiList(sticker, emojiList) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.sticker = sticker;\n      form.emoji_list = stringify(emojiList);\n      return this._request('setStickerEmojiList', { form: form });\n    }\n\n    /**\n     * Use this method to change the list of emoji assigned to a `regular` or `custom emoji` sticker.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickerkeywords\n     */\n\n  }, {\n    key: 'setStickerKeywords',\n    value: function setStickerKeywords(sticker) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.sticker = sticker;\n      if (form.keywords) {\n        form.keywords = stringify(form.keywords);\n      }\n      return this._request('setStickerKeywords', { form: form });\n    }\n\n    /**\n     * Use this method to change the [mask position](https://core.telegram.org/bots/api#maskposition) of a mask sticker.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickermaskposition\n     */\n\n  }, {\n    key: 'setStickerMaskPosition',\n    value: function setStickerMaskPosition(sticker) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.sticker = sticker;\n      if (form.mask_position) {\n        form.mask_position = stringify(form.mask_position);\n      }\n      return this._request('setStickerMaskPosition', { form: form });\n    }\n\n    /**\n     * Use this method to set the title of a created sticker set.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} name Sticker set name\n     * @param  {String} title Sticker set title, 1-64 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickersettitle\n     */\n\n  }, {\n    key: 'setStickerSetTitle',\n    value: function setStickerSetTitle(name, title) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.name = name;\n      form.title = title;\n      return this._request('setStickerSetTitle', { form: form });\n    }\n\n    /**\n     * Use this method to add a thumb to a set created by the bot.\n     *\n     * Animated thumbnails can be set for animated sticker sets only. Video thumbnails can be set only for video sticker sets only\n     *\n     * @param  {Number} userId User identifier of sticker set owner\n     * @param  {String} name Sticker set name\n     * @param  {String|stream.Stream|Buffer} thumbnail A .WEBP or .PNG image with the thumbnail,\n     * must be up to 128 kilobytes in size and have width and height exactly 100px,\n     * a TGS animation with the thumbnail up to 32 kilobytes in size or a WEBM video with the thumbnail up to 32 kilobytes in size.\n     *\n     * Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram\n     * to get a file from the Internet, or upload a new one. Animated sticker set thumbnails can't be uploaded via HTTP URL.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickersetthumbnail\n     */\n\n  }, {\n    key: 'setStickerSetThumbnail',\n    value: function setStickerSetThumbnail(userId, name, thumbnail) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var fileOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.name = name;\n      opts.qs.mask_position = stringify(options.mask_position);\n      try {\n        var sendData = this._formatSendData('thumbnail', thumbnail, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.thumbnail = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('setStickerSetThumbnail', opts);\n    }\n\n    /**\n     * Use this method to set the thumbnail of a custom emoji sticker set.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} name Sticker set name\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setcustomemojistickersetthumbnail\n     */\n\n  }, {\n    key: 'setCustomEmojiStickerSetThumbnail',\n    value: function setCustomEmojiStickerSetThumbnail(name) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.name = name;\n      return this._request('setCustomEmojiStickerSetThumbnail', { form: form });\n    }\n\n    /**\n     * Use this method to delete a sticker set that was created by the bot.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} name Sticker set name\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletestickerset\n     */\n\n  }, {\n    key: 'deleteStickerSet',\n    value: function deleteStickerSet(name) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.name = name;\n      return this._request('deleteStickerSet', { form: form });\n    }\n\n    /**\n     * Send answers to an inline query.\n     *\n     * Note: No more than 50 results per query are allowed.\n     *\n     * @param  {String} inlineQueryId Unique identifier of the query\n     * @param  {InlineQueryResult[]} results An array of results for the inline query\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, True is returned\n     * @see https://core.telegram.org/bots/api#answerinlinequery\n     */\n\n  }, {\n    key: 'answerInlineQuery',\n    value: function answerInlineQuery(inlineQueryId, results) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.inline_query_id = inlineQueryId;\n      form.results = stringify(results);\n      return this._request('answerInlineQuery', { form: form });\n    }\n\n    /**\n     * Use this method to set the result of an interaction with a [Web App](https://core.telegram.org/bots/webapps)\n     * and send a corresponding message on behalf of the user to the chat from which the query originated.\n     *\n     * @param  {String} webAppQueryId Unique identifier for the query to be answered\n     * @param  {InlineQueryResult} result object that represents one result of an inline query\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, a [SentWebAppMessage](https://core.telegram.org/bots/api#sentwebappmessage) object is returned\n     * @see https://core.telegram.org/bots/api#answerwebappquery\n     */\n\n  }, {\n    key: 'answerWebAppQuery',\n    value: function answerWebAppQuery(webAppQueryId, result) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.web_app_query_id = webAppQueryId;\n      form.result = stringify(result);\n      return this._request('answerWebAppQuery', { form: form });\n    }\n\n    /**\n     * Use this method to send an invoice.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} title Product name, 1-32 characters\n     * @param  {String} description Product description, 1-255 characters\n     * @param  {String} payload Bot defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.\n     * @param  {String} providerToken Payments provider token, obtained via `@BotFather`\n     * @param  {String} currency Three-letter ISO 4217 currency code\n     * @param  {Array} prices Breakdown of prices\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n     * @see https://core.telegram.org/bots/api#sendinvoice\n     */\n\n  }, {\n    key: 'sendInvoice',\n    value: function sendInvoice(chatId, title, description, payload, providerToken, currency, prices) {\n      var form = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};\n\n      form.chat_id = chatId;\n      form.title = title;\n      form.description = description;\n      form.payload = payload;\n      form.provider_token = providerToken;\n      form.currency = currency;\n      form.prices = stringify(prices);\n      form.provider_data = stringify(form.provider_data);\n      if (form.suggested_tip_amounts) {\n        form.suggested_tip_amounts = stringify(form.suggested_tip_amounts);\n      }\n      return this._request('sendInvoice', { form: form });\n    }\n\n    /**\n    * Use this method to create a link for an invoice.\n    *\n    * @param {String} title Product name, 1-32 characters\n    * @param {String} description Product description, 1-255 characters\n    * @param {String} payload Bot defined invoice payload\n    * @param {String} providerToken Payment provider token\n    * @param {String} currency Three-letter ISO 4217 currency code\n    * @param {Array} prices Breakdown of prices\n    * @param {Object} [options] Additional Telegram query options\n    * @returns {Promise} The created invoice link as String on success.\n    * @see https://core.telegram.org/bots/api#createinvoicelink\n    */\n\n  }, {\n    key: 'createInvoiceLink',\n    value: function createInvoiceLink(title, description, payload, providerToken, currency, prices) {\n      var form = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n\n      form.title = title;\n      form.description = description;\n      form.payload = payload;\n      form.provider_token = providerToken;\n      form.currency = currency;\n      form.prices = stringify(prices);\n      return this._request('createInvoiceLink', { form: form });\n    }\n\n    /**\n    * Use this method to reply to shipping queries.\n    *\n    * If you sent an invoice requesting a shipping address and the parameter is_flexible was specified,\n    * the Bot API will send an [Update](https://core.telegram.org/bots/api#update) with a shipping_query field to the bot\n    *\n    * @param  {String} shippingQueryId  Unique identifier for the query to be answered\n    * @param  {Boolean} ok Specify if delivery of the product is possible\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} On success, True is returned\n    * @see https://core.telegram.org/bots/api#answershippingquery\n    */\n\n  }, {\n    key: 'answerShippingQuery',\n    value: function answerShippingQuery(shippingQueryId, ok) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.shipping_query_id = shippingQueryId;\n      form.ok = ok;\n      form.shipping_options = stringify(form.shipping_options);\n      return this._request('answerShippingQuery', { form: form });\n    }\n\n    /**\n     * Use this method to respond to such pre-checkout queries\n     *\n     * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of\n     * an [Update](https://core.telegram.org/bots/api#update) with the field *pre_checkout_query*.\n     *\n     * **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n     *\n     * @param  {String} preCheckoutQueryId  Unique identifier for the query to be answered\n     * @param  {Boolean} ok Specify if every order details are ok\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, True is returned\n     * @see https://core.telegram.org/bots/api#answerprecheckoutquery\n     */\n\n  }, {\n    key: 'answerPreCheckoutQuery',\n    value: function answerPreCheckoutQuery(preCheckoutQueryId, ok) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.pre_checkout_query_id = preCheckoutQueryId;\n      form.ok = ok;\n      return this._request('answerPreCheckoutQuery', { form: form });\n    }\n\n    /**\n     * Use this method to send a game.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} gameShortName name of the game to be sent. Set up your games via `@BotFather`.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n     * @see https://core.telegram.org/bots/api#sendgame\n     */\n\n  }, {\n    key: 'sendGame',\n    value: function sendGame(chatId, gameShortName) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.game_short_name = gameShortName;\n      return this._request('sendGame', { form: form });\n    }\n\n    /**\n     * Use this method to set the score of the specified user in a game message.\n     *\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Number} score New score value, must be non-negative\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, if the message is not an inline message, the [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#setgamescore\n     */\n\n  }, {\n    key: 'setGameScore',\n    value: function setGameScore(userId, score) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.user_id = userId;\n      form.score = score;\n      return this._request('setGameScore', { form: form });\n    }\n\n    /**\n     * Use this method to get data for high score tables.\n     *\n     * Will return the score of the specified user and several of their neighbors in a game.\n     *\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns an Array of [GameHighScore](https://core.telegram.org/bots/api#gamehighscore) objects\n     * @see https://core.telegram.org/bots/api#getgamehighscores\n     */\n\n  }, {\n    key: 'getGameHighScores',\n    value: function getGameHighScores(userId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.user_id = userId;\n      return this._request('getGameHighScores', { form: form });\n    }\n\n    /**\n    * Use this method to delete a message, including service messages, with the following limitations:\n    * - A message can only be deleted if it was sent less than 48 hours ago.\n    * - A dice message can only be deleted if it was sent more than 24 hours ago.\n    * - Bots can delete outgoing messages in groups and supergroups.\n    * - Bots can delete incoming messages in groups, supergroups and channels.\n    * - Bots granted `can_post_messages` permissions can delete outgoing messages in channels.\n    * - If the bot is an administrator of a group, it can delete any message there.\n    * - If the bot has `can_delete_messages` permission in a supergroup, it can delete any message there.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n    * @param  {Number} messageId  Unique identifier of the target message\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#deletemessage\n    */\n\n  }, {\n    key: 'deleteMessage',\n    value: function deleteMessage(chatId, messageId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_id = messageId;\n      return this._request('deleteMessage', { form: form });\n    }\n\n    /**\n     * Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param  {Array<Number|String>} messageIds  Identifiers of 1-100 messages to delete. See deleteMessage for limitations on which messages can be deleted\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise<Boolean>} True on success\n     * @see https://core.telegram.org/bots/api#deletemessages\n     */\n\n  }, {\n    key: 'deleteMessages',\n    value: function deleteMessages(chatId, messageIds) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_ids = stringify(messageIds);\n      return this._request('deleteMessages', { form: form });\n    }\n  }]);\n\n  return TelegramBot;\n}(EventEmitter);\n\nmodule.exports = TelegramBot;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAG,OAAOC,MAAM,KAAK,UAAU,IAAI,OAAOA,MAAM,CAACC,QAAQ,KAAK,QAAQ,GAAG,UAAUC,GAAG,EAAE;EAAE,OAAO,OAAOA,GAAG;AAAE,CAAC,GAAG,UAAUA,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAI,OAAOF,MAAM,KAAK,UAAU,IAAIE,GAAG,CAACC,WAAW,KAAKH,MAAM,IAAIE,GAAG,KAAKF,MAAM,CAACI,SAAS,GAAG,QAAQ,GAAG,OAAOF,GAAG;AAAE,CAAC;AAE5Q,IAAIG,cAAc,GAAG,YAAY;EAAE,SAASC,aAAaA,CAACC,GAAG,EAAEC,CAAC,EAAE;IAAE,IAAIC,IAAI,GAAG,EAAE;IAAE,IAAIC,EAAE,GAAG,IAAI;IAAE,IAAIC,EAAE,GAAG,KAAK;IAAE,IAAIC,EAAE,GAAGC,SAAS;IAAE,IAAI;MAAE,KAAK,IAAIC,EAAE,GAAGP,GAAG,CAACP,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,EAAEc,EAAE,EAAE,EAAEL,EAAE,GAAG,CAACK,EAAE,GAAGD,EAAE,CAACE,IAAI,CAAC,CAAC,EAAEC,IAAI,CAAC,EAAEP,EAAE,GAAG,IAAI,EAAE;QAAED,IAAI,CAACS,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;QAAE,IAAIX,CAAC,IAAIC,IAAI,CAACW,MAAM,KAAKZ,CAAC,EAAE;MAAO;IAAE,CAAC,CAAC,OAAOa,GAAG,EAAE;MAAEV,EAAE,GAAG,IAAI;MAAEC,EAAE,GAAGS,GAAG;IAAE,CAAC,SAAS;MAAE,IAAI;QAAE,IAAI,CAACX,EAAE,IAAII,EAAE,CAAC,QAAQ,CAAC,EAAEA,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;MAAE,CAAC,SAAS;QAAE,IAAIH,EAAE,EAAE,MAAMC,EAAE;MAAE;IAAE;IAAE,OAAOH,IAAI;EAAE;EAAE,OAAO,UAAUF,GAAG,EAAEC,CAAC,EAAE;IAAE,IAAIc,KAAK,CAACC,OAAO,CAAChB,GAAG,CAAC,EAAE;MAAE,OAAOA,GAAG;IAAE,CAAC,MAAM,IAAIP,MAAM,CAACC,QAAQ,IAAIuB,MAAM,CAACjB,GAAG,CAAC,EAAE;MAAE,OAAOD,aAAa,CAACC,GAAG,EAAEC,CAAC,CAAC;IAAE,CAAC,MAAM;MAAE,MAAM,IAAIiB,SAAS,CAAC,sDAAsD,CAAC;IAAE;EAAE,CAAC;AAAE,CAAC,CAAC,CAAC;AAEvpB,IAAIC,YAAY,GAAG,YAAY;EAAE,SAASC,gBAAgBA,CAACC,MAAM,EAAEC,KAAK,EAAE;IAAE,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqB,KAAK,CAACT,MAAM,EAAEZ,CAAC,EAAE,EAAE;MAAE,IAAIsB,UAAU,GAAGD,KAAK,CAACrB,CAAC,CAAC;MAAEsB,UAAU,CAACC,UAAU,GAAGD,UAAU,CAACC,UAAU,IAAI,KAAK;MAAED,UAAU,CAACE,YAAY,GAAG,IAAI;MAAE,IAAI,OAAO,IAAIF,UAAU,EAAEA,UAAU,CAACG,QAAQ,GAAG,IAAI;MAAET,MAAM,CAACU,cAAc,CAACN,MAAM,EAAEE,UAAU,CAACK,GAAG,EAAEL,UAAU,CAAC;IAAE;EAAE;EAAE,OAAO,UAAUM,WAAW,EAAEC,UAAU,EAAEC,WAAW,EAAE;IAAE,IAAID,UAAU,EAAEV,gBAAgB,CAACS,WAAW,CAAChC,SAAS,EAAEiC,UAAU,CAAC;IAAE,IAAIC,WAAW,EAAEX,gBAAgB,CAACS,WAAW,EAAEE,WAAW,CAAC;IAAE,OAAOF,WAAW;EAAE,CAAC;AAAE,CAAC,CAAC,CAAC;AAEnjB,IAAIG,IAAI,GAAG,SAASC,GAAGA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EAAE,IAAIF,MAAM,KAAK,IAAI,EAAEA,MAAM,GAAGG,QAAQ,CAACxC,SAAS;EAAE,IAAIyC,IAAI,GAAGrB,MAAM,CAACsB,wBAAwB,CAACL,MAAM,EAAEC,QAAQ,CAAC;EAAE,IAAIG,IAAI,KAAKhC,SAAS,EAAE;IAAE,IAAIkC,MAAM,GAAGvB,MAAM,CAACwB,cAAc,CAACP,MAAM,CAAC;IAAE,IAAIM,MAAM,KAAK,IAAI,EAAE;MAAE,OAAOlC,SAAS;IAAE,CAAC,MAAM;MAAE,OAAO2B,GAAG,CAACO,MAAM,EAAEL,QAAQ,EAAEC,QAAQ,CAAC;IAAE;EAAE,CAAC,MAAM,IAAI,OAAO,IAAIE,IAAI,EAAE;IAAE,OAAOA,IAAI,CAAC1B,KAAK;EAAE,CAAC,MAAM;IAAE,IAAI8B,MAAM,GAAGJ,IAAI,CAACL,GAAG;IAAE,IAAIS,MAAM,KAAKpC,SAAS,EAAE;MAAE,OAAOA,SAAS;IAAE;IAAE,OAAOoC,MAAM,CAACC,IAAI,CAACP,QAAQ,CAAC;EAAE;AAAE,CAAC;AAE1e,SAASQ,eAAeA,CAACjD,GAAG,EAAEiC,GAAG,EAAEhB,KAAK,EAAE;EAAE,IAAIgB,GAAG,IAAIjC,GAAG,EAAE;IAAEsB,MAAM,CAACU,cAAc,CAAChC,GAAG,EAAEiC,GAAG,EAAE;MAAEhB,KAAK,EAAEA,KAAK;MAAEY,UAAU,EAAE,IAAI;MAAEC,YAAY,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAK,CAAC,CAAC;EAAE,CAAC,MAAM;IAAE/B,GAAG,CAACiC,GAAG,CAAC,GAAGhB,KAAK;EAAE;EAAE,OAAOjB,GAAG;AAAE;AAEhN,SAASkD,eAAeA,CAACC,QAAQ,EAAEjB,WAAW,EAAE;EAAE,IAAI,EAAEiB,QAAQ,YAAYjB,WAAW,CAAC,EAAE;IAAE,MAAM,IAAIX,SAAS,CAAC,mCAAmC,CAAC;EAAE;AAAE;AAExJ,SAAS6B,0BAA0BA,CAACC,IAAI,EAAEL,IAAI,EAAE;EAAE,IAAI,CAACK,IAAI,EAAE;IAAE,MAAM,IAAIC,cAAc,CAAC,2DAA2D,CAAC;EAAE;EAAE,OAAON,IAAI,KAAK,OAAOA,IAAI,KAAK,QAAQ,IAAI,OAAOA,IAAI,KAAK,UAAU,CAAC,GAAGA,IAAI,GAAGK,IAAI;AAAE;AAE/O,SAASE,SAASA,CAACC,QAAQ,EAAEC,UAAU,EAAE;EAAE,IAAI,OAAOA,UAAU,KAAK,UAAU,IAAIA,UAAU,KAAK,IAAI,EAAE;IAAE,MAAM,IAAIlC,SAAS,CAAC,0DAA0D,GAAG,OAAOkC,UAAU,CAAC;EAAE;EAAED,QAAQ,CAACtD,SAAS,GAAGoB,MAAM,CAACoC,MAAM,CAACD,UAAU,IAAIA,UAAU,CAACvD,SAAS,EAAE;IAAED,WAAW,EAAE;MAAEgB,KAAK,EAAEuC,QAAQ;MAAE3B,UAAU,EAAE,KAAK;MAAEE,QAAQ,EAAE,IAAI;MAAED,YAAY,EAAE;IAAK;EAAE,CAAC,CAAC;EAAE,IAAI2B,UAAU,EAAEnC,MAAM,CAACqC,cAAc,GAAGrC,MAAM,CAACqC,cAAc,CAACH,QAAQ,EAAEC,UAAU,CAAC,GAAGD,QAAQ,CAACI,SAAS,GAAGH,UAAU;AAAE;;AAE7e;AACAI,OAAO,CAAC,2BAA2B,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;;AAE7C,IAAIC,MAAM,GAAGF,OAAO,CAAC,UAAU,CAAC;AAChC,IAAIG,kBAAkB,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AACrD,IAAII,kBAAkB,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;AACrD,IAAIK,KAAK,GAAGL,OAAO,CAAC,OAAO,CAAC,CAAC,uBAAuB,CAAC;AACrD,IAAIM,YAAY,GAAGN,OAAO,CAAC,eAAe,CAAC;AAC3C,IAAIO,QAAQ,GAAGP,OAAO,CAAC,WAAW,CAAC;AACnC,IAAIQ,OAAO,GAAGR,OAAO,CAAC,0BAA0B,CAAC;AACjD,IAAIS,eAAe,GAAGT,OAAO,CAAC,kBAAkB,CAAC;AACjD,IAAIU,EAAE,GAAGV,OAAO,CAAC,aAAa,CAAC;AAC/B,IAAIW,MAAM,GAAGX,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIY,IAAI,GAAGZ,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIa,IAAI,GAAGb,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIc,GAAG,GAAGd,OAAO,CAAC,KAAK,CAAC;AACxB,IAAIe,EAAE,GAAGf,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIgB,IAAI,GAAGhB,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIiB,SAAS,GAAGjB,OAAO,CAAC,SAAS,CAAC,CAACiB,SAAS;AAE5C,IAAIC,aAAa,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,sBAAsB,EAAE,SAAS,EAAE,mBAAmB,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,oBAAoB,EAAE,SAAS,EAAE,kBAAkB,EAAE,UAAU,EAAE,sBAAsB,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,eAAe,EAAE,OAAO,EAAE,gBAAgB,EAAE,MAAM,EAAE,SAAS,EAAE,oBAAoB,EAAE,yBAAyB,EAAE,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,iCAAiC,EAAE,sBAAsB,EAAE,mCAAmC,EAAE,kBAAkB,EAAE,qBAAqB,EAAE,cAAc,EAAE,kBAAkB,CAAC;AAEtpB,IAAIC,uBAAuB,GAAG,CAAC,sBAAsB,EAAE,uBAAuB,CAAC;;AAE/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,IAAI,EAAE;EACvB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAOA,IAAI;EACb;EACA,OAAOC,IAAI,CAACF,SAAS,CAACC,IAAI,CAAC;AAC7B;AAEA,IAAIE,WAAW,GAAG,UAAUC,aAAa,EAAE;EACzC9B,SAAS,CAAC6B,WAAW,EAAEC,aAAa,CAAC;EAErC7D,YAAY,CAAC4D,WAAW,EAAE,CAAC;IACzBnD,GAAG,EAAE,IAAI;IAGT;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACIhB,KAAK,EAAE,SAASqE,EAAEA,CAACC,KAAK,EAAEC,QAAQ,EAAE;MAClC,IAAIR,uBAAuB,CAACS,OAAO,CAACF,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;QACjD,IAAIG,GAAG,GAAG,gFAAgF;QAC1FZ,SAAS,CAAC,SAAS,GAAGE,uBAAuB,CAACW,IAAI,CAAC,GAAG,CAAC,GAAG,mDAAmD,GAAGD,GAAG,CAAC;MACtH;MACArD,IAAI,CAAC+C,WAAW,CAAClF,SAAS,CAAC0D,SAAS,IAAItC,MAAM,CAACwB,cAAc,CAACsC,WAAW,CAAClF,SAAS,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC8C,IAAI,CAAC,IAAI,EAAEuC,KAAK,EAAEC,QAAQ,CAAC;IAC/H;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,CAAC,EAAE,CAAC;IACHvD,GAAG,EAAE,QAAQ;IAEb;AACJ;AACA;AACA;IACIK,GAAG,EAAE,SAASA,GAAGA,CAAA,EAAG;MAClB,OAAOyB,MAAM;IACf;;IAEA;AACJ;AACA;AACA;EAEE,CAAC,EAAE;IACD9B,GAAG,EAAE,cAAc;IACnBK,GAAG,EAAE,SAASA,GAAGA,CAAA,EAAG;MAClB,OAAOyC,aAAa;IACtB;EACF,CAAC,CAAC,CAAC;EAEH,SAASK,WAAWA,CAACQ,KAAK,EAAE;IAC1B,IAAIC,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAEpF5C,eAAe,CAAC,IAAI,EAAEkC,WAAW,CAAC;IAElC,IAAIW,KAAK,GAAG3C,0BAA0B,CAAC,IAAI,EAAE,CAACgC,WAAW,CAACxB,SAAS,IAAItC,MAAM,CAACwB,cAAc,CAACsC,WAAW,CAAC,EAAEpC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEtH+C,KAAK,CAACH,KAAK,GAAGA,KAAK;IACnBG,KAAK,CAACF,OAAO,GAAGA,OAAO;IACvBE,KAAK,CAACF,OAAO,CAACG,OAAO,GAAG,OAAOH,OAAO,CAACG,OAAO,KAAK,WAAW,GAAG,KAAK,GAAGH,OAAO,CAACG,OAAO;IACxFD,KAAK,CAACF,OAAO,CAACI,OAAO,GAAG,OAAOJ,OAAO,CAACI,OAAO,KAAK,WAAW,GAAG,KAAK,GAAGJ,OAAO,CAACI,OAAO;IACxFF,KAAK,CAACF,OAAO,CAACK,UAAU,GAAGL,OAAO,CAACK,UAAU,IAAI,0BAA0B;IAC3EH,KAAK,CAACF,OAAO,CAACM,QAAQ,GAAG,OAAON,OAAO,CAACM,QAAQ,KAAK,WAAW,GAAG,IAAI,GAAGN,OAAO,CAACM,QAAQ;IAC1FJ,KAAK,CAACF,OAAO,CAACO,YAAY,GAAG,OAAOP,OAAO,CAACO,YAAY,KAAK,WAAW,GAAG,KAAK,GAAGP,OAAO,CAACO,YAAY;IACvGL,KAAK,CAACM,oBAAoB,GAAG,EAAE;IAC/BN,KAAK,CAACO,gBAAgB,GAAG,CAAC;IAC1BP,KAAK,CAACQ,eAAe,GAAG,EAAE;IAC1BR,KAAK,CAACS,QAAQ,GAAG,IAAI;IACrBT,KAAK,CAACU,QAAQ,GAAG,IAAI;IAErB,IAAIZ,OAAO,CAACG,OAAO,EAAE;MACnB,IAAIU,SAAS,GAAGb,OAAO,CAACG,OAAO,CAACU,SAAS;MACzC,IAAI,OAAOA,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK,IAAI,EAAE;QAC1DX,KAAK,CAACY,YAAY,CAAC,CAAC;MACtB;IACF;IAEA,IAAId,OAAO,CAACI,OAAO,EAAE;MACnB,IAAIW,QAAQ,GAAGf,OAAO,CAACI,OAAO,CAACW,QAAQ;MACvC,IAAI,OAAOA,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,IAAI,EAAE;QACxDb,KAAK,CAACc,WAAW,CAAC,CAAC;MACrB;IACF;IACA,OAAOd,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;;EAGEvE,YAAY,CAAC4D,WAAW,EAAE,CAAC;IACzBnD,GAAG,EAAE,WAAW;IAChBhB,KAAK,EAAE,SAAS6F,SAASA,CAACC,KAAK,EAAE;MAC/B,OAAO,IAAI,CAAClB,OAAO,CAACK,UAAU,GAAG,MAAM,GAAG,IAAI,CAACN,KAAK,IAAI,IAAI,CAACC,OAAO,CAACmB,eAAe,GAAG,OAAO,GAAG,EAAE,CAAC,GAAG,GAAG,GAAGD,KAAK;IACpH;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD9E,GAAG,EAAE,iBAAiB;IACtBhB,KAAK,EAAE,SAASgG,eAAeA,CAACjH,GAAG,EAAE;MACnC,IAAIkH,WAAW,GAAGlH,GAAG,CAACmH,YAAY;MAClC,IAAID,WAAW,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;QAClDlH,GAAG,CAACmH,YAAY,GAAGlC,SAAS,CAACiC,WAAW,CAAC;MAC3C;IACF;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDjF,GAAG,EAAE,mBAAmB;IACxBhB,KAAK,EAAE,SAASmG,iBAAiBA,CAACpH,GAAG,EAAE;MACrC,IAAIqH,QAAQ,GAAGrH,GAAG,CAACqH,QAAQ;MAC3B,IAAIC,eAAe,GAAGtH,GAAG,CAACuH,gBAAgB;MAC1C,IAAIC,mBAAmB,GAAGxH,GAAG,CAACyH,oBAAoB;MAClD,IAAIJ,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;QAC5CrH,GAAG,CAACqH,QAAQ,GAAGpC,SAAS,CAACoC,QAAQ,CAAC;MACpC;MAEA,IAAIC,eAAe,IAAI,OAAOA,eAAe,KAAK,QAAQ,EAAE;QAC1DtH,GAAG,CAACuH,gBAAgB,GAAGtC,SAAS,CAACqC,eAAe,CAAC;MACnD;MAEA,IAAIE,mBAAmB,IAAI,OAAOA,mBAAmB,KAAK,QAAQ,EAAE;QAClExH,GAAG,CAACyH,oBAAoB,GAAGxC,SAAS,CAACuC,mBAAmB,CAAC;MAC3D;IACF;EACF,CAAC,EAAE;IACDvF,GAAG,EAAE,sBAAsB;IAC3BhB,KAAK,EAAE,SAASyG,oBAAoBA,CAAC7B,OAAO,EAAE8B,IAAI,EAAE;MAClD,IAAI9B,OAAO,CAAC+B,KAAK,EAAE;QACjB,IAAID,IAAI,CAACE,QAAQ,KAAK,IAAI,EAAE;UAC1BF,IAAI,CAACE,QAAQ,GAAG,CAAC,CAAC;QACpB;QAEA,IAAIC,UAAU,GAAG,OAAO;QAExB,IAAIC,gBAAgB,GAAG,IAAI,CAACC,eAAe,CAACF,UAAU,EAAEjC,OAAO,CAAC+B,KAAK,CAACK,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;UAC3FC,gBAAgB,GAAG/H,cAAc,CAAC4H,gBAAgB,EAAE,CAAC,CAAC;UACtDF,QAAQ,GAAGK,gBAAgB,CAAC,CAAC,CAAC;QAElC,IAAIL,QAAQ,EAAE;UACZF,IAAI,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAGD,QAAQ,CAACC,UAAU,CAAC;UAChDH,IAAI,CAACpD,EAAE,CAAC4D,SAAS,GAAG,WAAW,GAAGL,UAAU;QAC9C;MACF;IACF;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD7F,GAAG,EAAE,qBAAqB;IAC1BhB,KAAK,EAAE,SAASmH,mBAAmBA,CAACpI,GAAG,EAAE;MACvC,IAAIA,GAAG,CAACqI,cAAc,CAAC,kBAAkB,CAAC,IAAI,OAAOrI,GAAG,CAACsI,gBAAgB,KAAK,QAAQ,EAAE;QACtFtI,GAAG,CAACsI,gBAAgB,GAAGrD,SAAS,CAACjF,GAAG,CAACsI,gBAAgB,CAAC;MACxD;IACF;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDrG,GAAG,EAAE,UAAU;IACfhB,KAAK,EAAE,SAASsH,QAAQA,CAACxB,KAAK,EAAE;MAC9B,IAAIlB,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEpF,IAAI,CAAC,IAAI,CAACF,KAAK,EAAE;QACf,OAAO4C,OAAO,CAACC,MAAM,CAAC,IAAI1E,MAAM,CAAC2E,UAAU,CAAC,kCAAkC,CAAC,CAAC;MAClF;MAEA,IAAI,IAAI,CAAC7C,OAAO,CAACxB,OAAO,EAAE;QACxB/C,MAAM,CAACqH,MAAM,CAAC9C,OAAO,EAAE,IAAI,CAACA,OAAO,CAACxB,OAAO,CAAC;MAC9C;MAEA,IAAIwB,OAAO,CAAC+C,IAAI,EAAE;QAChB,IAAI,CAAC3B,eAAe,CAACpB,OAAO,CAAC+C,IAAI,CAAC;QAClC,IAAI,CAACxB,iBAAiB,CAACvB,OAAO,CAAC+C,IAAI,CAAC;QACpC,IAAI,CAACR,mBAAmB,CAACvC,OAAO,CAAC+C,IAAI,CAAC;MACxC;MACA,IAAI/C,OAAO,CAACtB,EAAE,EAAE;QACd,IAAI,CAAC0C,eAAe,CAACpB,OAAO,CAACtB,EAAE,CAAC;QAChC,IAAI,CAAC6D,mBAAmB,CAACvC,OAAO,CAACtB,EAAE,CAAC;MACtC;MAEAsB,OAAO,CAACgD,MAAM,GAAG,MAAM;MACvBhD,OAAO,CAACH,GAAG,GAAG,IAAI,CAACoB,SAAS,CAACC,KAAK,CAAC;MACnClB,OAAO,CAACiD,MAAM,GAAG,KAAK;MACtBjD,OAAO,CAACkD,uBAAuB,GAAG,IAAI;MACtClD,OAAO,CAACmD,OAAO,GAAG,IAAI;MACtB9E,KAAK,CAAC,kBAAkB,EAAE2B,OAAO,CAAC;MAClC,OAAOxB,OAAO,CAACwB,OAAO,CAAC,CAACoD,IAAI,CAAC,UAAUC,IAAI,EAAE;QAC3C,IAAIhE,IAAI,GAAG,KAAK,CAAC;QACjB,IAAI;UACFA,IAAI,GAAGgE,IAAI,CAACC,IAAI,GAAGhE,IAAI,CAACiE,KAAK,CAACF,IAAI,CAACC,IAAI,CAAC;QAC1C,CAAC,CAAC,OAAOhI,GAAG,EAAE;UACZ,MAAM,IAAI4C,MAAM,CAACsF,UAAU,CAAC,0BAA0B,GAAGH,IAAI,CAACC,IAAI,EAAED,IAAI,CAAC;QAC3E;QAEA,IAAIhE,IAAI,CAACoE,EAAE,EAAE;UACX,OAAOpE,IAAI,CAACqE,MAAM;QACpB;QAEA,MAAM,IAAIxF,MAAM,CAACyF,aAAa,CAACtE,IAAI,CAACuE,UAAU,GAAG,GAAG,GAAGvE,IAAI,CAACwE,WAAW,EAAER,IAAI,CAAC;MAChF,CAAC,CAAC,CAACS,KAAK,CAAC,UAAUC,KAAK,EAAE;QACxB;QACA,IAAIA,KAAK,CAACC,QAAQ,EAAE,MAAMD,KAAK;QAC/B,MAAM,IAAI7F,MAAM,CAAC2E,UAAU,CAACkB,KAAK,CAAC;MACpC,CAAC,CAAC;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3H,GAAG,EAAE,iBAAiB;IACtBhB,KAAK,EAAE,SAAS+G,eAAeA,CAAC8B,IAAI,EAAE5E,IAAI,EAAE;MAC1C,IAAI6E,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAIkE,kBAAkB,GAAG,2FAA2F,GAAG,kEAAkE,GAAG,yDAAyD;MACrP,IAAIC,QAAQ,GAAG/E,IAAI;MACnB,IAAIgF,QAAQ,GAAGH,WAAW,CAACG,QAAQ;MACnC,IAAIC,WAAW,GAAGJ,WAAW,CAACI,WAAW;MAEzC,IAAIjF,IAAI,YAAYV,MAAM,CAAC4F,MAAM,EAAE;QACjC,IAAI,CAACF,QAAQ,IAAIhF,IAAI,CAACR,IAAI,EAAE;UAC1B;UACA;UACA,IAAIgB,GAAG,GAAGf,GAAG,CAACyE,KAAK,CAAC1E,IAAI,CAAC2F,QAAQ,CAACnF,IAAI,CAACR,IAAI,CAAC4F,QAAQ,CAAC,CAAC,CAAC,CAAC;UACxD,IAAI5E,GAAG,CAAC6E,QAAQ,EAAE;YAChBL,QAAQ,GAAG3F,EAAE,CAACiG,QAAQ,CAAC9E,GAAG,CAAC6E,QAAQ,CAAC;UACtC;QACF;MACF,CAAC,MAAM,IAAIE,MAAM,CAACC,QAAQ,CAACxF,IAAI,CAAC,EAAE;QAChC,IAAI,CAACgF,QAAQ,IAAI,CAACS,OAAO,CAACC,GAAG,CAACC,YAAY,EAAE;UAC1C/F,SAAS,CAAC,6EAA6E,GAAGkF,kBAAkB,CAAC;UAC7GE,QAAQ,GAAG,MAAM;QACnB;QACA,IAAI,CAACC,WAAW,EAAE;UAChB,IAAIW,QAAQ,GAAG1G,QAAQ,CAACc,IAAI,CAAC;UAC7B,IAAI4F,QAAQ,EAAE;YACZX,WAAW,GAAGW,QAAQ,CAACrG,IAAI;YAC3B,IAAIsG,GAAG,GAAGD,QAAQ,CAACC,GAAG;YACtB,IAAIA,GAAG,IAAI,CAACJ,OAAO,CAACC,GAAG,CAACC,YAAY,EAAE;cACpCX,QAAQ,GAAGA,QAAQ,GAAG,GAAG,GAAGa,GAAG;YACjC;UACF,CAAC,MAAM,IAAI,CAACJ,OAAO,CAACC,GAAG,CAACC,YAAY,EAAE;YACpC/F,SAAS,CAAC,kFAAkF,GAAGkF,kBAAkB,CAAC;YAClH,MAAM,IAAIjG,MAAM,CAAC2E,UAAU,CAAC,8BAA8B,CAAC;UAC7D;QACF;MACF,CAAC,MAAM,IAAIxD,IAAI,EAAE;QACf,IAAI,IAAI,CAACW,OAAO,CAACM,QAAQ,IAAIvB,EAAE,CAACoG,UAAU,CAAC9F,IAAI,CAAC,EAAE;UAChD+E,QAAQ,GAAGrF,EAAE,CAACqG,gBAAgB,CAAC/F,IAAI,CAAC;UACpC,IAAI,CAACgF,QAAQ,EAAE;YACbA,QAAQ,GAAGxF,IAAI,CAAC2F,QAAQ,CAACnF,IAAI,CAAC;UAChC;QACF,CAAC,MAAM;UACL,OAAO,CAAC,IAAI,EAAEA,IAAI,CAAC;QACrB;MACF,CAAC,MAAM;QACL,OAAO,CAAC,IAAI,EAAEA,IAAI,CAAC;MACrB;MAEAgF,QAAQ,GAAGA,QAAQ,IAAI,UAAU;MACjCC,WAAW,GAAGA,WAAW,IAAI1F,IAAI,CAACyG,MAAM,CAAChB,QAAQ,CAAC;MAClD,IAAIS,OAAO,CAACC,GAAG,CAACC,YAAY,EAAE;QAC5BV,WAAW,GAAGA,WAAW,IAAI,0BAA0B;MACzD,CAAC,MAAM;QACLrF,SAAS,CAAC,4FAA4F,GAAGkF,kBAAkB,CAAC;MAC9H;;MAEA;;MAEA,OAAO,CAAC/G,eAAe,CAAC,CAAC,CAAC,EAAE6G,IAAI,EAAE;QAChC7I,KAAK,EAAEgJ,QAAQ;QACfpE,OAAO,EAAE;UACPqE,QAAQ,EAAEA,QAAQ;UAClBC,WAAW,EAAEA;QACf;MACF,CAAC,CAAC,EAAE,IAAI,CAAC;IACX;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDlI,GAAG,EAAE,cAAc;IACnBhB,KAAK,EAAE,SAAS0F,YAAYA,CAAA,EAAG;MAC7B,IAAId,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEpF,IAAI,IAAI,CAACqF,cAAc,CAAC,CAAC,EAAE;QACzB,OAAO3C,OAAO,CAACC,MAAM,CAAC,IAAI1E,MAAM,CAAC2E,UAAU,CAAC,4CAA4C,CAAC,CAAC;MAC5F;MACA7C,OAAO,CAACuF,OAAO,GAAG,OAAOvF,OAAO,CAACuF,OAAO,KAAK,WAAW,GAAG,IAAI,GAAGvF,OAAO,CAACuF,OAAO;MACjF,IAAI,CAAC,IAAI,CAAC5E,QAAQ,EAAE;QAClB,IAAI,CAACA,QAAQ,GAAG,IAAIvC,kBAAkB,CAAC,IAAI,CAAC;MAC9C;MACA,OAAO,IAAI,CAACuC,QAAQ,CAAC6E,KAAK,CAACxF,OAAO,CAAC;IACrC;;IAEA;AACJ;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD5D,GAAG,EAAE,aAAa;IAClBhB,KAAK,EAAE,SAASqK,WAAWA,CAAA,EAAG;MAC5BxG,SAAS,CAAC,kFAAkF,CAAC;MAC7F,OAAO,IAAI,CAAC6B,YAAY,CAAC,CAAC;IAC5B;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1E,GAAG,EAAE,aAAa;IAClBhB,KAAK,EAAE,SAASsK,WAAWA,CAAC1F,OAAO,EAAE;MACnC,IAAI,CAAC,IAAI,CAACW,QAAQ,EAAE;QAClB,OAAOgC,OAAO,CAACgD,OAAO,CAAC,CAAC;MAC1B;MACA,OAAO,IAAI,CAAChF,QAAQ,CAACiF,IAAI,CAAC5F,OAAO,CAAC;IACpC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD5D,GAAG,EAAE,aAAa;IAClBhB,KAAK,EAAE,SAASyK,WAAWA,CAACC,MAAM,EAAE;MAClC,IAAIC,MAAM,GAAG,IAAI;MAEjB,IAAIhD,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAAC+F,OAAO,CAACF,MAAM,EAAE/C,IAAI,CAAC,CAACK,IAAI,CAAC,UAAUC,IAAI,EAAE;QACrD,OAAO0C,MAAM,CAAC/F,OAAO,CAACK,UAAU,GAAG,WAAW,GAAG0F,MAAM,CAAChG,KAAK,GAAG,GAAG,GAAGsD,IAAI,CAAC4C,SAAS;MACtF,CAAC,CAAC;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD7J,GAAG,EAAE,eAAe;IACpBhB,KAAK,EAAE,SAAS8K,aAAaA,CAACJ,MAAM,EAAE;MACpC,IAAIK,MAAM,GAAG,IAAI;MAEjB,IAAIpD,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,IAAImG,UAAU,GAAG,IAAIzH,MAAM,CAAC0H,WAAW,CAAC,CAAC;MACzCD,UAAU,CAACvH,IAAI,GAAGiH,MAAM;MACxB,IAAI,CAACD,WAAW,CAACC,MAAM,EAAE/C,IAAI,CAAC,CAACK,IAAI,CAAC,UAAUkD,OAAO,EAAE;QACrDF,UAAU,CAACG,IAAI,CAAC,MAAM,EAAE;UACtBC,GAAG,EAAEF;QACP,CAAC,CAAC;QACFtH,IAAI,CAACP,eAAe,CAAChD,MAAM,CAACqH,MAAM,CAAC;UAAE0D,GAAG,EAAEF;QAAQ,CAAC,EAAEH,MAAM,CAACnG,OAAO,CAACxB,OAAO,CAAC,CAAC,EAAE4H,UAAU,CAAC;MAC5F,CAAC,CAAC,CAACtC,KAAK,CAAC,UAAUC,KAAK,EAAE;QACxBqC,UAAU,CAACG,IAAI,CAAC,OAAO,EAAExC,KAAK,CAAC;MACjC,CAAC,CAAC;MACF,OAAOqC,UAAU;IACnB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDhK,GAAG,EAAE,cAAc;IACnBhB,KAAK,EAAE,SAASqL,YAAYA,CAACX,MAAM,EAAEY,WAAW,EAAE;MAChD,IAAI3D,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,IAAI0F,OAAO,GAAG,KAAK,CAAC;MACpB,IAAI/C,MAAM,GAAG,KAAK,CAAC;MACnB,IAAI+D,OAAO,GAAG,IAAIhE,OAAO,CAAC,UAAUiE,CAAC,EAAEC,CAAC,EAAE;QACxClB,OAAO,GAAGiB,CAAC;QACXhE,MAAM,GAAGiE,CAAC;MACZ,CAAC,CAAC;MACF,IAAIT,UAAU,GAAG,IAAI,CAACF,aAAa,CAACJ,MAAM,EAAE/C,IAAI,CAAC;MACjDqD,UAAU,CAAC3G,EAAE,CAAC,MAAM,EAAE,UAAUqH,IAAI,EAAE;QACpC,IAAIC,QAAQ,GAAGD,IAAI,CAACN,GAAG,CAACQ,KAAK,CAACF,IAAI,CAACN,GAAG,CAACS,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5D;QACA,IAAIC,QAAQ,GAAGrI,IAAI,CAACiB,IAAI,CAAC4G,WAAW,EAAEK,QAAQ,CAAC;QAC/C/H,IAAI,CAACoH,UAAU,EAAErH,EAAE,CAACoI,iBAAiB,CAACD,QAAQ,CAAC,EAAE,UAAUnD,KAAK,EAAE;UAChE,IAAIA,KAAK,EAAE;YACT,OAAOnB,MAAM,CAACmB,KAAK,CAAC;UACtB;UACA,OAAO4B,OAAO,CAACuB,QAAQ,CAAC;QAC1B,CAAC,CAAC;MACJ,CAAC,CAAC;MACFd,UAAU,CAAC3G,EAAE,CAAC,OAAO,EAAE,UAAUnE,GAAG,EAAE;QACpCsH,MAAM,CAACtH,GAAG,CAAC;MACb,CAAC,CAAC;MACF,OAAOqL,OAAO;IAChB;;IAEA;AACJ;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDvK,GAAG,EAAE,QAAQ;IACbhB,KAAK,EAAE,SAASgM,MAAMA,CAACC,MAAM,EAAEC,QAAQ,EAAE;MACvC,IAAI,CAAC9G,oBAAoB,CAACrF,IAAI,CAAC;QAAEkM,MAAM,EAAEA,MAAM;QAAEC,QAAQ,EAAEA;MAAS,CAAC,CAAC;IACxE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDlL,GAAG,EAAE,oBAAoB;IACzBhB,KAAK,EAAE,SAASmM,kBAAkBA,CAACF,MAAM,EAAE;MACzC,IAAIG,KAAK,GAAG,IAAI,CAAChH,oBAAoB,CAACiH,SAAS,CAAC,UAAUC,YAAY,EAAE;QACtE,OAAOC,MAAM,CAACD,YAAY,CAACL,MAAM,CAAC,KAAKM,MAAM,CAACN,MAAM,CAAC;MACvD,CAAC,CAAC;MACF,IAAIG,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB,OAAO,IAAI;MACb;MACA,OAAO,IAAI,CAAChH,oBAAoB,CAACoH,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD;;IAEA;AACJ;AACA;EAEE,CAAC,EAAE;IACDpL,GAAG,EAAE,oBAAoB;IACzBhB,KAAK,EAAE,SAASyM,kBAAkBA,CAAA,EAAG;MACnC,IAAI,CAACrH,oBAAoB,GAAG,EAAE;IAChC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDpE,GAAG,EAAE,kBAAkB;IACvBhB,KAAK,EAAE,SAAS0M,gBAAgBA,CAACC,MAAM,EAAEC,SAAS,EAAEV,QAAQ,EAAE;MAC5D,IAAIW,EAAE,GAAG,EAAE,IAAI,CAACxH,gBAAgB;MAChC,IAAI,CAACC,eAAe,CAACvF,IAAI,CAAC;QACxB8M,EAAE,EAAEA,EAAE;QACNF,MAAM,EAAEA,MAAM;QACdC,SAAS,EAAEA,SAAS;QACpBV,QAAQ,EAAEA;MACZ,CAAC,CAAC;MACF,OAAOW,EAAE;IACX;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD7L,GAAG,EAAE,qBAAqB;IAC1BhB,KAAK,EAAE,SAAS8M,mBAAmBA,CAACC,eAAe,EAAE;MACnD,IAAIX,KAAK,GAAG,IAAI,CAAC9G,eAAe,CAAC+G,SAAS,CAAC,UAAUW,aAAa,EAAE;QAClE,OAAOA,aAAa,CAACH,EAAE,KAAKE,eAAe;MAC7C,CAAC,CAAC;MACF,IAAIX,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB,OAAO,IAAI;MACb;MACA,OAAO,IAAI,CAAC9G,eAAe,CAACkH,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD;;IAEA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDpL,GAAG,EAAE,qBAAqB;IAC1BhB,KAAK,EAAE,SAASiN,mBAAmBA,CAAA,EAAG;MACpC,IAAI,CAAC3H,eAAe,GAAG,EAAE;IAC3B;;IAEA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDtE,GAAG,EAAE,WAAW;IAChBhB,KAAK,EAAE,SAASkN,SAASA,CAAA,EAAG;MAC1B,OAAO,IAAI,CAAC3H,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC2H,SAAS,CAAC,CAAC,GAAG,KAAK;IAC1D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDlM,GAAG,EAAE,aAAa;IAClBhB,KAAK,EAAE,SAAS4F,WAAWA,CAAA,EAAG;MAC5B,IAAI,IAAI,CAACsH,SAAS,CAAC,CAAC,EAAE;QACpB,OAAO3F,OAAO,CAACC,MAAM,CAAC,IAAI1E,MAAM,CAAC2E,UAAU,CAAC,4CAA4C,CAAC,CAAC;MAC5F;MACA,IAAI,CAAC,IAAI,CAACjC,QAAQ,EAAE;QAClB,IAAI,CAACA,QAAQ,GAAG,IAAIzC,kBAAkB,CAAC,IAAI,CAAC;MAC9C;MACA,OAAO,IAAI,CAACyC,QAAQ,CAAC2H,IAAI,CAAC,CAAC;IAC7B;;IAEA;AACJ;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDnM,GAAG,EAAE,cAAc;IACnBhB,KAAK,EAAE,SAASoN,YAAYA,CAAA,EAAG;MAC7B,IAAI,CAAC,IAAI,CAAC5H,QAAQ,EAAE;QAClB,OAAO+B,OAAO,CAACgD,OAAO,CAAC,CAAC;MAC1B;MACA,OAAO,IAAI,CAAC/E,QAAQ,CAAC6H,KAAK,CAAC,CAAC;IAC9B;;IAEA;AACJ;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDrM,GAAG,EAAE,gBAAgB;IACrBhB,KAAK,EAAE,SAASkK,cAAcA,CAAA,EAAG;MAC/B,OAAO,IAAI,CAAC1E,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC8H,MAAM,CAAC,CAAC,GAAG,KAAK;IACvD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDtM,GAAG,EAAE,eAAe;IACpBhB,KAAK,EAAE,SAASuN,aAAaA,CAACC,MAAM,EAAE;MACpC,IAAIC,MAAM,GAAG,IAAI;MAEjBxK,KAAK,CAAC,mBAAmB,EAAEuK,MAAM,CAAC;MAClC,IAAIE,OAAO,GAAGF,MAAM,CAACE,OAAO;MAC5B,IAAIC,aAAa,GAAGH,MAAM,CAACI,cAAc;MACzC,IAAIC,WAAW,GAAGL,MAAM,CAACM,YAAY;MACrC,IAAIC,iBAAiB,GAAGP,MAAM,CAACQ,mBAAmB;MAClD,IAAIC,kBAAkB,GAAGT,MAAM,CAACU,mBAAmB;MACnD,IAAIC,gBAAgB,GAAGX,MAAM,CAACY,gBAAgB;MAC9C,IAAIC,qBAAqB,GAAGb,MAAM,CAACc,uBAAuB;MAC1D,IAAIC,sBAAsB,GAAGf,MAAM,CAACgB,yBAAyB;MAC7D,IAAIC,eAAe,GAAGjB,MAAM,CAACkB,gBAAgB;MAC7C,IAAIC,oBAAoB,GAAGnB,MAAM,CAACoB,sBAAsB;MACxD,IAAIC,WAAW,GAAGrB,MAAM,CAACsB,YAAY;MACrC,IAAIC,kBAAkB,GAAGvB,MAAM,CAACwB,oBAAoB;MACpD,IAAIC,aAAa,GAAGzB,MAAM,CAAC0B,cAAc;MACzC,IAAIC,aAAa,GAAG3B,MAAM,CAAC4B,cAAc;MACzC,IAAIC,gBAAgB,GAAG7B,MAAM,CAAC8B,kBAAkB;MAChD,IAAIC,IAAI,GAAG/B,MAAM,CAAC+B,IAAI;MACtB,IAAIC,UAAU,GAAGhC,MAAM,CAACiC,WAAW;MACnC,IAAIC,YAAY,GAAGlC,MAAM,CAACmC,cAAc;MACxC,IAAIC,UAAU,GAAGpC,MAAM,CAACqC,WAAW;MACnC,IAAIC,eAAe,GAAGtC,MAAM,CAACuC,iBAAiB;MAC9C,IAAIC,SAAS,GAAGxC,MAAM,CAACyC,UAAU;MACjC,IAAIC,gBAAgB,GAAG1C,MAAM,CAAC2C,kBAAkB;MAEhD,IAAIzC,OAAO,EAAE;QACXzK,KAAK,CAAC,2BAA2B,EAAEyK,OAAO,CAAC;QAC3C,IAAI0C,QAAQ,GAAG,CAAC,CAAC;QACjBA,QAAQ,CAACvH,IAAI,GAAG1E,WAAW,CAACkM,YAAY,CAACC,IAAI,CAAC,UAAUC,WAAW,EAAE;UACnE,OAAO7C,OAAO,CAAC6C,WAAW,CAAC;QAC7B,CAAC,CAAC;QACF,IAAI,CAACpF,IAAI,CAAC,SAAS,EAAEuC,OAAO,EAAE0C,QAAQ,CAAC;QACvC,IAAIA,QAAQ,CAACvH,IAAI,EAAE;UACjB5F,KAAK,CAAC,iBAAiB,EAAEmN,QAAQ,CAACvH,IAAI,EAAE6E,OAAO,CAAC;UAChD,IAAI,CAACvC,IAAI,CAACiF,QAAQ,CAACvH,IAAI,EAAE6E,OAAO,EAAE0C,QAAQ,CAAC;QAC7C;QACA,IAAI1C,OAAO,CAAC8C,IAAI,EAAE;UAChBvN,KAAK,CAAC,cAAc,CAAC;UACrB,IAAI,CAACmC,oBAAoB,CAACqL,IAAI,CAAC,UAAUC,GAAG,EAAE;YAC5CzN,KAAK,CAAC,qBAAqB,EAAEyK,OAAO,CAAC8C,IAAI,EAAEE,GAAG,CAACzE,MAAM,CAAC;YAEtD,IAAI,EAAEyE,GAAG,CAACzE,MAAM,YAAY0E,MAAM,CAAC,EAAE;cACnCD,GAAG,CAACzE,MAAM,GAAG,IAAI0E,MAAM,CAACD,GAAG,CAACzE,MAAM,CAAC;YACrC;YAEA,IAAI3D,MAAM,GAAGoI,GAAG,CAACzE,MAAM,CAAC2E,IAAI,CAAClD,OAAO,CAAC8C,IAAI,CAAC;YAC1C,IAAI,CAAClI,MAAM,EAAE;cACX,OAAO,KAAK;YACd;YACA;YACAoI,GAAG,CAACzE,MAAM,CAAC4E,SAAS,GAAG,CAAC;YACxB5N,KAAK,CAAC,YAAY,EAAEyN,GAAG,CAACzE,MAAM,CAAC;YAC/ByE,GAAG,CAACxE,QAAQ,CAACwB,OAAO,EAAEpF,MAAM,CAAC;YAC7B;YACA,OAAOmF,MAAM,CAAC7I,OAAO,CAACkM,cAAc;UACtC,CAAC,CAAC;QACJ;QACA,IAAIpD,OAAO,CAACqD,gBAAgB,EAAE;UAC5B;UACA,IAAI,CAACzL,eAAe,CAAC0L,OAAO,CAAC,UAAUC,KAAK,EAAE;YAC5C;YACA,IAAIA,KAAK,CAACtE,MAAM,KAAKe,OAAO,CAACwD,IAAI,CAACrE,EAAE,EAAE;cACpC;cACA,IAAIoE,KAAK,CAACrE,SAAS,KAAKc,OAAO,CAACqD,gBAAgB,CAACI,UAAU,EAAE;gBAC3D;gBACAF,KAAK,CAAC/E,QAAQ,CAACwB,OAAO,CAAC;cACzB;YACF;UACF,CAAC,CAAC;QACJ;MACF,CAAC,MAAM,IAAIC,aAAa,EAAE;QACxB1K,KAAK,CAAC,kCAAkC,EAAE0K,aAAa,CAAC;QACxD,IAAI,CAACxC,IAAI,CAAC,gBAAgB,EAAEwC,aAAa,CAAC;QAC1C,IAAIA,aAAa,CAAC6C,IAAI,EAAE;UACtB,IAAI,CAACrF,IAAI,CAAC,qBAAqB,EAAEwC,aAAa,CAAC;QACjD;QACA,IAAIA,aAAa,CAACyD,OAAO,EAAE;UACzB,IAAI,CAACjG,IAAI,CAAC,wBAAwB,EAAEwC,aAAa,CAAC;QACpD;MACF,CAAC,MAAM,IAAIE,WAAW,EAAE;QACtB5K,KAAK,CAAC,gCAAgC,EAAE4K,WAAW,CAAC;QACpD,IAAI,CAAC1C,IAAI,CAAC,cAAc,EAAE0C,WAAW,CAAC;MACxC,CAAC,MAAM,IAAIE,iBAAiB,EAAE;QAC5B9K,KAAK,CAAC,uCAAuC,EAAE8K,iBAAiB,CAAC;QACjE,IAAI,CAAC5C,IAAI,CAAC,qBAAqB,EAAE4C,iBAAiB,CAAC;QACnD,IAAIA,iBAAiB,CAACyC,IAAI,EAAE;UAC1B,IAAI,CAACrF,IAAI,CAAC,0BAA0B,EAAE4C,iBAAiB,CAAC;QAC1D;QACA,IAAIA,iBAAiB,CAACqD,OAAO,EAAE;UAC7B,IAAI,CAACjG,IAAI,CAAC,6BAA6B,EAAE4C,iBAAiB,CAAC;QAC7D;MACF,CAAC,MAAM,IAAIE,kBAAkB,EAAE;QAC7BhL,KAAK,CAAC,uCAAuC,EAAEgL,kBAAkB,CAAC;QAClE,IAAI,CAAC9C,IAAI,CAAC,qBAAqB,EAAE8C,kBAAkB,CAAC;MACtD,CAAC,MAAM,IAAIE,gBAAgB,EAAE;QAC3BlL,KAAK,CAAC,oCAAoC,EAAEkL,gBAAgB,CAAC;QAC7D,IAAI,CAAChD,IAAI,CAAC,kBAAkB,EAAEgD,gBAAgB,CAAC;MACjD,CAAC,MAAM,IAAIE,qBAAqB,EAAE;QAChCpL,KAAK,CAAC,2CAA2C,EAAEoL,qBAAqB,CAAC;QACzE,IAAI,CAAClD,IAAI,CAAC,yBAAyB,EAAEkD,qBAAqB,CAAC;MAC7D,CAAC,MAAM,IAAIE,sBAAsB,EAAE;QACjCtL,KAAK,CAAC,6CAA6C,EAAEsL,sBAAsB,CAAC;QAC5E,IAAI,CAACpD,IAAI,CAAC,2BAA2B,EAAEoD,sBAAsB,CAAC;MAChE,CAAC,MAAM,IAAIE,eAAe,EAAE;QAC1BxL,KAAK,CAAC,oCAAoC,EAAEwL,eAAe,CAAC;QAC5D,IAAI,CAACtD,IAAI,CAAC,kBAAkB,EAAEsD,eAAe,CAAC;MAChD,CAAC,MAAM,IAAIE,oBAAoB,EAAE;QAC/B1L,KAAK,CAAC,0CAA0C,EAAE0L,oBAAoB,CAAC;QACvE,IAAI,CAACxD,IAAI,CAAC,wBAAwB,EAAEwD,oBAAoB,CAAC;MAC3D,CAAC,MAAM,IAAIE,WAAW,EAAE;QACtB5L,KAAK,CAAC,gCAAgC,EAAE4L,WAAW,CAAC;QACpD,IAAI,CAAC1D,IAAI,CAAC,cAAc,EAAE0D,WAAW,CAAC;MACxC,CAAC,MAAM,IAAIE,kBAAkB,EAAE;QAC7B9L,KAAK,CAAC,wCAAwC,EAAE8L,kBAAkB,CAAC;QACnE,IAAI,CAAC5D,IAAI,CAAC,sBAAsB,EAAE4D,kBAAkB,CAAC;MACvD,CAAC,MAAM,IAAIE,aAAa,EAAE;QACxBhM,KAAK,CAAC,kCAAkC,EAAEgM,aAAa,CAAC;QACxD,IAAI,CAAC9D,IAAI,CAAC,gBAAgB,EAAE8D,aAAa,CAAC;MAC5C,CAAC,MAAM,IAAIE,aAAa,EAAE;QACxBlM,KAAK,CAAC,kCAAkC,EAAEkM,aAAa,CAAC;QACxD,IAAI,CAAChE,IAAI,CAAC,gBAAgB,EAAEgE,aAAa,CAAC;MAC5C,CAAC,MAAM,IAAIE,gBAAgB,EAAE;QAC3BpM,KAAK,CAAC,sCAAsC,EAAEoM,gBAAgB,CAAC;QAC/D,IAAI,CAAClE,IAAI,CAAC,oBAAoB,EAAEkE,gBAAgB,CAAC;MACnD,CAAC,MAAM,IAAIE,IAAI,EAAE;QACftM,KAAK,CAAC,wBAAwB,EAAEsM,IAAI,CAAC;QACrC,IAAI,CAACpE,IAAI,CAAC,MAAM,EAAEoE,IAAI,CAAC;MACzB,CAAC,MAAM,IAAIC,UAAU,EAAE;QACrBvM,KAAK,CAAC,+BAA+B,EAAEuM,UAAU,CAAC;QAClD,IAAI,CAACrE,IAAI,CAAC,aAAa,EAAEqE,UAAU,CAAC;MACtC,CAAC,MAAM,IAAII,UAAU,EAAE;QACrB3M,KAAK,CAAC,+BAA+B,EAAE2M,UAAU,CAAC;QAClD,IAAI,CAACzE,IAAI,CAAC,aAAa,EAAEyE,UAAU,CAAC;MACtC,CAAC,MAAM,IAAIF,YAAY,EAAE;QACvBzM,KAAK,CAAC,kCAAkC,EAAEyM,YAAY,CAAC;QACvD,IAAI,CAACvE,IAAI,CAAC,gBAAgB,EAAEuE,YAAY,CAAC;MAC3C,CAAC,MAAM,IAAII,eAAe,EAAE;QAC1B7M,KAAK,CAAC,kCAAkC,EAAE6M,eAAe,CAAC;QAC1D,IAAI,CAAC3E,IAAI,CAAC,mBAAmB,EAAE2E,eAAe,CAAC;MACjD,CAAC,MAAM,IAAIE,SAAS,EAAE;QACpB/M,KAAK,CAAC,8BAA8B,EAAE+M,SAAS,CAAC;QAChD,IAAI,CAAC7E,IAAI,CAAC,YAAY,EAAE6E,SAAS,CAAC;MACpC,CAAC,MAAM,IAAIE,gBAAgB,EAAE;QAC3BjN,KAAK,CAAC,sCAAsC,EAAEiN,gBAAgB,CAAC;QAC/D,IAAI,CAAC/E,IAAI,CAAC,oBAAoB,EAAE+E,gBAAgB,CAAC;MACnD;IACF;;IAEA;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDlP,GAAG,EAAE,YAAY;IACjBhB,KAAK,EAAE,SAASqR,UAAUA,CAAA,EAAG;MAC3B,IAAI1J,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;;MAEjF;AACN;AACA;MACM,IAAI,CAAC,OAAO8C,IAAI,KAAK,WAAW,GAAG,WAAW,GAAG/I,OAAO,CAAC+I,IAAI,CAAC,MAAM,QAAQ,EAAE;QAC5E;QACA9D,SAAS,CAAC,2FAA2F,CAAC;QACtG8D,IAAI,GAAG;UACL2J,OAAO,EAAEzM,SAAS,CAAC,CAAC,CAAC;UACrB0M,KAAK,EAAE1M,SAAS,CAAC,CAAC,CAAC;UACnB2M,MAAM,EAAE3M,SAAS,CAAC,CAAC;QACrB,CAAC;QACD;MACF;MAEA,OAAO,IAAI,CAACyC,QAAQ,CAAC,YAAY,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACpD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,YAAY;IACjBhB,KAAK,EAAE,SAASyR,UAAUA,CAAChN,GAAG,EAAE;MAC9B,IAAIG,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;;MAExF;AACN;AACA;MACM,IAAI6M,IAAI,GAAG,KAAK,CAAC;MACjB;MACA,IAAI,CAAC,OAAO9M,OAAO,KAAK,WAAW,GAAG,WAAW,GAAGhG,OAAO,CAACgG,OAAO,CAAC,MAAM,QAAQ,IAAIA,OAAO,YAAYrB,MAAM,CAAC4F,MAAM,EAAE;QACtHtF,SAAS,CAAC,8EAA8E,CAAC;QACzF6N,IAAI,GAAG9M,OAAO;QACdA,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;MAChB,CAAC,MAAM;QACL8M,IAAI,GAAG9M,OAAO,CAAC+M,WAAW;MAC5B;MAEA,IAAIjL,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAACmB,GAAG,GAAGA,GAAG;MAEjB,IAAIiN,IAAI,EAAE;QACR,IAAI;UACF,IAAIE,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,aAAa,EAAE2K,IAAI,EAAE5I,WAAW,CAAC;UACrEpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;UAC3BlL,IAAI,CAACpD,EAAE,CAACqO,WAAW,GAAGC,QAAQ,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,OAAOC,EAAE,EAAE;UACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;QAC3B;MACF;MAEA,OAAO,IAAI,CAACvK,QAAQ,CAAC,YAAY,EAAEZ,IAAI,CAAC;IAC1C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,eAAe;IACpBhB,KAAK,EAAE,SAAS8R,aAAaA,CAAA,EAAG;MAC9B,IAAInK,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,eAAe,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACvD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,gBAAgB;IACrBhB,KAAK,EAAE,SAAS+R,cAAcA,CAAA,EAAG;MAC/B,IAAIpK,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,gBAAgB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACxD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,OAAO;IACZhB,KAAK,EAAE,SAASgS,KAAKA,CAAA,EAAG;MACtB,IAAIrK,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,OAAO,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC/C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,QAAQ;IACbhB,KAAK,EAAE,SAASiS,MAAMA,CAAA,EAAG;MACvB,IAAItK,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,QAAQ,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAChD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,OAAO;IACZhB,KAAK,EAAE,SAASqN,KAAKA,CAAA,EAAG;MACtB,IAAI1F,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,OAAO,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC/C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,aAAa;IAClBhB,KAAK,EAAE,SAASkS,WAAWA,CAACvF,MAAM,EAAE6D,IAAI,EAAE;MACxC,IAAI7I,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAAC6I,IAAI,GAAGA,IAAI;MAChB,OAAO,IAAI,CAAClJ,QAAQ,CAAC,aAAa,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACrD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,gBAAgB;IACrBhB,KAAK,EAAE,SAASoS,cAAcA,CAACzF,MAAM,EAAE0F,UAAU,EAAEzF,SAAS,EAAE;MAC5D,IAAIjF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAAC2K,YAAY,GAAGD,UAAU;MAC9B1K,IAAI,CAACwJ,UAAU,GAAGvE,SAAS;MAC3B,OAAO,IAAI,CAACtF,QAAQ,CAAC,gBAAgB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACxD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,iBAAiB;IACtBhB,KAAK,EAAE,SAASuS,eAAeA,CAAC5F,MAAM,EAAE0F,UAAU,EAAEG,UAAU,EAAE;MAC9D,IAAI7K,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAAC2K,YAAY,GAAGD,UAAU;MAC9B1K,IAAI,CAAC8K,WAAW,GAAGD,UAAU;MAC7B,OAAO,IAAI,CAAClL,QAAQ,CAAC,iBAAiB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACzD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,aAAa;IAClBhB,KAAK,EAAE,SAAS0S,WAAWA,CAAC/F,MAAM,EAAE0F,UAAU,EAAEzF,SAAS,EAAE;MACzD,IAAIjF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAAC2K,YAAY,GAAGD,UAAU;MAC9B1K,IAAI,CAACwJ,UAAU,GAAGvE,SAAS;MAC3B,OAAO,IAAI,CAACtF,QAAQ,CAAC,aAAa,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACrD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,cAAc;IACnBhB,KAAK,EAAE,SAAS2S,YAAYA,CAAChG,MAAM,EAAE0F,UAAU,EAAEG,UAAU,EAAE;MAC3D,IAAI7K,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAAC2K,YAAY,GAAGD,UAAU;MAC9B1K,IAAI,CAAC8K,WAAW,GAAGzO,SAAS,CAACwO,UAAU,CAAC;MACxC,OAAO,IAAI,CAAClL,QAAQ,CAAC,cAAc,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACtD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,WAAW;IAChBhB,KAAK,EAAE,SAAS4S,SAASA,CAACjG,MAAM,EAAEkG,KAAK,EAAE;MACvC,IAAIjO,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC6O,OAAO,GAAGxF,MAAM;MACxB,IAAI;QACF,IAAIiF,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,OAAO,EAAE8L,KAAK,EAAE/J,WAAW,CAAC;QAChEpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;QAC3BlL,IAAI,CAACpD,EAAE,CAACuP,KAAK,GAAGjB,QAAQ,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOC,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MACA,OAAO,IAAI,CAACvK,QAAQ,CAAC,WAAW,EAAEZ,IAAI,CAAC;IACzC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,WAAW;IAChBhB,KAAK,EAAE,SAAS8S,SAASA,CAACnG,MAAM,EAAEoG,KAAK,EAAE;MACvC,IAAInO,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MAED8B,IAAI,CAACpD,EAAE,CAAC6O,OAAO,GAAGxF,MAAM;MAExB,IAAI;QACF,IAAIiF,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,OAAO,EAAEgM,KAAK,EAAEjK,WAAW,CAAC;QAChEpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;QAC3BlL,IAAI,CAACpD,EAAE,CAACyP,KAAK,GAAGnB,QAAQ,CAAC,CAAC,CAAC;QAC3B,IAAI,CAACnL,oBAAoB,CAAC7B,OAAO,EAAE8B,IAAI,CAAC;MAC1C,CAAC,CAAC,OAAOmL,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MAEA,OAAO,IAAI,CAACvK,QAAQ,CAAC,WAAW,EAAEZ,IAAI,CAAC;IACzC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,cAAc;IACnBhB,KAAK,EAAE,SAASgT,YAAYA,CAACrG,MAAM,EAAEsG,GAAG,EAAE;MACxC,IAAIrO,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC6O,OAAO,GAAGxF,MAAM;MACxB,IAAI;QACF,IAAIiF,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,UAAU,EAAEkM,GAAG,EAAEnK,WAAW,CAAC;QACjEpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;QAC3BlL,IAAI,CAACpD,EAAE,CAAC4P,QAAQ,GAAGtB,QAAQ,CAAC,CAAC,CAAC;QAC9B,IAAI,CAACnL,oBAAoB,CAAC7B,OAAO,EAAE8B,IAAI,CAAC;MAC1C,CAAC,CAAC,OAAOmL,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MAEA,OAAO,IAAI,CAACvK,QAAQ,CAAC,cAAc,EAAEZ,IAAI,CAAC;IAC5C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,WAAW;IAChBhB,KAAK,EAAE,SAASmT,SAASA,CAACxG,MAAM,EAAEyG,KAAK,EAAE;MACvC,IAAIxO,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC6O,OAAO,GAAGxF,MAAM;MACxB,IAAI;QACF,IAAIiF,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,OAAO,EAAEqM,KAAK,EAAEtK,WAAW,CAAC;QAChEpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;QAC3BlL,IAAI,CAACpD,EAAE,CAAC8P,KAAK,GAAGxB,QAAQ,CAAC,CAAC,CAAC;QAC3B,IAAI,CAACnL,oBAAoB,CAAC7B,OAAO,EAAE8B,IAAI,CAAC;MAC1C,CAAC,CAAC,OAAOmL,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MACA,OAAO,IAAI,CAACvK,QAAQ,CAAC,WAAW,EAAEZ,IAAI,CAAC;IACzC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,eAAe;IACpBhB,KAAK,EAAE,SAASqT,aAAaA,CAAC1G,MAAM,EAAE2G,SAAS,EAAE;MAC/C,IAAI1O,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC6O,OAAO,GAAGxF,MAAM;MACxB,IAAI;QACF,IAAIiF,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,WAAW,EAAEuM,SAAS,EAAExK,WAAW,CAAC;QACxEpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;QAC3BlL,IAAI,CAACpD,EAAE,CAACgQ,SAAS,GAAG1B,QAAQ,CAAC,CAAC,CAAC;MACjC,CAAC,CAAC,OAAOC,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MACA,OAAO,IAAI,CAACvK,QAAQ,CAAC,eAAe,EAAEZ,IAAI,CAAC;IAC7C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,WAAW;IAChBhB,KAAK,EAAE,SAASuT,SAASA,CAAC5G,MAAM,EAAE6G,KAAK,EAAE;MACvC,IAAI5O,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC6O,OAAO,GAAGxF,MAAM;MACxB,IAAI;QACF,IAAIiF,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,OAAO,EAAEyM,KAAK,EAAE1K,WAAW,CAAC;QAChEpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;QAC3BlL,IAAI,CAACpD,EAAE,CAACkQ,KAAK,GAAG5B,QAAQ,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOC,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MACA,OAAO,IAAI,CAACvK,QAAQ,CAAC,WAAW,EAAEZ,IAAI,CAAC;IACzC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,eAAe;IACpBhB,KAAK,EAAE,SAASyT,aAAaA,CAAC9G,MAAM,EAAE+G,SAAS,EAAE;MAC/C,IAAI9O,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC6O,OAAO,GAAGxF,MAAM;MACxB,IAAI;QACF,IAAIiF,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,YAAY,EAAE2M,SAAS,EAAE5K,WAAW,CAAC;QACzEpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;QAC3BlL,IAAI,CAACpD,EAAE,CAACqQ,UAAU,GAAG/B,QAAQ,CAAC,CAAC,CAAC;QAChC,IAAI,CAACnL,oBAAoB,CAAC7B,OAAO,EAAE8B,IAAI,CAAC;MAC1C,CAAC,CAAC,OAAOmL,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MACA,OAAO,IAAI,CAACvK,QAAQ,CAAC,eAAe,EAAEZ,IAAI,CAAC;IAC7C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,gBAAgB;IACrBhB,KAAK,EAAE,SAAS4T,cAAcA,CAACjH,MAAM,EAAEkH,KAAK,EAAE;MAC5C,IAAIjP,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEpF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC6O,OAAO,GAAGxF,MAAM;MAExBjG,IAAI,CAACE,QAAQ,GAAG,CAAC,CAAC;MAClB,IAAIkN,UAAU,GAAG,EAAE;MACnB,IAAI1H,KAAK,GAAG,CAAC;MACb,IAAI2H,yBAAyB,GAAG,IAAI;MACpC,IAAIC,iBAAiB,GAAG,KAAK;MAC7B,IAAIC,cAAc,GAAGvU,SAAS;MAE9B,IAAI;QACF,KAAK,IAAIwU,SAAS,GAAGL,KAAK,CAAChV,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,EAAEqV,KAAK,EAAE,EAAEJ,yBAAyB,GAAG,CAACI,KAAK,GAAGD,SAAS,CAACrU,IAAI,CAAC,CAAC,EAAEC,IAAI,CAAC,EAAEiU,yBAAyB,GAAG,IAAI,EAAE;UACtJ,IAAIK,KAAK,GAAGD,KAAK,CAACnU,KAAK;UAEvB,IAAIqU,OAAO,GAAGhU,MAAM,CAACqH,MAAM,CAAC,CAAC,CAAC,EAAE0M,KAAK,CAAC;UACtC,OAAOC,OAAO,CAACR,KAAK;UACpB,OAAOQ,OAAO,CAACvL,WAAW;UAC1B,IAAI;YACF,IAAIjC,UAAU,GAAG0F,MAAM,CAACH,KAAK,CAAC;YAE9B,IAAIkI,gBAAgB,GAAG,IAAI,CAACvN,eAAe,CAACF,UAAU,EAAEuN,KAAK,CAACP,KAAK,EAAEO,KAAK,CAACtL,WAAW,CAAC;cACnFyL,gBAAgB,GAAGrV,cAAc,CAACoV,gBAAgB,EAAE,CAAC,CAAC;cACtD1N,QAAQ,GAAG2N,gBAAgB,CAAC,CAAC,CAAC;cAC9B7J,MAAM,GAAG6J,gBAAgB,CAAC,CAAC,CAAC;YAEhC,IAAI3N,QAAQ,EAAE;cACZF,IAAI,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAGD,QAAQ,CAACC,UAAU,CAAC;cAChDwN,OAAO,CAACR,KAAK,GAAG,WAAW,GAAGhN,UAAU;YAC1C,CAAC,MAAM;cACLwN,OAAO,CAACR,KAAK,GAAGnJ,MAAM;YACxB;UACF,CAAC,CAAC,OAAOmH,EAAE,EAAE;YACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;UAC3B;UACAiC,UAAU,CAAC/T,IAAI,CAACsU,OAAO,CAAC;UACxBjI,KAAK,EAAE;QACT;MACF,CAAC,CAAC,OAAOlM,GAAG,EAAE;QACZ8T,iBAAiB,GAAG,IAAI;QACxBC,cAAc,GAAG/T,GAAG;MACtB,CAAC,SAAS;QACR,IAAI;UACF,IAAI,CAAC6T,yBAAyB,IAAIG,SAAS,CAACM,MAAM,EAAE;YAClDN,SAAS,CAACM,MAAM,CAAC,CAAC;UACpB;QACF,CAAC,SAAS;UACR,IAAIR,iBAAiB,EAAE;YACrB,MAAMC,cAAc;UACtB;QACF;MACF;MAEAvN,IAAI,CAACpD,EAAE,CAACuQ,KAAK,GAAG7P,SAAS,CAAC8P,UAAU,CAAC;MAErC,OAAO,IAAI,CAACxM,QAAQ,CAAC,gBAAgB,EAAEZ,IAAI,CAAC;IAC9C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,cAAc;IACnBhB,KAAK,EAAE,SAASyU,YAAYA,CAAC9H,MAAM,EAAE+H,QAAQ,EAAEC,SAAS,EAAE;MACxD,IAAIhN,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAAC+M,QAAQ,GAAGA,QAAQ;MACxB/M,IAAI,CAACgN,SAAS,GAAGA,SAAS;MAC1B,OAAO,IAAI,CAACrN,QAAQ,CAAC,cAAc,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACtD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,yBAAyB;IAC9BhB,KAAK,EAAE,SAAS4U,uBAAuBA,CAACF,QAAQ,EAAEC,SAAS,EAAE;MAC3D,IAAIhN,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAAC+M,QAAQ,GAAGA,QAAQ;MACxB/M,IAAI,CAACgN,SAAS,GAAGA,SAAS;MAC1B,OAAO,IAAI,CAACrN,QAAQ,CAAC,yBAAyB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACjE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,yBAAyB;IAC9BhB,KAAK,EAAE,SAAS6U,uBAAuBA,CAAA,EAAG;MACxC,IAAIlN,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,yBAAyB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACjE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,WAAW;IAChBhB,KAAK,EAAE,SAAS8U,SAASA,CAACnI,MAAM,EAAE+H,QAAQ,EAAEC,SAAS,EAAEI,KAAK,EAAEC,OAAO,EAAE;MACrE,IAAIrN,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAAC+M,QAAQ,GAAGA,QAAQ;MACxB/M,IAAI,CAACgN,SAAS,GAAGA,SAAS;MAC1BhN,IAAI,CAACoN,KAAK,GAAGA,KAAK;MAClBpN,IAAI,CAACqN,OAAO,GAAGA,OAAO;MACtB,OAAO,IAAI,CAAC1N,QAAQ,CAAC,WAAW,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACnD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,aAAa;IAClBhB,KAAK,EAAE,SAASiV,WAAWA,CAACtI,MAAM,EAAEuI,WAAW,EAAEC,SAAS,EAAE;MAC1D,IAAIxN,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACyN,YAAY,GAAGF,WAAW;MAC/BvN,IAAI,CAAC0N,UAAU,GAAGF,SAAS;MAC3B,OAAO,IAAI,CAAC7N,QAAQ,CAAC,aAAa,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACrD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,UAAU;IACfhB,KAAK,EAAE,SAASsV,QAAQA,CAAC3I,MAAM,EAAE4I,QAAQ,EAAEC,WAAW,EAAE;MACtD,IAAI7N,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAAC4N,QAAQ,GAAGA,QAAQ;MACxB5N,IAAI,CAAC/C,OAAO,GAAGZ,SAAS,CAACwR,WAAW,CAAC;MACrC,OAAO,IAAI,CAAClO,QAAQ,CAAC,UAAU,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAClD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,UAAU;IACfhB,KAAK,EAAE,SAASyV,QAAQA,CAAC9I,MAAM,EAAE;MAC/B,IAAI/H,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEpF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC6O,OAAO,GAAGxF,MAAM;MACxB,IAAI;QACF,IAAIiF,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,MAAM,CAAC;QAC3CL,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOC,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MACA,OAAO,IAAI,CAACvK,QAAQ,CAAC,UAAU,EAAEZ,IAAI,CAAC;IACxC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,gBAAgB;IACrBhB,KAAK,EAAE,SAAS0V,cAAcA,CAAC/I,MAAM,EAAEgJ,MAAM,EAAE;MAC7C,IAAIhO,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACgO,MAAM,GAAGA,MAAM;MACpB,OAAO,IAAI,CAACrO,QAAQ,CAAC,gBAAgB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACxD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,oBAAoB;IACzBhB,KAAK,EAAE,SAAS4V,kBAAkBA,CAACjJ,MAAM,EAAEC,SAAS,EAAE;MACpD,IAAIjF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACwJ,UAAU,GAAGvE,SAAS;MAC3B,IAAIjF,IAAI,CAACkO,QAAQ,EAAE;QACjBlO,IAAI,CAACkO,QAAQ,GAAG7R,SAAS,CAAC2D,IAAI,CAACkO,QAAQ,CAAC;MAC1C;MACA,OAAO,IAAI,CAACvO,QAAQ,CAAC,oBAAoB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC5D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,sBAAsB;IAC3BhB,KAAK,EAAE,SAAS8V,oBAAoBA,CAACC,MAAM,EAAE;MAC3C,IAAIpO,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;;MAEjF;AACN;AACA;MACM,IAAI,CAAC,OAAO8C,IAAI,KAAK,WAAW,GAAG,WAAW,GAAG/I,OAAO,CAAC+I,IAAI,CAAC,MAAM,QAAQ,EAAE;QAC5E;QACA9D,SAAS,CAAC,oGAAoG,CAAC;QAC/G8D,IAAI,GAAG;UACL6J,MAAM,EAAE3M,SAAS,CAAC,CAAC,CAAC;UACpB0M,KAAK,EAAE1M,SAAS,CAAC,CAAC;QACpB,CAAC;QACD;MACF;MACA8C,IAAI,CAACqO,OAAO,GAAGD,MAAM;MACrB,OAAO,IAAI,CAACzO,QAAQ,CAAC,sBAAsB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC9D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,SAAS;IACdhB,KAAK,EAAE,SAAS4K,OAAOA,CAACF,MAAM,EAAE;MAC9B,IAAI/C,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACsO,OAAO,GAAGvL,MAAM;MACrB,OAAO,IAAI,CAACpD,QAAQ,CAAC,SAAS,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACjD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,eAAe;IACpBhB,KAAK,EAAE,SAASkW,aAAaA,CAACvJ,MAAM,EAAEoJ,MAAM,EAAE;MAC5C,IAAIpO,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACqO,OAAO,GAAGD,MAAM;MACrB,OAAO,IAAI,CAACzO,QAAQ,CAAC,eAAe,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACvD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,iBAAiB;IACtBhB,KAAK,EAAE,SAASmW,eAAeA,CAACxJ,MAAM,EAAEoJ,MAAM,EAAE;MAC9C,IAAIpO,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACqO,OAAO,GAAGD,MAAM;MACrB,OAAO,IAAI,CAACzO,QAAQ,CAAC,iBAAiB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACzD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,oBAAoB;IACzBhB,KAAK,EAAE,SAASoW,kBAAkBA,CAACzJ,MAAM,EAAEoJ,MAAM,EAAE;MACjD,IAAIpO,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACqO,OAAO,GAAGD,MAAM;MACrB,OAAO,IAAI,CAACzO,QAAQ,CAAC,oBAAoB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC5D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,mBAAmB;IACxBhB,KAAK,EAAE,SAASqW,iBAAiBA,CAAC1J,MAAM,EAAEoJ,MAAM,EAAE;MAChD,IAAIpO,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACqO,OAAO,GAAGD,MAAM;MACrB,OAAO,IAAI,CAACzO,QAAQ,CAAC,mBAAmB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC3D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,iCAAiC;IACtChB,KAAK,EAAE,SAASsW,+BAA+BA,CAAC3J,MAAM,EAAEoJ,MAAM,EAAEQ,WAAW,EAAE;MAC3E,IAAI5O,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACqO,OAAO,GAAGD,MAAM;MACrBpO,IAAI,CAAC6O,YAAY,GAAGD,WAAW;MAC/B,OAAO,IAAI,CAACjP,QAAQ,CAAC,iCAAiC,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACzE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,mBAAmB;IACxBhB,KAAK,EAAE,SAASyW,iBAAiBA,CAAC9J,MAAM,EAAE+J,YAAY,EAAE;MACtD,IAAI/O,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACgP,cAAc,GAAGD,YAAY;MAClC,OAAO,IAAI,CAACpP,QAAQ,CAAC,mBAAmB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC3D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,qBAAqB;IAC1BhB,KAAK,EAAE,SAAS4W,mBAAmBA,CAACjK,MAAM,EAAE+J,YAAY,EAAE;MACxD,IAAI/O,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACgP,cAAc,GAAGD,YAAY;MAClC,OAAO,IAAI,CAACpP,QAAQ,CAAC,qBAAqB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC7D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,oBAAoB;IACzBhB,KAAK,EAAE,SAAS6W,kBAAkBA,CAAClK,MAAM,EAAEmK,eAAe,EAAE;MAC1D,IAAInP,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACoP,WAAW,GAAG/S,SAAS,CAAC8S,eAAe,CAAC;MAC7C,OAAO,IAAI,CAACxP,QAAQ,CAAC,oBAAoB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC5D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,sBAAsB;IAC3BhB,KAAK,EAAE,SAASgX,oBAAoBA,CAACrK,MAAM,EAAE;MAC3C,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,sBAAsB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC9D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,sBAAsB;IAC3BhB,KAAK,EAAE,SAASiX,oBAAoBA,CAACtK,MAAM,EAAE;MAC3C,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,sBAAsB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC9D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,oBAAoB;IACzBhB,KAAK,EAAE,SAASkX,kBAAkBA,CAACvK,MAAM,EAAEwK,UAAU,EAAE;MACrD,IAAIxP,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACyP,WAAW,GAAGD,UAAU;MAC7B,OAAO,IAAI,CAAC7P,QAAQ,CAAC,oBAAoB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC5D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,sBAAsB;IAC3BhB,KAAK,EAAE,SAASqX,oBAAoBA,CAAC1K,MAAM,EAAEwK,UAAU,EAAE;MACvD,IAAIxP,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACyP,WAAW,GAAGD,UAAU;MAC7B,OAAO,IAAI,CAAC7P,QAAQ,CAAC,sBAAsB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC9D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,wBAAwB;IAC7BhB,KAAK,EAAE,SAASsX,sBAAsBA,CAAC3K,MAAM,EAAEoJ,MAAM,EAAE;MACrD,IAAIpO,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACqO,OAAO,GAAGD,MAAM;MACrB,OAAO,IAAI,CAACzO,QAAQ,CAAC,wBAAwB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAChE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,wBAAwB;IAC7BhB,KAAK,EAAE,SAASuX,sBAAsBA,CAAC5K,MAAM,EAAEoJ,MAAM,EAAE;MACrD,IAAIpO,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACqO,OAAO,GAAGD,MAAM;MACrB,OAAO,IAAI,CAACzO,QAAQ,CAAC,wBAAwB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAChE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,cAAc;IACnBhB,KAAK,EAAE,SAASwX,YAAYA,CAAC7K,MAAM,EAAEkG,KAAK,EAAE;MAC1C,IAAIjO,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC6O,OAAO,GAAGxF,MAAM;MACxB,IAAI;QACF,IAAIiF,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,OAAO,EAAE8L,KAAK,EAAE/J,WAAW,CAAC;QAChEpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;QAC3BlL,IAAI,CAACpD,EAAE,CAACuP,KAAK,GAAGjB,QAAQ,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOC,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MACA,OAAO,IAAI,CAACvK,QAAQ,CAAC,cAAc,EAAEZ,IAAI,CAAC;IAC5C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,iBAAiB;IACtBhB,KAAK,EAAE,SAASyX,eAAeA,CAAC9K,MAAM,EAAE;MACtC,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,iBAAiB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACzD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,cAAc;IACnBhB,KAAK,EAAE,SAAS0X,YAAYA,CAAC/K,MAAM,EAAEoI,KAAK,EAAE;MAC1C,IAAIpN,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACoN,KAAK,GAAGA,KAAK;MAClB,OAAO,IAAI,CAACzN,QAAQ,CAAC,cAAc,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACtD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,oBAAoB;IACzBhB,KAAK,EAAE,SAAS2X,kBAAkBA,CAAChL,MAAM,EAAElE,WAAW,EAAE;MACtD,IAAId,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACc,WAAW,GAAGA,WAAW;MAC9B,OAAO,IAAI,CAACnB,QAAQ,CAAC,oBAAoB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC5D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,gBAAgB;IACrBhB,KAAK,EAAE,SAAS4X,cAAcA,CAACjL,MAAM,EAAEC,SAAS,EAAE;MAChD,IAAIjF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACwJ,UAAU,GAAGvE,SAAS;MAC3B,OAAO,IAAI,CAACtF,QAAQ,CAAC,gBAAgB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACxD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,kBAAkB;IACvBhB,KAAK,EAAE,SAAS6X,gBAAgBA,CAAClL,MAAM,EAAE;MACvC,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,kBAAkB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC1D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,sBAAsB;IAC3BhB,KAAK,EAAE,SAAS8X,oBAAoBA,CAACnL,MAAM,EAAE;MAC3C,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,sBAAsB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC9D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,WAAW;IAChBhB,KAAK,EAAE,SAAS+X,SAASA,CAACpL,MAAM,EAAE;MAChC,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,WAAW,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACnD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,SAAS;IACdhB,KAAK,EAAE,SAASgY,OAAOA,CAACrL,MAAM,EAAE;MAC9B,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,SAAS,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACjD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,uBAAuB;IAC5BhB,KAAK,EAAE,SAASiY,qBAAqBA,CAACtL,MAAM,EAAE;MAC5C,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,uBAAuB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC/D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,oBAAoB;IACzBhB,KAAK,EAAE,SAASkY,kBAAkBA,CAACvL,MAAM,EAAE;MACzC,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,oBAAoB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC5D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,eAAe;IACpBhB,KAAK,EAAE,SAASmY,aAAaA,CAACxL,MAAM,EAAEoJ,MAAM,EAAE;MAC5C,IAAIpO,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACqO,OAAO,GAAGD,MAAM;MACrB,OAAO,IAAI,CAACzO,QAAQ,CAAC,eAAe,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACvD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,mBAAmB;IACxBhB,KAAK,EAAE,SAASoY,iBAAiBA,CAACzL,MAAM,EAAE0L,cAAc,EAAE;MACxD,IAAI1Q,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAAC2Q,gBAAgB,GAAGD,cAAc;MACtC,OAAO,IAAI,CAAC/Q,QAAQ,CAAC,mBAAmB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC3D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,sBAAsB;IAC3BhB,KAAK,EAAE,SAASuY,oBAAoBA,CAAC5L,MAAM,EAAE;MAC3C,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,sBAAsB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC9D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,2BAA2B;IAChChB,KAAK,EAAE,SAASwY,yBAAyBA,CAAC7L,MAAM,EAAE;MAChD,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,2BAA2B,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACnE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,kBAAkB;IACvBhB,KAAK,EAAE,SAASyY,gBAAgBA,CAAC9L,MAAM,EAAE+L,IAAI,EAAE;MAC7C,IAAI/Q,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAAC+Q,IAAI,GAAGA,IAAI;MAChB,OAAO,IAAI,CAACpR,QAAQ,CAAC,kBAAkB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC1D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,gBAAgB;IACrBhB,KAAK,EAAE,SAAS2Y,cAAcA,CAAChM,MAAM,EAAEiM,eAAe,EAAE;MACtD,IAAIjR,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACkR,iBAAiB,GAAGD,eAAe;MACxC,OAAO,IAAI,CAACtR,QAAQ,CAAC,gBAAgB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACxD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,iBAAiB;IACtBhB,KAAK,EAAE,SAAS8Y,eAAeA,CAACnM,MAAM,EAAEiM,eAAe,EAAE;MACvD,IAAIjR,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACkR,iBAAiB,GAAGD,eAAe;MACxC,OAAO,IAAI,CAACtR,QAAQ,CAAC,iBAAiB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACzD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,kBAAkB;IACvBhB,KAAK,EAAE,SAAS+Y,gBAAgBA,CAACpM,MAAM,EAAEiM,eAAe,EAAE;MACxD,IAAIjR,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACkR,iBAAiB,GAAGD,eAAe;MACxC,OAAO,IAAI,CAACtR,QAAQ,CAAC,kBAAkB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC1D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,kBAAkB;IACvBhB,KAAK,EAAE,SAASgZ,gBAAgBA,CAACrM,MAAM,EAAEiM,eAAe,EAAE;MACxD,IAAIjR,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACkR,iBAAiB,GAAGD,eAAe;MACxC,OAAO,IAAI,CAACtR,QAAQ,CAAC,kBAAkB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC1D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,4BAA4B;IACjChB,KAAK,EAAE,SAASiZ,0BAA0BA,CAACtM,MAAM,EAAEiM,eAAe,EAAE;MAClE,IAAIjR,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACkR,iBAAiB,GAAGD,eAAe;MACxC,OAAO,IAAI,CAACtR,QAAQ,CAAC,4BAA4B,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACpE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,uBAAuB;IAC5BhB,KAAK,EAAE,SAASkZ,qBAAqBA,CAACvM,MAAM,EAAE+L,IAAI,EAAE;MAClD,IAAI/Q,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAAC+Q,IAAI,GAAGA,IAAI;MAChB,OAAO,IAAI,CAACpR,QAAQ,CAAC,uBAAuB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC/D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,wBAAwB;IAC7BhB,KAAK,EAAE,SAASmZ,sBAAsBA,CAACxM,MAAM,EAAE;MAC7C,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,wBAAwB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAChE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,yBAAyB;IAC9BhB,KAAK,EAAE,SAASoZ,uBAAuBA,CAACzM,MAAM,EAAE;MAC9C,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,yBAAyB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACjE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,uBAAuB;IAC5BhB,KAAK,EAAE,SAASqZ,qBAAqBA,CAAC1M,MAAM,EAAE;MAC5C,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,uBAAuB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC/D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,yBAAyB;IAC9BhB,KAAK,EAAE,SAASsZ,uBAAuBA,CAAC3M,MAAM,EAAE;MAC9C,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,yBAAyB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACjE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,mCAAmC;IACxChB,KAAK,EAAE,SAASuZ,iCAAiCA,CAAC5M,MAAM,EAAE;MACxD,IAAIhF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrB,OAAO,IAAI,CAACrF,QAAQ,CAAC,yBAAyB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACjE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,qBAAqB;IAC1BhB,KAAK,EAAE,SAASwZ,mBAAmBA,CAACC,eAAe,EAAE;MACnD,IAAI9R,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;;MAEjF;AACN;AACA;MACM,IAAI,CAAC,OAAO8C,IAAI,KAAK,WAAW,GAAG,WAAW,GAAG/I,OAAO,CAAC+I,IAAI,CAAC,MAAM,QAAQ,EAAE;QAC5E;QACA9D,SAAS,CAAC,8GAA8G,CAAC;QACzH8D,IAAI,GAAG;UACL+R,iBAAiB,EAAE7U,SAAS,CAAC,CAAC,CAAC;UAC/B2L,IAAI,EAAE3L,SAAS,CAAC,CAAC,CAAC;UAClB8U,UAAU,EAAE9U,SAAS,CAAC,CAAC;QACzB,CAAC;QACD;MACF;MACA;AACN;AACA;MACM,IAAI,CAAC,OAAO4U,eAAe,KAAK,WAAW,GAAG,WAAW,GAAG7a,OAAO,CAAC6a,eAAe,CAAC,MAAM,QAAQ,EAAE;QAClG;QACA5V,SAAS,CAAC,uFAAuF,CAAC;QAClG8D,IAAI,GAAG8R,eAAe;QACtB;MACF,CAAC,MAAM;QACL9R,IAAI,CAAC+R,iBAAiB,GAAGD,eAAe;MAC1C;MACA,OAAO,IAAI,CAACnS,QAAQ,CAAC,qBAAqB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC7D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,mBAAmB;IACxBhB,KAAK,EAAE,SAAS4Z,iBAAiBA,CAACjN,MAAM,EAAEkN,MAAM,EAAE;MAChD,IAAIlS,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACwJ,UAAU,GAAG0I,MAAM;MACxB,OAAO,IAAI,CAACvS,QAAQ,CAAC,mBAAmB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC3D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,uBAAuB;IAC5BhB,KAAK,EAAE,SAAS8Z,qBAAqBA,CAACC,oBAAoB,EAAE;MAC1D,IAAIpS,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACqS,sBAAsB,GAAGD,oBAAoB;MAClD,OAAO,IAAI,CAACzS,QAAQ,CAAC,uBAAuB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC/D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,eAAe;IACpBhB,KAAK,EAAE,SAASia,aAAaA,CAACC,QAAQ,EAAE;MACtC,IAAIvS,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACuS,QAAQ,GAAGlW,SAAS,CAACkW,QAAQ,CAAC;MAEnC,IAAIvS,IAAI,CAACwS,KAAK,EAAE;QACdxS,IAAI,CAACwS,KAAK,GAAGnW,SAAS,CAAC2D,IAAI,CAACwS,KAAK,CAAC;MACpC;MAEA,OAAO,IAAI,CAAC7S,QAAQ,CAAC,eAAe,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACvD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,kBAAkB;IACvBhB,KAAK,EAAE,SAASoa,gBAAgBA,CAAA,EAAG;MACjC,IAAIzS,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,kBAAkB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC1D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,eAAe;IACpBhB,KAAK,EAAE,SAASqa,aAAaA,CAAA,EAAG;MAC9B,IAAI1S,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,IAAI8C,IAAI,CAACwS,KAAK,EAAE;QACdxS,IAAI,CAACwS,KAAK,GAAGnW,SAAS,CAAC2D,IAAI,CAACwS,KAAK,CAAC;MACpC;MACA,OAAO,IAAI,CAAC7S,QAAQ,CAAC,eAAe,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACvD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,WAAW;IAChBhB,KAAK,EAAE,SAASsa,SAASA,CAAA,EAAG;MAC1B,IAAI3S,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,WAAW,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACnD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,WAAW;IAChBhB,KAAK,EAAE,SAASua,SAASA,CAAA,EAAG;MAC1B,IAAI5S,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,WAAW,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACnD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,kBAAkB;IACvBhB,KAAK,EAAE,SAASwa,gBAAgBA,CAAA,EAAG;MACjC,IAAI7S,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,kBAAkB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC1D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,kBAAkB;IACvBhB,KAAK,EAAE,SAASya,gBAAgBA,CAAA,EAAG;MACjC,IAAI9S,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,kBAAkB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC1D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,uBAAuB;IAC5BhB,KAAK,EAAE,SAAS0a,qBAAqBA,CAAA,EAAG;MACtC,IAAI/S,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,uBAAuB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC/D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,uBAAuB;IAC5BhB,KAAK,EAAE,SAAS2a,qBAAqBA,CAAA,EAAG;MACtC,IAAIhT,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,uBAAuB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC/D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,mBAAmB;IACxBhB,KAAK,EAAE,SAAS4a,iBAAiBA,CAAA,EAAG;MAClC,IAAIjT,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,mBAAmB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC3D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,mBAAmB;IACxBhB,KAAK,EAAE,SAAS6a,iBAAiBA,CAAA,EAAG;MAClC,IAAIlT,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,mBAAmB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC3D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,iCAAiC;IACtChB,KAAK,EAAE,SAAS8a,+BAA+BA,CAAA,EAAG;MAChD,IAAInT,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,iCAAiC,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACzE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,iCAAiC;IACtChB,KAAK,EAAE,SAAS+a,+BAA+BA,CAAA,EAAG;MAChD,IAAIpT,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,OAAO,IAAI,CAACyC,QAAQ,CAAC,iCAAiC,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACzE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,iBAAiB;IACtBhB,KAAK,EAAE,SAASgb,eAAeA,CAACxK,IAAI,EAAE;MACpC,IAAI7I,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAAC6I,IAAI,GAAGA,IAAI;MAChB,OAAO,IAAI,CAAClJ,QAAQ,CAAC,iBAAiB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACzD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,oBAAoB;IACzBhB,KAAK,EAAE,SAASib,kBAAkBA,CAAC7J,OAAO,EAAE;MAC1C,IAAIzJ,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACyJ,OAAO,GAAGA,OAAO;MACtB,OAAO,IAAI,CAAC9J,QAAQ,CAAC,oBAAoB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC5D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,kBAAkB;IACvBhB,KAAK,EAAE,SAASkb,gBAAgBA,CAACrH,KAAK,EAAE;MACtC,IAAIlM,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF,IAAIsW,WAAW,GAAG,eAAe;MAEjC,IAAI,OAAOtH,KAAK,CAACA,KAAK,KAAK,QAAQ,IAAIsH,WAAW,CAACC,IAAI,CAACvH,KAAK,CAACA,KAAK,CAAC,EAAE;QACpE,IAAInN,IAAI,GAAG;UACTpD,EAAE,EAAEqE;QACN,CAAC;QAEDjB,IAAI,CAACE,QAAQ,GAAG,CAAC,CAAC;QAElB,IAAIyN,OAAO,GAAGhU,MAAM,CAACqH,MAAM,CAAC,CAAC,CAAC,EAAEmM,KAAK,CAAC;QACtC,OAAOQ,OAAO,CAACR,KAAK;QAEpB,IAAI;UACF,IAAIhN,UAAU,GAAG0F,MAAM,CAAC,CAAC,CAAC;UAE1B,IAAI8O,gBAAgB,GAAG,IAAI,CAACtU,eAAe,CAACF,UAAU,EAAEgN,KAAK,CAACA,KAAK,CAAC7M,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,EAAE6M,KAAK,CAAC/K,WAAW,CAAC;YAC5GwS,gBAAgB,GAAGpc,cAAc,CAACmc,gBAAgB,EAAE,CAAC,CAAC;YACtDzU,QAAQ,GAAG0U,gBAAgB,CAAC,CAAC,CAAC;UAElC,IAAI1U,QAAQ,EAAE;YACZF,IAAI,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAGD,QAAQ,CAACC,UAAU,CAAC;YAChDwN,OAAO,CAACR,KAAK,GAAG,WAAW,GAAGhN,UAAU;UAC1C,CAAC,MAAM;YACL,MAAM,IAAI/D,MAAM,CAAC2E,UAAU,CAAC,oDAAoD,GAAGoM,KAAK,CAAChL,IAAI,CAAC;UAChG;QACF,CAAC,CAAC,OAAOgJ,EAAE,EAAE;UACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;QAC3B;QAEAnL,IAAI,CAACpD,EAAE,CAACuQ,KAAK,GAAG7P,SAAS,CAACqQ,OAAO,CAAC;QAElC,OAAO,IAAI,CAAC/M,QAAQ,CAAC,kBAAkB,EAAEZ,IAAI,CAAC;MAChD;MAEAiB,IAAI,CAACkM,KAAK,GAAG7P,SAAS,CAAC6P,KAAK,CAAC;MAE7B,OAAO,IAAI,CAACvM,QAAQ,CAAC,kBAAkB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC1D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,wBAAwB;IAC7BhB,KAAK,EAAE,SAASub,sBAAsBA,CAACtV,WAAW,EAAE;MAClD,IAAI0B,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACzB,YAAY,GAAGD,WAAW;MAC/B,OAAO,IAAI,CAACqB,QAAQ,CAAC,wBAAwB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAChE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,UAAU;IACfhB,KAAK,EAAE,SAASwb,QAAQA,CAAC7O,MAAM,EAAEkN,MAAM,EAAE;MACvC,IAAIlS,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACwJ,UAAU,GAAG0I,MAAM;MACxB,OAAO,IAAI,CAACvS,QAAQ,CAAC,UAAU,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAClD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,aAAa;IAClBhB,KAAK,EAAE,SAASyb,WAAWA,CAAC9O,MAAM,EAAE+O,OAAO,EAAE;MAC3C,IAAI9W,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC6O,OAAO,GAAGxF,MAAM;MACxB,IAAI;QACF,IAAIiF,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,SAAS,EAAE2U,OAAO,EAAE5S,WAAW,CAAC;QACpEpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;QAC3BlL,IAAI,CAACpD,EAAE,CAACoY,OAAO,GAAG9J,QAAQ,CAAC,CAAC,CAAC;MAC/B,CAAC,CAAC,OAAOC,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MACA,OAAO,IAAI,CAACvK,QAAQ,CAAC,aAAa,EAAEZ,IAAI,CAAC;IAC3C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,eAAe;IACpBhB,KAAK,EAAE,SAAS2b,aAAaA,CAACjD,IAAI,EAAE;MAClC,IAAI/Q,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAAC+Q,IAAI,GAAGA,IAAI;MAChB,OAAO,IAAI,CAACpR,QAAQ,CAAC,eAAe,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACvD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,wBAAwB;IAC7BhB,KAAK,EAAE,SAAS4b,sBAAsBA,CAACC,cAAc,EAAE;MACrD,IAAIlU,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACmU,gBAAgB,GAAG9X,SAAS,CAAC6X,cAAc,CAAC;MACjD,OAAO,IAAI,CAACvU,QAAQ,CAAC,wBAAwB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAChE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,mBAAmB;IACxBhB,KAAK,EAAE,SAAS+b,iBAAiBA,CAAChG,MAAM,EAAE2F,OAAO,EAAE;MACjD,IAAIM,aAAa,GAAGnX,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ;MAChG,IAAID,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC0S,OAAO,GAAGD,MAAM;MACxBrP,IAAI,CAACpD,EAAE,CAAC2Y,cAAc,GAAGD,aAAa;MAEtC,IAAI;QACF,IAAIpK,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,SAAS,EAAE2U,OAAO,EAAE5S,WAAW,CAAC;QACpEpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;QAC3BlL,IAAI,CAACpD,EAAE,CAACoY,OAAO,GAAG9J,QAAQ,CAAC,CAAC,CAAC;MAC/B,CAAC,CAAC,OAAOC,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MACA,OAAO,IAAI,CAACvK,QAAQ,CAAC,mBAAmB,EAAEZ,IAAI,CAAC;IACjD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,qBAAqB;IAC1BhB,KAAK,EAAE,SAASkc,mBAAmBA,CAACnG,MAAM,EAAE2C,IAAI,EAAE3D,KAAK,EAAEoH,UAAU,EAAEC,MAAM,EAAE;MAC3E,IAAIxX,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC0S,OAAO,GAAGD,MAAM;MACxBrP,IAAI,CAACpD,EAAE,CAACoV,IAAI,GAAGA,IAAI;MACnBhS,IAAI,CAACpD,EAAE,CAACyR,KAAK,GAAGA,KAAK;MACrBrO,IAAI,CAACpD,EAAE,CAAC8Y,MAAM,GAAGA,MAAM;MACvB1V,IAAI,CAACpD,EAAE,CAAC+Y,aAAa,GAAGrY,SAAS,CAACY,OAAO,CAACyX,aAAa,CAAC;MACxD,IAAI;QACF,IAAIzK,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,aAAa,EAAEoV,UAAU,EAAErT,WAAW,CAAC;QAC3EpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;QAC3BlL,IAAI,CAACpD,EAAE,CAACgZ,WAAW,GAAG1K,QAAQ,CAAC,CAAC,CAAC;MACnC,CAAC,CAAC,OAAOC,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MACA,OAAO,IAAI,CAACvK,QAAQ,CAAC,qBAAqB,EAAEZ,IAAI,CAAC;IACnD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,iBAAiB;IACtBhB,KAAK,EAAE,SAASuc,eAAeA,CAACxG,MAAM,EAAE2C,IAAI,EAAEgD,OAAO,EAAEU,MAAM,EAAE;MAC7D,IAAII,WAAW,GAAG3X,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,aAAa;MACnG,IAAID,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC0S,OAAO,GAAGD,MAAM;MACxBrP,IAAI,CAACpD,EAAE,CAACoV,IAAI,GAAGA,IAAI;MACnBhS,IAAI,CAACpD,EAAE,CAAC8Y,MAAM,GAAGA,MAAM;MACvB1V,IAAI,CAACpD,EAAE,CAAC+Y,aAAa,GAAGrY,SAAS,CAACY,OAAO,CAACyX,aAAa,CAAC;MAExD,IAAI,OAAOG,WAAW,KAAK,QAAQ,IAAI,CAAC,aAAa,EAAE,aAAa,EAAE,cAAc,CAAC,CAAChY,OAAO,CAACgY,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;QACjH,OAAOjV,OAAO,CAACC,MAAM,CAAC,IAAIiV,KAAK,CAAC,6FAA6F,CAAC,CAAC;MACjI;MAEA,IAAI;QACF,IAAI7K,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAACyV,WAAW,EAAEd,OAAO,EAAE5S,WAAW,CAAC;QACtEpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;QAC3BlL,IAAI,CAACpD,EAAE,CAACkZ,WAAW,CAAC,GAAG5K,QAAQ,CAAC,CAAC,CAAC;MACpC,CAAC,CAAC,OAAOC,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MACA,OAAO,IAAI,CAACvK,QAAQ,CAAC,iBAAiB,EAAEZ,IAAI,CAAC;IAC/C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,yBAAyB;IAC9BhB,KAAK,EAAE,SAAS0c,uBAAuBA,CAAChB,OAAO,EAAEiB,QAAQ,EAAE;MACzD,IAAIhV,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAAC+T,OAAO,GAAGA,OAAO;MACtB/T,IAAI,CAACgV,QAAQ,GAAGA,QAAQ;MACxB,OAAO,IAAI,CAACrV,QAAQ,CAAC,yBAAyB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACjE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,sBAAsB;IAC3BhB,KAAK,EAAE,SAAS4c,oBAAoBA,CAAClB,OAAO,EAAE;MAC5C,IAAI/T,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAAC+T,OAAO,GAAGA,OAAO;MACtB,OAAO,IAAI,CAACpU,QAAQ,CAAC,sBAAsB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC9D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,qBAAqB;IAC1BhB,KAAK,EAAE,SAAS6c,mBAAmBA,CAAC9G,MAAM,EAAE2C,IAAI,EAAEoE,UAAU,EAAE;MAC5D,IAAInV,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACqO,OAAO,GAAGD,MAAM;MACrBpO,IAAI,CAAC+Q,IAAI,GAAGA,IAAI;MAChB/Q,IAAI,CAACoV,WAAW,GAAGD,UAAU;MAC7B,OAAO,IAAI,CAACxV,QAAQ,CAAC,sBAAsB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC9D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,qBAAqB;IAC1BhB,KAAK,EAAE,SAASgd,mBAAmBA,CAACtB,OAAO,EAAEuB,SAAS,EAAE;MACtD,IAAItV,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAAC+T,OAAO,GAAGA,OAAO;MACtB/T,IAAI,CAACuV,UAAU,GAAGlZ,SAAS,CAACiZ,SAAS,CAAC;MACtC,OAAO,IAAI,CAAC3V,QAAQ,CAAC,qBAAqB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC7D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,oBAAoB;IACzBhB,KAAK,EAAE,SAASmd,kBAAkBA,CAACzB,OAAO,EAAE;MAC1C,IAAI/T,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAAC+T,OAAO,GAAGA,OAAO;MACtB,IAAI/T,IAAI,CAACyV,QAAQ,EAAE;QACjBzV,IAAI,CAACyV,QAAQ,GAAGpZ,SAAS,CAAC2D,IAAI,CAACyV,QAAQ,CAAC;MAC1C;MACA,OAAO,IAAI,CAAC9V,QAAQ,CAAC,oBAAoB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC5D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,wBAAwB;IAC7BhB,KAAK,EAAE,SAASqd,sBAAsBA,CAAC3B,OAAO,EAAE;MAC9C,IAAI/T,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAAC+T,OAAO,GAAGA,OAAO;MACtB,IAAI/T,IAAI,CAAC0U,aAAa,EAAE;QACtB1U,IAAI,CAAC0U,aAAa,GAAGrY,SAAS,CAAC2D,IAAI,CAAC0U,aAAa,CAAC;MACpD;MACA,OAAO,IAAI,CAAC/U,QAAQ,CAAC,wBAAwB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAChE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,oBAAoB;IACzBhB,KAAK,EAAE,SAASsd,kBAAkBA,CAAC5E,IAAI,EAAE3D,KAAK,EAAE;MAC9C,IAAIpN,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAAC+Q,IAAI,GAAGA,IAAI;MAChB/Q,IAAI,CAACoN,KAAK,GAAGA,KAAK;MAClB,OAAO,IAAI,CAACzN,QAAQ,CAAC,oBAAoB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC5D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,wBAAwB;IAC7BhB,KAAK,EAAE,SAASud,sBAAsBA,CAACxH,MAAM,EAAE2C,IAAI,EAAExR,SAAS,EAAE;MAC9D,IAAItC,OAAO,GAAGC,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,IAAIiE,WAAW,GAAGjE,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAExF,IAAI6B,IAAI,GAAG;QACTpD,EAAE,EAAEsB;MACN,CAAC;MACD8B,IAAI,CAACpD,EAAE,CAAC0S,OAAO,GAAGD,MAAM;MACxBrP,IAAI,CAACpD,EAAE,CAACoV,IAAI,GAAGA,IAAI;MACnBhS,IAAI,CAACpD,EAAE,CAAC+Y,aAAa,GAAGrY,SAAS,CAACY,OAAO,CAACyX,aAAa,CAAC;MACxD,IAAI;QACF,IAAIzK,QAAQ,GAAG,IAAI,CAAC7K,eAAe,CAAC,WAAW,EAAEG,SAAS,EAAE4B,WAAW,CAAC;QACxEpC,IAAI,CAACE,QAAQ,GAAGgL,QAAQ,CAAC,CAAC,CAAC;QAC3BlL,IAAI,CAACpD,EAAE,CAAC4D,SAAS,GAAG0K,QAAQ,CAAC,CAAC,CAAC;MACjC,CAAC,CAAC,OAAOC,EAAE,EAAE;QACX,OAAOtK,OAAO,CAACC,MAAM,CAACqK,EAAE,CAAC;MAC3B;MACA,OAAO,IAAI,CAACvK,QAAQ,CAAC,wBAAwB,EAAEZ,IAAI,CAAC;IACtD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1F,GAAG,EAAE,mCAAmC;IACxChB,KAAK,EAAE,SAASwd,iCAAiCA,CAAC9E,IAAI,EAAE;MACtD,IAAI/Q,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAAC+Q,IAAI,GAAGA,IAAI;MAChB,OAAO,IAAI,CAACpR,QAAQ,CAAC,mCAAmC,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC3E;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,kBAAkB;IACvBhB,KAAK,EAAE,SAASyd,gBAAgBA,CAAC/E,IAAI,EAAE;MACrC,IAAI/Q,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAAC+Q,IAAI,GAAGA,IAAI;MAChB,OAAO,IAAI,CAACpR,QAAQ,CAAC,kBAAkB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC1D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,mBAAmB;IACxBhB,KAAK,EAAE,SAAS0d,iBAAiBA,CAACC,aAAa,EAAEC,OAAO,EAAE;MACxD,IAAIjW,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACkW,eAAe,GAAGF,aAAa;MACpChW,IAAI,CAACiW,OAAO,GAAG5Z,SAAS,CAAC4Z,OAAO,CAAC;MACjC,OAAO,IAAI,CAACtW,QAAQ,CAAC,mBAAmB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC3D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,mBAAmB;IACxBhB,KAAK,EAAE,SAAS8d,iBAAiBA,CAACC,aAAa,EAAEzV,MAAM,EAAE;MACvD,IAAIX,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACqW,gBAAgB,GAAGD,aAAa;MACrCpW,IAAI,CAACW,MAAM,GAAGtE,SAAS,CAACsE,MAAM,CAAC;MAC/B,OAAO,IAAI,CAAChB,QAAQ,CAAC,mBAAmB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC3D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,aAAa;IAClBhB,KAAK,EAAE,SAASie,WAAWA,CAACtR,MAAM,EAAEoI,KAAK,EAAEtM,WAAW,EAAE4L,OAAO,EAAE6J,aAAa,EAAEC,QAAQ,EAAEC,MAAM,EAAE;MAChG,IAAIzW,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACoN,KAAK,GAAGA,KAAK;MAClBpN,IAAI,CAACc,WAAW,GAAGA,WAAW;MAC9Bd,IAAI,CAAC0M,OAAO,GAAGA,OAAO;MACtB1M,IAAI,CAAC0W,cAAc,GAAGH,aAAa;MACnCvW,IAAI,CAACwW,QAAQ,GAAGA,QAAQ;MACxBxW,IAAI,CAACyW,MAAM,GAAGpa,SAAS,CAACoa,MAAM,CAAC;MAC/BzW,IAAI,CAAC2W,aAAa,GAAGta,SAAS,CAAC2D,IAAI,CAAC2W,aAAa,CAAC;MAClD,IAAI3W,IAAI,CAAC4W,qBAAqB,EAAE;QAC9B5W,IAAI,CAAC4W,qBAAqB,GAAGva,SAAS,CAAC2D,IAAI,CAAC4W,qBAAqB,CAAC;MACpE;MACA,OAAO,IAAI,CAACjX,QAAQ,CAAC,aAAa,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACrD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,mBAAmB;IACxBhB,KAAK,EAAE,SAASwe,iBAAiBA,CAACzJ,KAAK,EAAEtM,WAAW,EAAE4L,OAAO,EAAE6J,aAAa,EAAEC,QAAQ,EAAEC,MAAM,EAAE;MAC9F,IAAIzW,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACoN,KAAK,GAAGA,KAAK;MAClBpN,IAAI,CAACc,WAAW,GAAGA,WAAW;MAC9Bd,IAAI,CAAC0M,OAAO,GAAGA,OAAO;MACtB1M,IAAI,CAAC0W,cAAc,GAAGH,aAAa;MACnCvW,IAAI,CAACwW,QAAQ,GAAGA,QAAQ;MACxBxW,IAAI,CAACyW,MAAM,GAAGpa,SAAS,CAACoa,MAAM,CAAC;MAC/B,OAAO,IAAI,CAAC9W,QAAQ,CAAC,mBAAmB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC3D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,qBAAqB;IAC1BhB,KAAK,EAAE,SAASye,mBAAmBA,CAACC,eAAe,EAAErW,EAAE,EAAE;MACvD,IAAIV,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACgX,iBAAiB,GAAGD,eAAe;MACxC/W,IAAI,CAACU,EAAE,GAAGA,EAAE;MACZV,IAAI,CAACiX,gBAAgB,GAAG5a,SAAS,CAAC2D,IAAI,CAACiX,gBAAgB,CAAC;MACxD,OAAO,IAAI,CAACtX,QAAQ,CAAC,qBAAqB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC7D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,wBAAwB;IAC7BhB,KAAK,EAAE,SAAS6e,sBAAsBA,CAACC,kBAAkB,EAAEzW,EAAE,EAAE;MAC7D,IAAIV,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACoX,qBAAqB,GAAGD,kBAAkB;MAC/CnX,IAAI,CAACU,EAAE,GAAGA,EAAE;MACZ,OAAO,IAAI,CAACf,QAAQ,CAAC,wBAAwB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAChE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,UAAU;IACfhB,KAAK,EAAE,SAASgf,QAAQA,CAACrS,MAAM,EAAEsS,aAAa,EAAE;MAC9C,IAAItX,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACuX,eAAe,GAAGD,aAAa;MACpC,OAAO,IAAI,CAAC3X,QAAQ,CAAC,UAAU,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAClD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,cAAc;IACnBhB,KAAK,EAAE,SAASmf,YAAYA,CAACpJ,MAAM,EAAEqJ,KAAK,EAAE;MAC1C,IAAIzX,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACqO,OAAO,GAAGD,MAAM;MACrBpO,IAAI,CAACyX,KAAK,GAAGA,KAAK;MAClB,OAAO,IAAI,CAAC9X,QAAQ,CAAC,cAAc,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACtD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,mBAAmB;IACxBhB,KAAK,EAAE,SAASqf,iBAAiBA,CAACtJ,MAAM,EAAE;MACxC,IAAIpO,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACqO,OAAO,GAAGD,MAAM;MACrB,OAAO,IAAI,CAACzO,QAAQ,CAAC,mBAAmB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC3D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,eAAe;IACpBhB,KAAK,EAAE,SAASsf,aAAaA,CAAC3S,MAAM,EAAEC,SAAS,EAAE;MAC/C,IAAIjF,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAACwJ,UAAU,GAAGvE,SAAS;MAC3B,OAAO,IAAI,CAACtF,QAAQ,CAAC,eAAe,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACvD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD3G,GAAG,EAAE,gBAAgB;IACrBhB,KAAK,EAAE,SAASuf,cAAcA,CAAC5S,MAAM,EAAE6F,UAAU,EAAE;MACjD,IAAI7K,IAAI,GAAG9C,SAAS,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,SAAS,CAAC,CAAC,CAAC,KAAKnF,SAAS,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjF8C,IAAI,CAACwK,OAAO,GAAGxF,MAAM;MACrBhF,IAAI,CAAC8K,WAAW,GAAGzO,SAAS,CAACwO,UAAU,CAAC;MACxC,OAAO,IAAI,CAAClL,QAAQ,CAAC,gBAAgB,EAAE;QAAEK,IAAI,EAAEA;MAAK,CAAC,CAAC;IACxD;EACF,CAAC,CAAC,CAAC;EAEH,OAAOxD,WAAW;AACpB,CAAC,CAACjB,YAAY,CAAC;AAEfsc,MAAM,CAACC,OAAO,GAAGtb,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}