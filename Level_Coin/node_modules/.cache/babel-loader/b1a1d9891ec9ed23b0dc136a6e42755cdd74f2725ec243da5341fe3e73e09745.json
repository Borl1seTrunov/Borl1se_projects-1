{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar errors = require('./errors');\nvar debug = require('debug')('node-telegram-bot-api');\nvar deprecate = require('./utils').deprecate;\nvar ANOTHER_WEB_HOOK_USED = 409;\nvar TelegramBotPolling = function () {\n  /**\n   * Handles polling against the Telegram servers.\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  function TelegramBotPolling(bot) {\n    _classCallCheck(this, TelegramBotPolling);\n    this.bot = bot;\n    this.options = typeof bot.options.polling === 'boolean' ? {} : bot.options.polling;\n    this.options.interval = typeof this.options.interval === 'number' ? this.options.interval : 300;\n    this.options.params = _typeof(this.options.params) === 'object' ? this.options.params : {};\n    this.options.params.offset = typeof this.options.params.offset === 'number' ? this.options.params.offset : 0;\n    this.options.params.timeout = typeof this.options.params.timeout === 'number' ? this.options.params.timeout : 10;\n    if (typeof this.options.timeout === 'number') {\n      deprecate('`options.polling.timeout` is deprecated. Use `options.polling.params` instead.');\n      this.options.params.timeout = this.options.timeout;\n    }\n    this._lastUpdate = 0;\n    this._lastRequest = null;\n    this._abort = false;\n    this._pollingTimeout = null;\n  }\n\n  /**\n   * Start polling\n   * @param  {Object} [options]\n   * @param  {Object} [options.restart]\n   * @return {Promise}\n   */\n\n  _createClass(TelegramBotPolling, [{\n    key: 'start',\n    value: function start() {\n      var _this = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (this._lastRequest) {\n        if (!options.restart) {\n          return Promise.resolve();\n        }\n        return this.stop({\n          cancel: true,\n          reason: 'Polling restart'\n        }).then(function () {\n          return _this._polling();\n        });\n      }\n      return this._polling();\n    }\n\n    /**\n     * Stop polling\n     * @param  {Object} [options] Options\n     * @param  {Boolean} [options.cancel] Cancel current request\n     * @param  {String} [options.reason] Reason for stopping polling\n     * @return {Promise}\n     */\n  }, {\n    key: 'stop',\n    value: function stop() {\n      var _this2 = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (!this._lastRequest) {\n        return Promise.resolve();\n      }\n      var lastRequest = this._lastRequest;\n      this._lastRequest = null;\n      clearTimeout(this._pollingTimeout);\n      if (options.cancel) {\n        var reason = options.reason || 'Polling stop';\n        lastRequest.cancel(reason);\n        return Promise.resolve();\n      }\n      this._abort = true;\n      return lastRequest.finally(function () {\n        _this2._abort = false;\n      });\n    }\n\n    /**\n     * Return `true` if is polling. Otherwise, `false`.\n     */\n  }, {\n    key: 'isPolling',\n    value: function isPolling() {\n      return !!this._lastRequest;\n    }\n\n    /**\n     * Handle error thrown during polling.\n     * @private\n     * @param  {Error} error\n     */\n  }, {\n    key: '_error',\n    value: function _error(error) {\n      if (!this.bot.listeners('polling_error').length) {\n        return console.error('error: [polling_error] %j', error); // eslint-disable-line no-console\n      }\n      return this.bot.emit('polling_error', error);\n    }\n\n    /**\n     * Invokes polling (with recursion!)\n     * @return {Promise} promise of the current request\n     * @private\n     */\n  }, {\n    key: '_polling',\n    value: function _polling() {\n      var _this3 = this;\n      this._lastRequest = this._getUpdates().then(function (updates) {\n        _this3._lastUpdate = Date.now();\n        debug('polling data %j', updates);\n        updates.forEach(function (update) {\n          _this3.options.params.offset = update.update_id + 1;\n          debug('updated offset: %s', _this3.options.params.offset);\n          try {\n            _this3.bot.processUpdate(update);\n          } catch (err) {\n            err._processing = true;\n            throw err;\n          }\n        });\n        return null;\n      }).catch(function (err) {\n        debug('polling error: %s', err.message);\n        if (!err._processing) {\n          return _this3._error(err);\n        }\n        delete err._processing;\n        /*\n         * An error occured while processing the items,\n         * i.e. in `this.bot.processUpdate()` above.\n         * We need to mark the already-processed items\n         * to avoid fetching them again once the application\n         * is restarted, or moves to next polling interval\n         * (in cases where unhandled rejections do not terminate\n         * the process).\n         * See https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067\n         */\n        if (!_this3.bot.options.badRejection) {\n          return _this3._error(err);\n        }\n        var opts = {\n          offset: _this3.options.params.offset,\n          limit: 1,\n          timeout: 0\n        };\n        return _this3.bot.getUpdates(opts).then(function () {\n          return _this3._error(err);\n        }).catch(function (requestErr) {\n          /*\n           * We have been unable to handle this error.\n           * We have to log this to stderr to ensure devops\n           * understands that they may receive already-processed items\n           * on app restart.\n           * We simply can not rescue this situation, emit \"error\"\n           * event, with the hope that the application exits.\n           */\n          /* eslint-disable no-console */\n          var bugUrl = 'https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067';\n          console.error('error: Internal handling of The Offset Infinite Loop failed');\n          console.error('error: Due to error \\'' + requestErr + '\\'');\n          console.error('error: You may receive already-processed updates on app restart');\n          console.error('error: Please see ' + bugUrl + ' for more information');\n          /* eslint-enable no-console */\n          return _this3.bot.emit('error', new errors.FatalError(err));\n        });\n      }).finally(function () {\n        if (_this3._abort) {\n          debug('Polling is aborted!');\n        } else {\n          debug('setTimeout for %s miliseconds', _this3.options.interval);\n          _this3._pollingTimeout = setTimeout(function () {\n            return _this3._polling();\n          }, _this3.options.interval);\n        }\n      });\n      return this._lastRequest;\n    }\n\n    /**\n     * Unset current webhook. Used when we detect that a webhook has been set\n     * and we are trying to poll. Polling and WebHook are mutually exclusive.\n     * @see https://core.telegram.org/bots/api#getting-updates\n     * @private\n     */\n  }, {\n    key: '_unsetWebHook',\n    value: function _unsetWebHook() {\n      debug('unsetting webhook');\n      return this.bot._request('setWebHook');\n    }\n\n    /**\n     * Retrieve updates\n     */\n  }, {\n    key: '_getUpdates',\n    value: function _getUpdates() {\n      var _this4 = this;\n      debug('polling with options: %j', this.options.params);\n      return this.bot.getUpdates(this.options.params).catch(function (err) {\n        if (err.response && err.response.statusCode === ANOTHER_WEB_HOOK_USED) {\n          return _this4._unsetWebHook().then(function () {\n            return _this4.bot.getUpdates(_this4.options.params);\n          });\n        }\n        throw err;\n      });\n    }\n  }]);\n  return TelegramBotPolling;\n}();\nmodule.exports = TelegramBotPolling;","map":{"version":3,"names":["_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","_classCallCheck","instance","TypeError","errors","require","debug","deprecate","ANOTHER_WEB_HOOK_USED","TelegramBotPolling","bot","options","polling","interval","params","offset","timeout","_lastUpdate","_lastRequest","_abort","_pollingTimeout","value","start","_this","arguments","undefined","restart","Promise","resolve","stop","cancel","reason","then","_polling","_this2","lastRequest","clearTimeout","finally","isPolling","_error","error","listeners","console","emit","_this3","_getUpdates","updates","Date","now","forEach","update","update_id","processUpdate","err","_processing","catch","message","badRejection","opts","limit","getUpdates","requestErr","bugUrl","FatalError","setTimeout","_unsetWebHook","_request","_this4","response","statusCode","module","exports"],"sources":["/Users/boristrunov/Desktop/LevelCoin/project/node_modules/node-telegram-bot-api/lib/telegramPolling.js"],"sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar errors = require('./errors');\nvar debug = require('debug')('node-telegram-bot-api');\nvar deprecate = require('./utils').deprecate;\nvar ANOTHER_WEB_HOOK_USED = 409;\n\nvar TelegramBotPolling = function () {\n  /**\n   * Handles polling against the Telegram servers.\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  function TelegramBotPolling(bot) {\n    _classCallCheck(this, TelegramBotPolling);\n\n    this.bot = bot;\n    this.options = typeof bot.options.polling === 'boolean' ? {} : bot.options.polling;\n    this.options.interval = typeof this.options.interval === 'number' ? this.options.interval : 300;\n    this.options.params = _typeof(this.options.params) === 'object' ? this.options.params : {};\n    this.options.params.offset = typeof this.options.params.offset === 'number' ? this.options.params.offset : 0;\n    this.options.params.timeout = typeof this.options.params.timeout === 'number' ? this.options.params.timeout : 10;\n    if (typeof this.options.timeout === 'number') {\n      deprecate('`options.polling.timeout` is deprecated. Use `options.polling.params` instead.');\n      this.options.params.timeout = this.options.timeout;\n    }\n    this._lastUpdate = 0;\n    this._lastRequest = null;\n    this._abort = false;\n    this._pollingTimeout = null;\n  }\n\n  /**\n   * Start polling\n   * @param  {Object} [options]\n   * @param  {Object} [options.restart]\n   * @return {Promise}\n   */\n\n\n  _createClass(TelegramBotPolling, [{\n    key: 'start',\n    value: function start() {\n      var _this = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this._lastRequest) {\n        if (!options.restart) {\n          return Promise.resolve();\n        }\n        return this.stop({\n          cancel: true,\n          reason: 'Polling restart'\n        }).then(function () {\n          return _this._polling();\n        });\n      }\n      return this._polling();\n    }\n\n    /**\n     * Stop polling\n     * @param  {Object} [options] Options\n     * @param  {Boolean} [options.cancel] Cancel current request\n     * @param  {String} [options.reason] Reason for stopping polling\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this._lastRequest) {\n        return Promise.resolve();\n      }\n      var lastRequest = this._lastRequest;\n      this._lastRequest = null;\n      clearTimeout(this._pollingTimeout);\n      if (options.cancel) {\n        var reason = options.reason || 'Polling stop';\n        lastRequest.cancel(reason);\n        return Promise.resolve();\n      }\n      this._abort = true;\n      return lastRequest.finally(function () {\n        _this2._abort = false;\n      });\n    }\n\n    /**\n     * Return `true` if is polling. Otherwise, `false`.\n     */\n\n  }, {\n    key: 'isPolling',\n    value: function isPolling() {\n      return !!this._lastRequest;\n    }\n\n    /**\n     * Handle error thrown during polling.\n     * @private\n     * @param  {Error} error\n     */\n\n  }, {\n    key: '_error',\n    value: function _error(error) {\n      if (!this.bot.listeners('polling_error').length) {\n        return console.error('error: [polling_error] %j', error); // eslint-disable-line no-console\n      }\n      return this.bot.emit('polling_error', error);\n    }\n\n    /**\n     * Invokes polling (with recursion!)\n     * @return {Promise} promise of the current request\n     * @private\n     */\n\n  }, {\n    key: '_polling',\n    value: function _polling() {\n      var _this3 = this;\n\n      this._lastRequest = this._getUpdates().then(function (updates) {\n        _this3._lastUpdate = Date.now();\n        debug('polling data %j', updates);\n        updates.forEach(function (update) {\n          _this3.options.params.offset = update.update_id + 1;\n          debug('updated offset: %s', _this3.options.params.offset);\n          try {\n            _this3.bot.processUpdate(update);\n          } catch (err) {\n            err._processing = true;\n            throw err;\n          }\n        });\n        return null;\n      }).catch(function (err) {\n        debug('polling error: %s', err.message);\n        if (!err._processing) {\n          return _this3._error(err);\n        }\n        delete err._processing;\n        /*\n         * An error occured while processing the items,\n         * i.e. in `this.bot.processUpdate()` above.\n         * We need to mark the already-processed items\n         * to avoid fetching them again once the application\n         * is restarted, or moves to next polling interval\n         * (in cases where unhandled rejections do not terminate\n         * the process).\n         * See https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067\n         */\n        if (!_this3.bot.options.badRejection) {\n          return _this3._error(err);\n        }\n        var opts = {\n          offset: _this3.options.params.offset,\n          limit: 1,\n          timeout: 0\n        };\n        return _this3.bot.getUpdates(opts).then(function () {\n          return _this3._error(err);\n        }).catch(function (requestErr) {\n          /*\n           * We have been unable to handle this error.\n           * We have to log this to stderr to ensure devops\n           * understands that they may receive already-processed items\n           * on app restart.\n           * We simply can not rescue this situation, emit \"error\"\n           * event, with the hope that the application exits.\n           */\n          /* eslint-disable no-console */\n          var bugUrl = 'https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067';\n          console.error('error: Internal handling of The Offset Infinite Loop failed');\n          console.error('error: Due to error \\'' + requestErr + '\\'');\n          console.error('error: You may receive already-processed updates on app restart');\n          console.error('error: Please see ' + bugUrl + ' for more information');\n          /* eslint-enable no-console */\n          return _this3.bot.emit('error', new errors.FatalError(err));\n        });\n      }).finally(function () {\n        if (_this3._abort) {\n          debug('Polling is aborted!');\n        } else {\n          debug('setTimeout for %s miliseconds', _this3.options.interval);\n          _this3._pollingTimeout = setTimeout(function () {\n            return _this3._polling();\n          }, _this3.options.interval);\n        }\n      });\n      return this._lastRequest;\n    }\n\n    /**\n     * Unset current webhook. Used when we detect that a webhook has been set\n     * and we are trying to poll. Polling and WebHook are mutually exclusive.\n     * @see https://core.telegram.org/bots/api#getting-updates\n     * @private\n     */\n\n  }, {\n    key: '_unsetWebHook',\n    value: function _unsetWebHook() {\n      debug('unsetting webhook');\n      return this.bot._request('setWebHook');\n    }\n\n    /**\n     * Retrieve updates\n     */\n\n  }, {\n    key: '_getUpdates',\n    value: function _getUpdates() {\n      var _this4 = this;\n\n      debug('polling with options: %j', this.options.params);\n      return this.bot.getUpdates(this.options.params).catch(function (err) {\n        if (err.response && err.response.statusCode === ANOTHER_WEB_HOOK_USED) {\n          return _this4._unsetWebHook().then(function () {\n            return _this4.bot.getUpdates(_this4.options.params);\n          });\n        }\n        throw err;\n      });\n    }\n  }]);\n\n  return TelegramBotPolling;\n}();\n\nmodule.exports = TelegramBotPolling;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}