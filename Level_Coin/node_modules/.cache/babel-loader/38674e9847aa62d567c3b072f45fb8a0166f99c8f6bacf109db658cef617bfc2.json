{"ast":null,"code":"// shims\nrequire('array.prototype.findindex').shim(); // for Node.js v0.x\n\nconst errors = require('./errors');\nconst TelegramBotWebHook = require('./telegramWebHook');\nconst TelegramBotPolling = require('./telegramPolling');\nconst debug = require('debug')('node-telegram-bot-api');\nconst EventEmitter = require('eventemitter3');\nconst fileType = require('file-type');\nconst request = require('@cypress/request-promise');\nconst streamedRequest = require('@cypress/request');\nconst qs = require('querystring');\nconst stream = require('stream');\nconst mime = require('mime');\nconst path = require('path');\nconst URL = require('url');\nconst fs = require('fs');\nconst pump = require('pump');\nconst deprecate = require('./utils').deprecate;\nconst _messageTypes = ['text', 'animation', 'audio', 'channel_chat_created', 'contact', 'delete_chat_photo', 'dice', 'document', 'game', 'group_chat_created', 'invoice', 'left_chat_member', 'location', 'migrate_from_chat_id', 'migrate_to_chat_id', 'new_chat_members', 'new_chat_photo', 'new_chat_title', 'passport_data', 'photo', 'pinned_message', 'poll', 'sticker', 'successful_payment', 'supergroup_chat_created', 'video', 'video_note', 'voice', 'video_chat_started', 'video_chat_ended', 'video_chat_participants_invited', 'video_chat_scheduled', 'message_auto_delete_timer_changed', 'chat_invite_link', 'chat_member_updated', 'web_app_data', 'message_reaction'];\nconst _deprecatedMessageTypes = ['new_chat_participant', 'left_chat_participant'];\n\n/**\n * JSON-serialize data. If the provided data is already a String,\n * return it as is.\n * @private\n * @param  {*} data\n * @return {String}\n */\nfunction stringify(data) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  return JSON.stringify(data);\n}\nclass TelegramBot extends EventEmitter {\n  /**\n   * The different errors the library uses.\n   * @type {Object}\n   */\n  static get errors() {\n    return errors;\n  }\n\n  /**\n   * The types of message updates the library handles.\n   * @type {String[]}\n   */\n  static get messageTypes() {\n    return _messageTypes;\n  }\n\n  /**\n   * Add listener for the specified [event](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events).\n   * This is the usual `emitter.on()` method.\n   * @param  {String} event\n   * @param  {Function} listener\n   * @see {@link https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events|Available events}\n   * @see https://nodejs.org/api/events.html#events_emitter_on_eventname_listener\n   */\n  on(event, listener) {\n    if (_deprecatedMessageTypes.indexOf(event) !== -1) {\n      const url = 'https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events';\n      deprecate(`Events ${_deprecatedMessageTypes.join(',')} are deprecated. See the updated list of events: ${url}`);\n    }\n    super.on(event, listener);\n  }\n\n  /**\n   * Both request method to obtain messages are implemented. To use standard polling, set `polling: true`\n   * on `options`. Notice that [webHook](https://core.telegram.org/bots/api#setwebhook) will need a SSL certificate.\n   * Emits `message` when a message arrives.\n   *\n   * @class TelegramBot\n   * @constructor\n   * @param {String} token Bot Token\n   * @param {Object} [options]\n   * @param {Boolean|Object} [options.polling=false] Set true to enable polling or set options.\n   *  If a WebHook has been set, it will be deleted automatically.\n   * @param {String|Number} [options.polling.timeout=10] *Deprecated. Use `options.polling.params` instead*.\n   *  Timeout in seconds for long polling.\n   * @param {Boolean} [options.testEnvironment=false] Set true to  work with test enviroment.\n   * When working with the test environment, you may use HTTP links without TLS to test your Web App.\n   * @param {String|Number} [options.polling.interval=300] Interval between requests in miliseconds\n   * @param {Boolean} [options.polling.autoStart=true] Start polling immediately\n   * @param {Object} [options.polling.params] Parameters to be used in polling API requests.\n   *  See https://core.telegram.org/bots/api#getupdates for more information.\n   * @param  {Number} [options.polling.params.timeout=10] Timeout in seconds for long polling.\n   * @param {Boolean|Object} [options.webHook=false] Set true to enable WebHook or set options\n   * @param {String} [options.webHook.host=\"0.0.0.0\"] Host to bind to\n   * @param {Number} [options.webHook.port=8443] Port to bind to\n   * @param {String} [options.webHook.key] Path to file with PEM private key for webHook server.\n   *  The file is read **synchronously**!\n   * @param {String} [options.webHook.cert] Path to file with PEM certificate (public) for webHook server.\n   *  The file is read **synchronously**!\n   * @param {String} [options.webHook.pfx] Path to file with PFX private key and certificate chain for webHook server.\n   *  The file is read **synchronously**!\n   * @param {Boolean} [options.webHook.autoOpen=true] Open webHook immediately\n   * @param {Object} [options.webHook.https] Options to be passed to `https.createServer()`.\n   *  Note that `options.webHook.key`, `options.webHook.cert` and `options.webHook.pfx`, if provided, will be\n   *  used to override `key`, `cert` and `pfx` in this object, respectively.\n   *  See https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener for more information.\n   * @param {String} [options.webHook.healthEndpoint=\"/healthz\"] An endpoint for health checks that always responds with 200 OK\n   * @param {Boolean} [options.onlyFirstMatch=false] Set to true to stop after first match. Otherwise, all regexps are executed\n   * @param {Object} [options.request] Options which will be added for all requests to telegram api.\n   *  See https://github.com/request/request#requestoptions-callback for more information.\n   * @param {String} [options.baseApiUrl=\"https://api.telegram.org\"] API Base URl; useful for proxying and testing\n   * @param {Boolean} [options.filepath=true] Allow passing file-paths as arguments when sending files,\n   *  such as photos using `TelegramBot#sendPhoto()`. See [usage information][usage-sending-files-performance]\n   *  for more information on this option and its consequences.\n   * @param {Boolean} [options.badRejection=false] Set to `true`\n   *  **if and only if** the Node.js version you're using terminates the\n   *  process on unhandled rejections. This option is only for\n   *  *forward-compatibility purposes*.\n   * @see https://core.telegram.org/bots/api\n   */\n  constructor(token, options = {}) {\n    super();\n    this.token = token;\n    this.options = options;\n    this.options.polling = typeof options.polling === 'undefined' ? false : options.polling;\n    this.options.webHook = typeof options.webHook === 'undefined' ? false : options.webHook;\n    this.options.baseApiUrl = options.baseApiUrl || 'https://api.telegram.org';\n    this.options.filepath = typeof options.filepath === 'undefined' ? true : options.filepath;\n    this.options.badRejection = typeof options.badRejection === 'undefined' ? false : options.badRejection;\n    this._textRegexpCallbacks = [];\n    this._replyListenerId = 0;\n    this._replyListeners = [];\n    this._polling = null;\n    this._webHook = null;\n    if (options.polling) {\n      const autoStart = options.polling.autoStart;\n      if (typeof autoStart === 'undefined' || autoStart === true) {\n        this.startPolling();\n      }\n    }\n    if (options.webHook) {\n      const autoOpen = options.webHook.autoOpen;\n      if (typeof autoOpen === 'undefined' || autoOpen === true) {\n        this.openWebHook();\n      }\n    }\n  }\n\n  /**\n   * Generates url with bot token and provided path/method you want to be got/executed by bot\n   * @param  {String} path\n   * @return {String} url\n   * @private\n   * @see https://core.telegram.org/bots/api#making-requests\n   */\n  _buildURL(_path) {\n    return `${this.options.baseApiUrl}/bot${this.token}${this.options.testEnvironment ? '/test' : ''}/${_path}`;\n  }\n\n  /**\n   * Fix 'reply_markup' parameter by making it JSON-serialized, as\n   * required by the Telegram Bot API\n   * @param {Object} obj Object; either 'form' or 'qs'\n   * @private\n   * @see https://core.telegram.org/bots/api#sendmessage\n   */\n  _fixReplyMarkup(obj) {\n    const replyMarkup = obj.reply_markup;\n    if (replyMarkup && typeof replyMarkup !== 'string') {\n      obj.reply_markup = stringify(replyMarkup);\n    }\n  }\n\n  /**\n   * Fix 'entities' or 'caption_entities' or 'explanation_entities' parameter by making it JSON-serialized, as\n   * required by the Telegram Bot API\n   * @param {Object} obj Object;\n   * @private\n   * @see https://core.telegram.org/bots/api#sendmessage\n   * @see https://core.telegram.org/bots/api#copymessage\n   * @see https://core.telegram.org/bots/api#sendpoll\n   */\n  _fixEntitiesField(obj) {\n    const entities = obj.entities;\n    const captionEntities = obj.caption_entities;\n    const explanationEntities = obj.explanation_entities;\n    if (entities && typeof entities !== 'string') {\n      obj.entities = stringify(entities);\n    }\n    if (captionEntities && typeof captionEntities !== 'string') {\n      obj.caption_entities = stringify(captionEntities);\n    }\n    if (explanationEntities && typeof explanationEntities !== 'string') {\n      obj.explanation_entities = stringify(explanationEntities);\n    }\n  }\n  _fixAddFileThumbnail(options, opts) {\n    if (options.thumb) {\n      if (opts.formData === null) {\n        opts.formData = {};\n      }\n      const attachName = 'photo';\n      const [formData] = this._formatSendData(attachName, options.thumb.replace('attach://', ''));\n      if (formData) {\n        opts.formData[attachName] = formData[attachName];\n        opts.qs.thumbnail = `attach://${attachName}`;\n      }\n    }\n  }\n\n  /**\n   * Fix 'reply_parameters' parameter by making it JSON-serialized, as\n   * required by the Telegram Bot API\n   * @param {Object} obj Object; either 'form' or 'qs'\n   * @private\n   * @see https://core.telegram.org/bots/api#sendmessage\n   */\n  _fixReplyParameters(obj) {\n    if (obj.hasOwnProperty('reply_parameters') && typeof obj.reply_parameters !== 'string') {\n      obj.reply_parameters = stringify(obj.reply_parameters);\n    }\n  }\n\n  /**\n   * Make request against the API\n   * @param  {String} _path API endpoint\n   * @param  {Object} [options]\n   * @private\n   * @return {Promise}\n   */\n  _request(_path, options = {}) {\n    if (!this.token) {\n      return Promise.reject(new errors.FatalError('Telegram Bot Token not provided!'));\n    }\n    if (this.options.request) {\n      Object.assign(options, this.options.request);\n    }\n    if (options.form) {\n      this._fixReplyMarkup(options.form);\n      this._fixEntitiesField(options.form);\n      this._fixReplyParameters(options.form);\n    }\n    if (options.qs) {\n      this._fixReplyMarkup(options.qs);\n      this._fixReplyParameters(options.qs);\n    }\n    options.method = 'POST';\n    options.url = this._buildURL(_path);\n    options.simple = false;\n    options.resolveWithFullResponse = true;\n    options.forever = true;\n    debug('HTTP request: %j', options);\n    return request(options).then(resp => {\n      let data;\n      try {\n        data = resp.body = JSON.parse(resp.body);\n      } catch (err) {\n        throw new errors.ParseError(`Error parsing response: ${resp.body}`, resp);\n      }\n      if (data.ok) {\n        return data.result;\n      }\n      throw new errors.TelegramError(`${data.error_code} ${data.description}`, resp);\n    }).catch(error => {\n      // TODO: why can't we do `error instanceof errors.BaseError`?\n      if (error.response) throw error;\n      throw new errors.FatalError(error);\n    });\n  }\n\n  /**\n   * Format data to be uploaded; handles file paths, streams and buffers\n   * @param  {String} type\n   * @param  {String|stream.Stream|Buffer} data\n   * @param  {Object} fileOptions File options\n   * @param  {String} [fileOptions.filename] File name\n   * @param  {String} [fileOptions.contentType] Content type (i.e. MIME)\n   * @return {Array} formatted\n   * @return {Object} formatted[0] formData\n   * @return {String} formatted[1] fileId\n   * @throws Error if Buffer file type is not supported.\n   * @see https://npmjs.com/package/file-type\n   * @private\n   */\n  _formatSendData(type, data, fileOptions = {}) {\n    const deprecationMessage = 'See https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files' + ' for more information on how sending files has been improved and' + ' on how to disable this deprecation message altogether.';\n    let filedata = data;\n    let filename = fileOptions.filename;\n    let contentType = fileOptions.contentType;\n    if (data instanceof stream.Stream) {\n      if (!filename && data.path) {\n        // Will be 'null' if could not be parsed.\n        // For example, 'data.path' === '/?id=123' from 'request(\"https://example.com/?id=123\")'\n        const url = URL.parse(path.basename(data.path.toString()));\n        if (url.pathname) {\n          filename = qs.unescape(url.pathname);\n        }\n      }\n    } else if (Buffer.isBuffer(data)) {\n      if (!filename && !process.env.NTBA_FIX_350) {\n        deprecate(`Buffers will have their filenames default to \"filename\" instead of \"data\". ${deprecationMessage}`);\n        filename = 'data';\n      }\n      if (!contentType) {\n        const filetype = fileType(data);\n        if (filetype) {\n          contentType = filetype.mime;\n          const ext = filetype.ext;\n          if (ext && !process.env.NTBA_FIX_350) {\n            filename = `${filename}.${ext}`;\n          }\n        } else if (!process.env.NTBA_FIX_350) {\n          deprecate(`An error will no longer be thrown if file-type of buffer could not be detected. ${deprecationMessage}`);\n          throw new errors.FatalError('Unsupported Buffer file-type');\n        }\n      }\n    } else if (data) {\n      if (this.options.filepath && fs.existsSync(data)) {\n        filedata = fs.createReadStream(data);\n        if (!filename) {\n          filename = path.basename(data);\n        }\n      } else {\n        return [null, data];\n      }\n    } else {\n      return [null, data];\n    }\n    filename = filename || 'filename';\n    contentType = contentType || mime.lookup(filename);\n    if (process.env.NTBA_FIX_350) {\n      contentType = contentType || 'application/octet-stream';\n    } else {\n      deprecate(`In the future, content-type of files you send will default to \"application/octet-stream\". ${deprecationMessage}`);\n    }\n\n    // TODO: Add missing file extension.\n\n    return [{\n      [type]: {\n        value: filedata,\n        options: {\n          filename,\n          contentType\n        }\n      }\n    }, null];\n  }\n\n  /**\n   * Start polling.\n   * Rejects returned promise if a WebHook is being used by this instance.\n   * @param  {Object} [options]\n   * @param  {Boolean} [options.restart=true] Consecutive calls to this method causes polling to be restarted\n   * @return {Promise}\n   */\n  startPolling(options = {}) {\n    if (this.hasOpenWebHook()) {\n      return Promise.reject(new errors.FatalError('Polling and WebHook are mutually exclusive'));\n    }\n    options.restart = typeof options.restart === 'undefined' ? true : options.restart;\n    if (!this._polling) {\n      this._polling = new TelegramBotPolling(this);\n    }\n    return this._polling.start(options);\n  }\n\n  /**\n   * Alias of `TelegramBot#startPolling()`. This is **deprecated**.\n   * @param  {Object} [options]\n   * @return {Promise}\n   * @deprecated\n   */\n  initPolling() {\n    deprecate('TelegramBot#initPolling() is deprecated. Use TelegramBot#startPolling() instead.');\n    return this.startPolling();\n  }\n\n  /**\n   * Stops polling after the last polling request resolves.\n   * Multiple invocations do nothing if polling is already stopped.\n   * Returning the promise of the last polling request is **deprecated**.\n   * @param  {Object} [options] Options\n   * @param  {Boolean} [options.cancel] Cancel current request\n   * @param  {String} [options.reason] Reason for stopping polling\n   * @return {Promise}\n   */\n  stopPolling(options) {\n    if (!this._polling) {\n      return Promise.resolve();\n    }\n    return this._polling.stop(options);\n  }\n\n  /**\n   * Get link for file.\n   * Use this method to get link for file for subsequent use.\n   * Attention: link will be valid for 1 hour.\n   *\n   * This method is a sugar extension of the (getFile)[#getfilefileid] method,\n   * which returns just path to file on remote server (you will have to manually build full uri after that).\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Promise which will have  *fileURI* in resolve callback\n   * @see https://core.telegram.org/bots/api#getfile\n   */\n  getFileLink(fileId, form = {}) {\n    return this.getFile(fileId, form).then(resp => `${this.options.baseApiUrl}/file/bot${this.token}/${resp.file_path}`);\n  }\n\n  /**\n   * Return a readable stream for file.\n   *\n   * `fileStream.path` is the specified file ID i.e. `fileId`.\n   * `fileStream` emits event `info` passing a single argument i.e.\n   * `info` with the interface `{ uri }` where `uri` is the URI of the\n   * file on Telegram servers.\n   *\n   * This method is a sugar extension of the [getFileLink](#TelegramBot+getFileLink) method,\n   * which returns the full URI to the file on remote server.\n   *\n   * @param  {String} fileId File identifier to get info about\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {stream.Readable} fileStream\n   */\n  getFileStream(fileId, form = {}) {\n    const fileStream = new stream.PassThrough();\n    fileStream.path = fileId;\n    this.getFileLink(fileId, form).then(fileURI => {\n      fileStream.emit('info', {\n        uri: fileURI\n      });\n      pump(streamedRequest(Object.assign({\n        uri: fileURI\n      }, this.options.request)), fileStream);\n    }).catch(error => {\n      fileStream.emit('error', error);\n    });\n    return fileStream;\n  }\n\n  /**\n   * Downloads file in the specified folder.\n   *\n   * This method is a sugar extension of the [getFileStream](#TelegramBot+getFileStream) method,\n   * which returns a readable file stream.\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @param  {String} downloadDir Absolute path to the folder in which file will be saved\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Promise, which will have *filePath* of downloaded file in resolve callback\n   */\n  downloadFile(fileId, downloadDir, form = {}) {\n    let resolve;\n    let reject;\n    const promise = new Promise((a, b) => {\n      resolve = a;\n      reject = b;\n    });\n    const fileStream = this.getFileStream(fileId, form);\n    fileStream.on('info', info => {\n      const fileName = info.uri.slice(info.uri.lastIndexOf('/') + 1);\n      // TODO: Ensure fileName doesn't contains slashes\n      const filePath = path.join(downloadDir, fileName);\n      pump(fileStream, fs.createWriteStream(filePath), error => {\n        if (error) {\n          return reject(error);\n        }\n        return resolve(filePath);\n      });\n    });\n    fileStream.on('error', err => {\n      reject(err);\n    });\n    return promise;\n  }\n\n  /**\n   * Register a RegExp to test against an incomming text message.\n   * @param  {RegExp}   regexpRexecuted with `exec`.\n   * @param  {Function} callback     Callback will be called with 2 parameters,\n   * the `msg` and the result of executing `regexp.exec` on message text.\n   */\n  onText(regexp, callback) {\n    this._textRegexpCallbacks.push({\n      regexp,\n      callback\n    });\n  }\n\n  /**\n   * Remove a listener registered with `onText()`.\n   * @param  {RegExp} regexp RegExp used previously in `onText()`\n   * @return {Object} deletedListener The removed reply listener if\n   *   found. This object has `regexp` and `callback`\n   *   properties. If not found, returns `null`.\n   */\n  removeTextListener(regexp) {\n    const index = this._textRegexpCallbacks.findIndex(textListener => {\n      return String(textListener.regexp) === String(regexp);\n    });\n    if (index === -1) {\n      return null;\n    }\n    return this._textRegexpCallbacks.splice(index, 1)[0];\n  }\n\n  /**\n   * Remove all listeners registered with `onText()`.\n   */\n  clearTextListeners() {\n    this._textRegexpCallbacks = [];\n  }\n\n  /**\n   * Register a reply to wait for a message response.\n   *\n   * @param  {Number|String} chatId The chat id where the message cames from.\n   * @param  {Number|String} messageId The message id to be replied.\n   * @param  {Function} callback Callback will be called with the reply\n   *  message.\n   * @return {Number} id The ID of the inserted reply listener.\n   */\n  onReplyToMessage(chatId, messageId, callback) {\n    const id = ++this._replyListenerId;\n    this._replyListeners.push({\n      id,\n      chatId,\n      messageId,\n      callback\n    });\n    return id;\n  }\n\n  /**\n   * Removes a reply that has been prev. registered for a message response.\n   * @param   {Number} replyListenerId The ID of the reply listener.\n   * @return  {Object} deletedListener The removed reply listener if\n   *   found. This object has `id`, `chatId`, `messageId` and `callback`\n   *   properties. If not found, returns `null`.\n   */\n  removeReplyListener(replyListenerId) {\n    const index = this._replyListeners.findIndex(replyListener => {\n      return replyListener.id === replyListenerId;\n    });\n    if (index === -1) {\n      return null;\n    }\n    return this._replyListeners.splice(index, 1)[0];\n  }\n\n  /**\n   * Removes all replies that have been prev. registered for a message response.\n   *\n   * @return  {Array} deletedListeners An array of removed listeners.\n   */\n  clearReplyListeners() {\n    this._replyListeners = [];\n  }\n\n  /**\n   * Return true if polling. Otherwise, false.\n   *\n   * @return {Boolean}\n   */\n  isPolling() {\n    return this._polling ? this._polling.isPolling() : false;\n  }\n\n  /**\n   * Open webhook.\n   * Multiple invocations do nothing if webhook is already open.\n   * Rejects returned promise if Polling is being used by this instance.\n   *\n   * @return {Promise}\n   */\n  openWebHook() {\n    if (this.isPolling()) {\n      return Promise.reject(new errors.FatalError('WebHook and Polling are mutually exclusive'));\n    }\n    if (!this._webHook) {\n      this._webHook = new TelegramBotWebHook(this);\n    }\n    return this._webHook.open();\n  }\n\n  /**\n   * Close webhook after closing all current connections.\n   * Multiple invocations do nothing if webhook is already closed.\n   *\n   * @return {Promise} Promise\n   */\n  closeWebHook() {\n    if (!this._webHook) {\n      return Promise.resolve();\n    }\n    return this._webHook.close();\n  }\n\n  /**\n   * Return true if using webhook and it is open i.e. accepts connections.\n   * Otherwise, false.\n   *\n   * @return {Boolean}\n   */\n  hasOpenWebHook() {\n    return this._webHook ? this._webHook.isOpen() : false;\n  }\n\n  /**\n   * Process an update; emitting the proper events and executing regexp\n   * callbacks. This method is useful should you be using a different\n   * way to fetch updates, other than those provided by TelegramBot.\n   *\n   * @param  {Object} update\n   * @see https://core.telegram.org/bots/api#update\n   */\n  processUpdate(update) {\n    debug('Process Update %j', update);\n    const message = update.message;\n    const editedMessage = update.edited_message;\n    const channelPost = update.channel_post;\n    const editedChannelPost = update.edited_channel_post;\n    const businessConnection = update.business_connection;\n    const businesssMessage = update.business_message;\n    const editedBusinessMessage = update.edited_business_message;\n    const deletedBusinessMessage = update.deleted_business_messages;\n    const messageReaction = update.message_reaction;\n    const messageReactionCount = update.message_reaction_count;\n    const inlineQuery = update.inline_query;\n    const chosenInlineResult = update.chosen_inline_result;\n    const callbackQuery = update.callback_query;\n    const shippingQuery = update.shipping_query;\n    const preCheckoutQuery = update.pre_checkout_query;\n    const poll = update.poll;\n    const pollAnswer = update.poll_answer;\n    const myChatMember = update.my_chat_member;\n    const chatMember = update.chat_member;\n    const chatJoinRequest = update.chat_join_request;\n    const chatBoost = update.chat_boost;\n    const removedChatBoost = update.removed_chat_boost;\n    if (message) {\n      debug('Process Update message %j', message);\n      const metadata = {};\n      metadata.type = TelegramBot.messageTypes.find(messageType => {\n        return message[messageType];\n      });\n      this.emit('message', message, metadata);\n      if (metadata.type) {\n        debug('Emitting %s: %j', metadata.type, message);\n        this.emit(metadata.type, message, metadata);\n      }\n      if (message.text) {\n        debug('Text message');\n        this._textRegexpCallbacks.some(reg => {\n          debug('Matching %s with %s', message.text, reg.regexp);\n          if (!(reg.regexp instanceof RegExp)) {\n            reg.regexp = new RegExp(reg.regexp);\n          }\n          const result = reg.regexp.exec(message.text);\n          if (!result) {\n            return false;\n          }\n          // reset index so we start at the beginning of the regex each time\n          reg.regexp.lastIndex = 0;\n          debug('Matches %s', reg.regexp);\n          reg.callback(message, result);\n          // returning truthy value exits .some\n          return this.options.onlyFirstMatch;\n        });\n      }\n      if (message.reply_to_message) {\n        // Only callbacks waiting for this message\n        this._replyListeners.forEach(reply => {\n          // Message from the same chat\n          if (reply.chatId === message.chat.id) {\n            // Responding to that message\n            if (reply.messageId === message.reply_to_message.message_id) {\n              // Resolve the promise\n              reply.callback(message);\n            }\n          }\n        });\n      }\n    } else if (editedMessage) {\n      debug('Process Update edited_message %j', editedMessage);\n      this.emit('edited_message', editedMessage);\n      if (editedMessage.text) {\n        this.emit('edited_message_text', editedMessage);\n      }\n      if (editedMessage.caption) {\n        this.emit('edited_message_caption', editedMessage);\n      }\n    } else if (channelPost) {\n      debug('Process Update channel_post %j', channelPost);\n      this.emit('channel_post', channelPost);\n    } else if (editedChannelPost) {\n      debug('Process Update edited_channel_post %j', editedChannelPost);\n      this.emit('edited_channel_post', editedChannelPost);\n      if (editedChannelPost.text) {\n        this.emit('edited_channel_post_text', editedChannelPost);\n      }\n      if (editedChannelPost.caption) {\n        this.emit('edited_channel_post_caption', editedChannelPost);\n      }\n    } else if (businessConnection) {\n      debug('Process Update business_connection %j', businessConnection);\n      this.emit('business_connection', businessConnection);\n    } else if (businesssMessage) {\n      debug('Process Update business_message %j', businesssMessage);\n      this.emit('business_message', businesssMessage);\n    } else if (editedBusinessMessage) {\n      debug('Process Update edited_business_message %j', editedBusinessMessage);\n      this.emit('edited_business_message', editedBusinessMessage);\n    } else if (deletedBusinessMessage) {\n      debug('Process Update deleted_business_messages %j', deletedBusinessMessage);\n      this.emit('deleted_business_messages', deletedBusinessMessage);\n    } else if (messageReaction) {\n      debug('Process Update message_reaction %j', messageReaction);\n      this.emit('message_reaction', messageReaction);\n    } else if (messageReactionCount) {\n      debug('Process Update message_reaction_count %j', messageReactionCount);\n      this.emit('message_reaction_count', messageReactionCount);\n    } else if (inlineQuery) {\n      debug('Process Update inline_query %j', inlineQuery);\n      this.emit('inline_query', inlineQuery);\n    } else if (chosenInlineResult) {\n      debug('Process Update chosen_inline_result %j', chosenInlineResult);\n      this.emit('chosen_inline_result', chosenInlineResult);\n    } else if (callbackQuery) {\n      debug('Process Update callback_query %j', callbackQuery);\n      this.emit('callback_query', callbackQuery);\n    } else if (shippingQuery) {\n      debug('Process Update shipping_query %j', shippingQuery);\n      this.emit('shipping_query', shippingQuery);\n    } else if (preCheckoutQuery) {\n      debug('Process Update pre_checkout_query %j', preCheckoutQuery);\n      this.emit('pre_checkout_query', preCheckoutQuery);\n    } else if (poll) {\n      debug('Process Update poll %j', poll);\n      this.emit('poll', poll);\n    } else if (pollAnswer) {\n      debug('Process Update poll_answer %j', pollAnswer);\n      this.emit('poll_answer', pollAnswer);\n    } else if (chatMember) {\n      debug('Process Update chat_member %j', chatMember);\n      this.emit('chat_member', chatMember);\n    } else if (myChatMember) {\n      debug('Process Update my_chat_member %j', myChatMember);\n      this.emit('my_chat_member', myChatMember);\n    } else if (chatJoinRequest) {\n      debug('Process Update my_chat_member %j', chatJoinRequest);\n      this.emit('chat_join_request', chatJoinRequest);\n    } else if (chatBoost) {\n      debug('Process Update chat_boost %j', chatBoost);\n      this.emit('chat_boost', chatBoost);\n    } else if (removedChatBoost) {\n      debug('Process Update removed_chat_boost %j', removedChatBoost);\n      this.emit('removed_chat_boost', removedChatBoost);\n    }\n  }\n\n  /** Start Telegram Bot API methods */\n\n  /**\n  * Use this method to receive incoming updates using long polling.\n  * This method has an [older, compatible signature][getUpdates-v0.25.0]\n  * that is being deprecated.\n  *\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise}\n  * @see https://core.telegram.org/bots/api#getupdates\n  */\n  getUpdates(form = {}) {\n    /* The older method signature was getUpdates(timeout, limit, offset).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature getUpdates(timeout, limit, offset) has been deprecated since v0.25.0');\n      form = {\n        timeout: arguments[0],\n        limit: arguments[1],\n        offset: arguments[2]\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n    return this._request('getUpdates', {\n      form\n    });\n  }\n\n  /**\n   * Specify an url to receive incoming updates via an outgoing webHook.\n   * This method has an [older, compatible signature][setWebHook-v0.25.0]\n   * that is being deprecated.\n   *\n   * @param  {String} url URL where Telegram will make HTTP Post. Leave empty to\n   * delete webHook.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {String|stream.Stream} [options.certificate] PEM certificate key (public).\n   * @param  {String} [options.secret_token] Optional secret token to be sent in a header `X-Telegram-Bot-Api-Secret-Token` in every webhook request.\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#setwebhook\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  setWebHook(url, options = {}, fileOptions = {}) {\n    /* The older method signature was setWebHook(url, cert).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    let cert;\n    // Note: 'options' could be an object, if a stream was provided (in place of 'cert')\n    if (typeof options !== 'object' || options instanceof stream.Stream) {\n      deprecate('The method signature setWebHook(url, cert) has been deprecated since v0.25.0');\n      cert = options;\n      options = {}; // eslint-disable-line no-param-reassign\n    } else {\n      cert = options.certificate;\n    }\n    const opts = {\n      qs: options\n    };\n    opts.qs.url = url;\n    if (cert) {\n      try {\n        const sendData = this._formatSendData('certificate', cert, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.certificate = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n    }\n    return this._request('setWebHook', opts);\n  }\n\n  /**\n   * Use this method to remove webhook integration if you decide to\n   * switch back to getUpdates. Returns True on success.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#deletewebhook\n   */\n  deleteWebHook(form = {}) {\n    return this._request('deleteWebhook', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get current webhook status.\n   * On success, returns a [WebhookInfo](https://core.telegram.org/bots/api#webhookinfo) object.\n   * If the bot is using getUpdates, will return an object with the\n   * url field empty.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getwebhookinfo\n   */\n  getWebHookInfo(form = {}) {\n    return this._request('getWebhookInfo', {\n      form\n    });\n  }\n\n  /**\n   * A simple method for testing your bot's authentication token. Requires no parameters.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} basic information about the bot in form of a [User](https://core.telegram.org/bots/api#user) object.\n   * @see https://core.telegram.org/bots/api#getme\n   */\n  getMe(form = {}) {\n    return this._request('getMe', {\n      form\n    });\n  }\n\n  /**\n   * This method log out your bot from the cloud Bot API server before launching the bot locally.\n   * You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates.\n   * After a successful call, you will not be able to log in again using the same token for 10 minutes.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#logout\n   */\n  logOut(form = {}) {\n    return this._request('logOut', {\n      form\n    });\n  }\n\n  /**\n   * This method close the bot instance before moving it from one local server to another.\n   * This method will return error 429 in the first 10 minutes after the bot is launched.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#close\n   */\n  close(form = {}) {\n    return this._request('close', {\n      form\n    });\n  }\n\n  /**\n   * Send text message.\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} text Text of the message to be sent\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendmessage\n   */\n  sendMessage(chatId, text, form = {}) {\n    form.chat_id = chatId;\n    form.text = text;\n    return this._request('sendMessage', {\n      form\n    });\n  }\n\n  /**\n   * Forward messages of any kind.\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * or username of the target channel (in the format `@channelusername`)\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent (or channel username in the format `@channelusername`)\n   * @param  {Number|String} messageId  Unique message identifier in the chat specified in fromChatId\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#forwardmessage\n   */\n  forwardMessage(chatId, fromChatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_id = messageId;\n    return this._request('forwardMessage', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to forward multiple messages of any kind.\n   * If some of the specified messages can't be found or forwarded, they are skipped.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * or username of the target channel (in the format `@channelusername`)\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent (or channel username in the format `@channelusername`)\n   * @param  {Array<Number|String>} messageIds Identifiers of 1-100 messages in the chat from_chat_id to forward.\n   * The identifiers must be specified in a strictly increasing order.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} An array of MessageId of the sent messages on success\n   * @see https://core.telegram.org/bots/api#forwardmessages\n   */\n  forwardMessages(chatId, fromChatId, messageIds, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_ids = messageIds;\n    return this._request('forwardMessages', {\n      form\n    });\n  }\n\n  /**\n   * Copy messages of any kind. **Service messages and invoice messages can't be copied.**\n   * The method is analogous to the method forwardMessages, but the copied message doesn't\n   * have a link to the original message.\n   * Returns the MessageId of the sent message on success.\n   * @param  {Number|String} chatId     Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent\n   * @param  {Number|String} messageId  Unique message identifier\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} The [MessageId](https://core.telegram.org/bots/api#messageid) of the sent message on success\n   * @see https://core.telegram.org/bots/api#copymessage\n   */\n  copyMessage(chatId, fromChatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_id = messageId;\n    return this._request('copyMessage', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped.\n   * Service messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied.\n   * Returns the MessageId of the sent message on success.\n   * @param  {Number|String} chatId Unique identifier for the target chat\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent\n   * @param  {Array} messageIds  Identifiers of 1-100 messages in the chat from_chat_id to copy.\n   * The identifiers must be specified in a strictly increasing order.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} An array of MessageId of the sent messages\n   * @see https://core.telegram.org/bots/api#copymessages\n   */\n  copyMessages(chatId, fromChatId, messageIds, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_ids = stringify(messageIds);\n    return this._request('copyMessages', {\n      form\n    });\n  }\n\n  /**\n   * Send photo\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} photo A file path or a Stream. Can\n   * also be a `file_id` previously uploaded\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendphoto\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendPhoto(chatId, photo, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('photo', photo, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.photo = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendPhoto', opts);\n  }\n\n  /**\n  * Send audio\n  *\n  * **Your audio must be in the .MP3 or .M4A format.**\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {String|stream.Stream|Buffer} audio A file path, Stream or Buffer.\n  * Can also be a `file_id` previously uploaded.\n  * @param  {Object} [options] Additional Telegram query options\n  * @param  {Object} [fileOptions] Optional file related meta-data\n  * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n  * @see https://core.telegram.org/bots/api#sendaudio\n  * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n  */\n  sendAudio(chatId, audio, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('audio', audio, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.audio = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendAudio', opts);\n  }\n\n  /**\n  * Send Document\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {String|stream.Stream|Buffer} doc A file path, Stream or Buffer.\n  * Can also be a `file_id` previously uploaded.\n  * @param  {Object} [options] Additional Telegram query options\n  * @param  {Object} [fileOptions] Optional file related meta-data\n  * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n  * @see https://core.telegram.org/bots/api#sendDocument\n  * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n  */\n  sendDocument(chatId, doc, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('document', doc, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.document = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendDocument', opts);\n  }\n\n  /**\n   * Use this method to send video files, **Telegram clients support mp4 videos** (other formats may be sent as Document).\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} video A file path or Stream.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendvideo\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendVideo(chatId, video, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('video', video, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.video = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVideo', opts);\n  }\n\n  /**\n   * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound).\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} animation A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendanimation\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendAnimation(chatId, animation, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('animation', animation, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.animation = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendAnimation', opts);\n  }\n\n  /**\n   * Send voice\n   *\n   * **Your audio must be in an .OGG file encoded with OPUS**, or in .MP3 format, or in .M4A format (other formats may be sent as Audio or Document)\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} voice A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendvoice\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendVoice(chatId, voice, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('voice', voice, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.voice = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVoice', opts);\n  }\n\n  /**\n   * Use this method to send video messages\n   * Telegram clients support **rounded square MPEG4 videos** of up to 1 minute long.\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} videoNote A file path or Stream.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @info The length parameter is actually optional. However, the API (at time of writing) requires you to always provide it until it is fixed.\n   * @see https://core.telegram.org/bots/api#sendvideonote\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n  */\n  sendVideoNote(chatId, videoNote, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('video_note', videoNote, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.video_note = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVideoNote', opts);\n  }\n\n  /**\n   * Use this method to send a group of photos or videos as an album.\n   *\n   * **Documents and audio files can be only grouped in an album with messages of the same type**\n   *\n   * If you wish to [specify file options](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files),\n   * add a `fileOptions` property to the target input in `media`.\n   *\n   * @param  {String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Array} media A JSON-serialized array describing photos and videos to be sent, must include 2–10 items\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, an array of the sent [Messages](https://core.telegram.org/bots/api#message)\n   * is returned.\n   * @see https://core.telegram.org/bots/api#sendmediagroup\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendMediaGroup(chatId, media, options = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    opts.formData = {};\n    const inputMedia = [];\n    let index = 0;\n    for (const input of media) {\n      const payload = Object.assign({}, input);\n      delete payload.media;\n      delete payload.fileOptions;\n      try {\n        const attachName = String(index);\n        const [formData, fileId] = this._formatSendData(attachName, input.media, input.fileOptions);\n        if (formData) {\n          opts.formData[attachName] = formData[attachName];\n          payload.media = `attach://${attachName}`;\n        } else {\n          payload.media = fileId;\n        }\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      inputMedia.push(payload);\n      index++;\n    }\n    opts.qs.media = stringify(inputMedia);\n    return this._request('sendMediaGroup', opts);\n  }\n\n  /**\n   * Send location.\n   * Use this method to send point on the map.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendlocation\n   */\n  sendLocation(chatId, latitude, longitude, form = {}) {\n    form.chat_id = chatId;\n    form.latitude = latitude;\n    form.longitude = longitude;\n    return this._request('sendLocation', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to edit live location messages sent by\n   * the bot or via the bot (for inline bots).\n   *\n   *  A location **can be edited until its live_period expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api#stopmessagelivelocation)**\n   *\n   * Note that you must provide one of chat_id, message_id, or\n   * inline_message_id in your request.\n   *\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n   * @see https://core.telegram.org/bots/api#editmessagelivelocation\n   */\n  editMessageLiveLocation(latitude, longitude, form = {}) {\n    form.latitude = latitude;\n    form.longitude = longitude;\n    return this._request('editMessageLiveLocation', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to stop updating a live location message sent by\n   * the bot or via the bot (for inline bots) before live_period expires.\n   *\n   * Note that you must provide one of chat_id, message_id, or\n   * inline_message_id in your request.\n   *\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n   * @see https://core.telegram.org/bots/api#stopmessagelivelocation\n   */\n  stopMessageLiveLocation(form = {}) {\n    return this._request('stopMessageLiveLocation', {\n      form\n    });\n  }\n\n  /**\n   * Send venue.\n   * Use this method to send information about a venue.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {String} title Name of the venue\n   * @param  {String} address Address of the venue\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned.\n   * @see https://core.telegram.org/bots/api#sendvenue\n   */\n  sendVenue(chatId, latitude, longitude, title, address, form = {}) {\n    form.chat_id = chatId;\n    form.latitude = latitude;\n    form.longitude = longitude;\n    form.title = title;\n    form.address = address;\n    return this._request('sendVenue', {\n      form\n    });\n  }\n\n  /**\n   * Send contact.\n   * Use this method to send phone contacts.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} phoneNumber Contact's phone number\n   * @param  {String} firstName Contact's first name\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendcontact\n   */\n  sendContact(chatId, phoneNumber, firstName, form = {}) {\n    form.chat_id = chatId;\n    form.phone_number = phoneNumber;\n    form.first_name = firstName;\n    return this._request('sendContact', {\n      form\n    });\n  }\n\n  /**\n   * Send poll.\n   * Use this method to send a native poll.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the group/channel\n   * @param  {String} question Poll question, 1-300 characters\n   * @param  {Array} pollOptions Poll options, between 2-10 options (only 1-100 characters each)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendpoll\n   */\n  sendPoll(chatId, question, pollOptions, form = {}) {\n    form.chat_id = chatId;\n    form.question = question;\n    form.options = stringify(pollOptions);\n    return this._request('sendPoll', {\n      form\n    });\n  }\n\n  /**\n   * Send Dice\n   * Use this method to send an animated emoji that will display a random value.\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#senddice\n   */\n  sendDice(chatId, options = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('dice');\n      opts.formData = sendData[0];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendDice', opts);\n  }\n\n  /**\n   * Send chat action.\n   *\n   * Use this method when you need to tell the user that something is happening on the bot's side.\n   * **The status is set for 5 seconds or less** (when a message arrives from your bot, Telegram clients clear its typing status).\n   *\n   *  Action `typing` for [text messages](https://core.telegram.org/bots/api#sendmessage),\n   * `upload_photo` for [photos](https://core.telegram.org/bots/api#sendphoto), `record_video` or `upload_video` for [videos](https://core.telegram.org/bots/api#sendvideo),\n   * `record_voice` or `upload_voice` for [voice notes](https://core.telegram.org/bots/api#sendvoice), `upload_document` for [general files](https://core.telegram.org/bots/api#senddocument),\n   * `choose_sticker` for [stickers](https://core.telegram.org/bots/api#sendsticker), `find_location` for [location data](https://core.telegram.org/bots/api#sendlocation),\n   * `record_video_note` or `upload_video_note` for [video notes](https://core.telegram.org/bots/api#sendvideonote).\n   *\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} action Type of action to broadcast.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#sendchataction\n   */\n  sendChatAction(chatId, action, form = {}) {\n    form.chat_id = chatId;\n    form.action = action;\n    return this._request('sendChatAction', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to change the chosen reactions on a message.\n   * - Service messages can't be reacted to.\n   * - Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel.\n   * - In albums, bots must react to the first message.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n   * @param  {Number} messageId  Unique identifier of the target message\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise<Boolean>} True on success\n   * @see https://core.telegram.org/bots/api#setmessagereaction\n   */\n  setMessageReaction(chatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = messageId;\n    if (form.reaction) {\n      form.reaction = stringify(form.reaction);\n    }\n    return this._request('setMessageReaction', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get a list of profile pictures for a user.\n   * Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.\n   * This method has an [older, compatible signature][getUserProfilePhotos-v0.25.0]\n   * that is being deprecated.\n   *\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object\n   * @see https://core.telegram.org/bots/api#getuserprofilephotos\n   */\n  getUserProfilePhotos(userId, form = {}) {\n    /* The older method signature was getUserProfilePhotos(userId, offset, limit).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature getUserProfilePhotos(userId, offset, limit) has been deprecated since v0.25.0');\n      form = {\n        offset: arguments[1],\n        limit: arguments[2]\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n    form.user_id = userId;\n    return this._request('getUserProfilePhotos', {\n      form\n    });\n  }\n\n  /**\n   * Get file.\n   * Use this method to get basic info about a file and prepare it for downloading.\n   *\n   * Attention: **link will be valid for 1 hour.**\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n   * @see https://core.telegram.org/bots/api#getfile\n   */\n  getFile(fileId, form = {}) {\n    form.file_id = fileId;\n    return this._request('getFile', {\n      form\n    });\n  }\n\n  /**\n    * Use this method to ban a user in a group, a supergroup or a channel.\n    * In the case of supergroups and channels, the user will not be able to\n    * return to the chat on their own using invite links, etc., unless unbanned first..\n    *\n    * The **bot must be an administrator in the group, supergroup or a channel** for this to work.\n    *\n    *\n    * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} userId  Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success.\n    * @see https://core.telegram.org/bots/api#banchatmember\n    */\n  banChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('banChatMember', {\n      form\n    });\n  }\n\n  /**\n  * Use this method to unban a previously kicked user in a supergroup.\n  * The user will not return to the group automatically, but will be\n  * able to join via link, etc.\n  *\n  * The **bot must be an administrator** in the supergroup or channel for this to work.\n  *\n  * **By default**, this method guarantees that after the call the user is not a member of the chat, but will be able to join it.\n  * So **if the user is a member of the chat they will also be removed from the chat**. If you don't want this, use the parameter *only_if_banned*\n  *\n  * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Number} userId  Unique identifier of the target user\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#unbanchatmember\n  */\n  unbanChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('unbanChatMember', {\n      form\n    });\n  }\n\n  /**\n  * Use this method to restrict a user in a supergroup.\n  * The bot **must be an administrator in the supergroup** for this to work\n  * and must have the appropriate admin rights. Pass True for all boolean parameters\n  * to lift restrictions from a user. Returns True on success.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Number} userId Unique identifier of the target user\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#restrictchatmember\n  */\n  restrictChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('restrictChatMember', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to promote or demote a user in a supergroup or a channel.\n   * The bot **must be an administrator** in the chat for this to work\n   * and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success.\n   * @see https://core.telegram.org/bots/api#promotechatmember\n   */\n  promoteChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('promoteChatMember', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to set a custom title for an administrator in a supergroup promoted by the bot.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId Unique identifier of the target user\n   * @param  {String} customTitle New custom title for the administrator; 0-16 characters, emoji are not allowed\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatadministratorcustomtitle\n   */\n  setChatAdministratorCustomTitle(chatId, userId, customTitle, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    form.custom_title = customTitle;\n    return this._request('setChatAdministratorCustomTitle', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to ban a channel chat in a supergroup or a channel.\n   *\n   * Until the chat is [unbanned](https://core.telegram.org/bots/api#unbanchatsenderchat), the owner of the banned chat won't be able to send messages on behalf of any of their channels.\n   * The bot **must be an administrator in the supergroup or channel** for this to work and must have the appropriate administrator rights\n   *\n   * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} senderChatId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success.\n   * @see https://core.telegram.org/bots/api#banchatsenderchat\n   */\n  banChatSenderChat(chatId, senderChatId, form = {}) {\n    form.chat_id = chatId;\n    form.sender_chat_id = senderChatId;\n    return this._request('banChatSenderChat', {\n      form\n    });\n  }\n\n  /**\n  * Use this method to unban a previously banned channel chat in a supergroup or channel.\n  *\n  * The bot **must be an administrator** for this to work and must have the appropriate administrator rights.\n  *\n  * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Number} senderChatId Unique identifier of the target user\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#unbanchatsenderchat\n  */\n  unbanChatSenderChat(chatId, senderChatId, form = {}) {\n    form.chat_id = chatId;\n    form.sender_chat_id = senderChatId;\n    return this._request('unbanChatSenderChat', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to set default chat permissions for all members.\n   *\n   * The bot **must be an administrator in the group or a supergroup** for this to\n   * work and **must have the `can_restrict_members` admin rights.**\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Array} chatPermissions New default chat permissions\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatpermissions\n   */\n  setChatPermissions(chatId, chatPermissions, form = {}) {\n    form.chat_id = chatId;\n    form.permissions = stringify(chatPermissions);\n    return this._request('setChatPermissions', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to generate a new primary invite link for a chat. **Any previously generated primary link is revoked**.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Exported invite link as String on success.\n   * @see https://core.telegram.org/bots/api#exportchatinvitelink\n   */\n  exportChatInviteLink(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('exportChatInviteLink', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to create an additional invite link for a chat.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * The link generated with this method can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api#revokechatinvitelink)\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Object} The new invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n   * @see https://core.telegram.org/bots/api#createchatinvitelink\n   */\n  createChatInviteLink(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('createChatInviteLink', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to edit a non-primary invite link created by the bot.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} inviteLink Text with the invite link to edit\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} The edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n   * @see https://core.telegram.org/bots/api#editchatinvitelink\n   */\n  editChatInviteLink(chatId, inviteLink, form = {}) {\n    form.chat_id = chatId;\n    form.invite_link = inviteLink;\n    return this._request('editChatInviteLink', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to revoke an invite link created by the bot.\n   * Note: If the primary link is revoked, a new link is automatically generated\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} inviteLink The invite link to revoke\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} The revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n   * @see https://core.telegram.org/bots/api#revokechatinvitelink\n   */\n  revokeChatInviteLink(chatId, inviteLink, form = {}) {\n    form.chat_id = chatId;\n    form.invite_link = inviteLink;\n    return this._request('revokeChatInviteLink', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to approve a chat join request.\n   *\n   * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right.**\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#approvechatjoinrequest\n   */\n  approveChatJoinRequest(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('approveChatJoinRequest', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to decline a chat join request.\n   *\n   * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right**.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#declinechatjoinrequest\n   */\n  declineChatJoinRequest(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('declineChatJoinRequest', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to set a new profile photo for the chat. **Photos can't be changed for private chats**.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {stream.Stream|Buffer} photo A file path or a Stream.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatphoto\n   */\n  setChatPhoto(chatId, photo, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('photo', photo, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.photo = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('setChatPhoto', opts);\n  }\n\n  /**\n  * Use this method to delete a chat photo. **Photos can't be changed for private chats**.\n  *\n  * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#deletechatphoto\n  */\n  deleteChatPhoto(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('deleteChatPhoto', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to change the title of a chat. **Titles can't be changed for private chats**.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} title New chat title, 1-255 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchattitle\n   */\n  setChatTitle(chatId, title, form = {}) {\n    form.chat_id = chatId;\n    form.title = title;\n    return this._request('setChatTitle', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to change the description of a group, a supergroup or a channel.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} description New chat title, 0-255 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatdescription\n   */\n  setChatDescription(chatId, description, form = {}) {\n    form.chat_id = chatId;\n    form.description = description;\n    return this._request('setChatDescription', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to pin a message in a supergroup.\n   *\n   * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n   * right in a supergroup or `can_edit_messages` administrator right in a channel.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} messageId Identifier of a message to pin\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#pinchatmessage\n   */\n  pinChatMessage(chatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = messageId;\n    return this._request('pinChatMessage', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to remove a message from the list of pinned messages in a chat\n   *\n   * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n   * right in a supergroup or `can_edit_messages` administrator right in a channel.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unpinchatmessage\n   */\n  unpinChatMessage(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unpinChatMessage', {\n      form\n    });\n  }\n\n  /**\n  * Use this method to clear the list of pinned messages in a chat.\n  *\n  * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n  * right in a supergroup or `can_edit_messages` administrator right in a channel.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#unpinallchatmessages\n  */\n  unpinAllChatMessages(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unpinAllChatMessages', {\n      form\n    });\n  }\n\n  /**\n   * Use this method for your bot to leave a group, supergroup or channel\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#leavechat\n   */\n  leaveChat(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('leaveChat', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get up to date information about the chat\n   * (current name of the user for one-on-one conversations, current\n   * username of a user, group or channel, etc.).\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`) or channel\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [ChatFullInfo](https://core.telegram.org/bots/api#chatfullinfo) object on success\n   * @see https://core.telegram.org/bots/api#getchat\n   */\n  getChat(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getChat', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get a list of administrators in a chat\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api#chatmember) objects that contains information about all chat administrators except other bots.\n   * If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned\n   * @see https://core.telegram.org/bots/api#getchatadministrators\n   */\n  getChatAdministrators(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getChatAdministrators', {\n      form\n    });\n  }\n\n  /**\n  * Use this method to get the number of members in a chat.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} Int on success\n  * @see https://core.telegram.org/bots/api#getchatmembercount\n  */\n  getChatMemberCount(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getChatMemberCount', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get information about a member of a chat.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [ChatMember](https://core.telegram.org/bots/api#chatmember) object on success\n   * @see https://core.telegram.org/bots/api#getchatmember\n   */\n  getChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('getChatMember', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to set a new group sticker set for a supergroup.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n   *\n   * **Note:** Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {String} stickerSetName Name of the sticker set to be set as the group sticker set\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatstickerset\n   */\n  setChatStickerSet(chatId, stickerSetName, form = {}) {\n    form.chat_id = chatId;\n    form.sticker_set_name = stickerSetName;\n    return this._request('setChatStickerSet', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to delete a group sticker set from a supergroup.\n   *\n   * Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletechatstickerset\n   */\n  deleteChatStickerSet(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('deleteChatStickerSet', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects\n   * @see https://core.telegram.org/bots/api#getforumtopiciconstickers\n   */\n  getForumTopicIconStickers(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getForumTopicIconStickers', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to create a topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n   *\n   * Returns information about the created topic as a [ForumTopic](https://core.telegram.org/bots/api#forumtopic) object.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {String} name Topic name, 1-128 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @see https://core.telegram.org/bots/api#createforumtopic\n   */\n  createForumTopic(chatId, name, form = {}) {\n    form.chat_id = chatId;\n    form.name = name;\n    return this._request('createForumTopic', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to edit name and icon of a topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#editforumtopic\n   */\n  editForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('editForumTopic', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to close an open topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#closeforumtopic\n   */\n  closeForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('closeForumTopic', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to reopen a closed topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#reopenforumtopic\n   */\n  reopenForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('reopenForumTopic', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to delete a forum topic along with all its messages in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deleteforumtopic\n   */\n  deleteForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('deleteForumTopic', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to clear the list of pinned messages in a forum topic.\n   * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unpinallforumtopicmessages\n   */\n  unpinAllForumTopicMessages(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('unpinAllForumTopicMessages', {\n      form\n    });\n  }\n\n  /**\n  * Use this method to edit the name of the 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically unhidden if it was hidden.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {String} name New topic name, 1-128 characters\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#editgeneralforumtopic\n  */\n  editGeneralForumTopic(chatId, name, form = {}) {\n    form.chat_id = chatId;\n    form.name = name;\n    return this._request('editGeneralForumTopic', {\n      form\n    });\n  }\n\n  /**\n  * Use this method to close an open 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically unhidden if it was hidden.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#closegeneralforumtopic\n  */\n  closeGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('closeGeneralForumTopic', {\n      form\n    });\n  }\n\n  /**\n  * Use this method to reopen a closed 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically unhidden if it was hidden.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#reopengeneralforumtopic\n  */\n  reopenGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('reopenGeneralForumTopic', {\n      form\n    });\n  }\n\n  /**\n  * Use this method to hide the 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically closed if it was open.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#hidegeneralforumtopic\n  */\n  hideGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('hideGeneralForumTopic', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to unhide the 'General' topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unhidegeneralforumtopic\n   */\n  unhideGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unhideGeneralForumTopic', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to clear the list of pinned messages in a General forum topic.\n   * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages\n   */\n  unpinAllGeneralForumTopicMessages(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unhideGeneralForumTopic', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to send answers to callback queries sent from\n   * [inline keyboards](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating).\n   *\n   * The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.\n   *\n   * This method has **older, compatible signatures ([1][answerCallbackQuery-v0.27.1])([2][answerCallbackQuery-v0.29.0])**\n   * that are being deprecated.\n   *\n   * @param  {String} callbackQueryId Unique identifier for the query to be answered\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#answercallbackquery\n   */\n  answerCallbackQuery(callbackQueryId, form = {}) {\n    /* The older method signature (in/before v0.27.1) was answerCallbackQuery(callbackQueryId, text, showAlert).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature answerCallbackQuery(callbackQueryId, text, showAlert) has been deprecated since v0.27.1');\n      form = {\n        callback_query_id: arguments[0],\n        text: arguments[1],\n        show_alert: arguments[2]\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n    /* The older method signature (in/before v0.29.0) was answerCallbackQuery([options]).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library. */\n    if (typeof callbackQueryId === 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature answerCallbackQuery([options]) has been deprecated since v0.29.0');\n      form = callbackQueryId;\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    } else {\n      form.callback_query_id = callbackQueryId;\n    }\n    return this._request('answerCallbackQuery', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get the list of boosts added to a chat by a use.\n   * Requires administrator rights in the chat\n   *\n   * @param  {Number|String} chatId  Unique identifier for the group/channel\n   * @param  {Number} user_id Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns a [UserChatBoosts](https://core.telegram.org/bots/api#userchatboosts) object\n   * @see https://core.telegram.org/bots/api#getuserchatboosts\n   */\n  getUserChatBoosts(chatId, pollId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = pollId;\n    return this._request('getUserChatBoosts', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get information about the connection of the bot with a business account\n   *\n   * @param  {Number|String} businessConnectionId  Unique identifier for the group/channel\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns [BusinessConnection](https://core.telegram.org/bots/api#businessconnection) object\n   * @see https://core.telegram.org/bots/api#getbusinessconnection\n   */\n  getBusinessConnection(businessConnectionId, form = {}) {\n    form.business_connection_id = businessConnectionId;\n    return this._request('getBusinessConnection', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to change the list of the bot's commands.\n   *\n   * See https://core.telegram.org/bots#commands for more details about bot commands\n   *\n   * @param  {Array} commands  List of bot commands to be set as the list of the [bot's commands](https://core.telegram.org/bots/api#botcommand). At most 100 commands can be specified.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setmycommands\n   */\n  setMyCommands(commands, form = {}) {\n    form.commands = stringify(commands);\n    if (form.scope) {\n      form.scope = stringify(form.scope);\n    }\n    return this._request('setMyCommands', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to delete the list of the bot's commands for the given scope and user language.\n   *\n   *  After deletion, [higher level commands](https://core.telegram.org/bots/api#determining-list-of-commands) will be shown to affected users.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletemycommands\n   */\n  deleteMyCommands(form = {}) {\n    return this._request('deleteMyCommands', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get the current list of the bot's commands for the given scope and user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Array of [BotCommand](https://core.telegram.org/bots/api#botcommand) on success. If commands aren't set, an empty list is returned.\n   * @see https://core.telegram.org/bots/api#getmycommands\n   */\n  getMyCommands(form = {}) {\n    if (form.scope) {\n      form.scope = stringify(form.scope);\n    }\n    return this._request('getMyCommands', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to change the bot's name.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setmyname\n   */\n  setMyName(form = {}) {\n    return this._request('setMyName', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get the current bot name for the given user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [BotName](https://core.telegram.org/bots/api#botname) on success\n   * @see https://core.telegram.org/bots/api#getmyname\n   */\n  getMyName(form = {}) {\n    return this._request('getMyName', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.\n   *\n   * Returns True on success.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setmydescription\n   */\n  setMyDescription(form = {}) {\n    return this._request('setMyDescription', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get the current bot description for the given user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Returns [BotDescription](https://core.telegram.org/bots/api#botdescription) on success.\n   * @see https://core.telegram.org/bots/api#getmydescription\n   */\n  getMyDescription(form = {}) {\n    return this._request('getMyDescription', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to change the bot's short description, which is shown on the bot's profile page\n   * and is sent together with the link when users share the bot.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Returns True on success.\n   * @see https://core.telegram.org/bots/api#setmyshortdescription\n   */\n  setMyShortDescription(form = {}) {\n    return this._request('setMyShortDescription', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get the current bot short description for the given user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Returns [BotShortDescription](https://core.telegram.org/bots/api#botshortdescription) on success.\n   * @see https://core.telegram.org/bots/api#getmyshortdescription\n   */\n  getMyShortDescription(form = {}) {\n    return this._request('getMyShortDescription', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to change the bot's menu button in a private chat, or the default menu button.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatmenubutton\n   */\n  setChatMenuButton(form = {}) {\n    return this._request('setChatMenuButton', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get the current value of the bot's menu button in a private chat, or the default menu button.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [MenuButton](https://core.telegram.org/bots/api#menubutton) on success\n   * @see https://core.telegram.org/bots/api#getchatmenubutton\n   */\n  getChatMenuButton(form = {}) {\n    return this._request('getChatMenuButton', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels.\n   *\n   * These rights will be suggested to users, but they are are free to modify the list before adding the bot.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#getchatmenubutton\n   */\n  setMyDefaultAdministratorRights(form = {}) {\n    return this._request('setMyDefaultAdministratorRights', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get the current default administrator rights of the bot.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [ChatAdministratorRights](https://core.telegram.org/bots/api#chatadministratorrights) on success\n   * @see https://core.telegram.org/bots/api#getmydefaultadministratorrights\n   */\n  getMyDefaultAdministratorRights(form = {}) {\n    return this._request('getMyDefaultAdministratorRights', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to edit text or [game](https://core.telegram.org/bots/api#games) messages sent by the bot or via the bot (for inline bots).\n   *\n   * Note: that **you must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {String} text  New text of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagetext\n   */\n  editMessageText(text, form = {}) {\n    form.text = text;\n    return this._request('editMessageText', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to edit captions of messages sent by the bot or via the bot (for inline bots).\n   *\n   * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {String} caption  New caption of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagecaption\n   */\n  editMessageCaption(caption, form = {}) {\n    form.caption = caption;\n    return this._request('editMessageCaption', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to edit animation, audio, document, photo, or video messages.\n   *\n   * If a message is a part of a message album, then it can be edited only to a photo or a video.\n   *\n   * Otherwise, message type can be changed arbitrarily. When inline message is edited, new file can't be uploaded.\n   * Use previously uploaded file via its file_id or specify a URL.\n   *\n   * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {Object} media  A JSON-serialized object for a new media content of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagemedia\n   */\n  editMessageMedia(media, form = {}) {\n    const regexAttach = /attach:\\/\\/.+/;\n    if (typeof media.media === 'string' && regexAttach.test(media.media)) {\n      const opts = {\n        qs: form\n      };\n      opts.formData = {};\n      const payload = Object.assign({}, media);\n      delete payload.media;\n      try {\n        const attachName = String(0);\n        const [formData] = this._formatSendData(attachName, media.media.replace('attach://', ''), media.fileOptions);\n        if (formData) {\n          opts.formData[attachName] = formData[attachName];\n          payload.media = `attach://${attachName}`;\n        } else {\n          throw new errors.FatalError(`Failed to process the replacement action for your ${media.type}`);\n        }\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      opts.qs.media = stringify(payload);\n      return this._request('editMessageMedia', opts);\n    }\n    form.media = stringify(media);\n    return this._request('editMessageMedia', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).\n   *\n   * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {Object} replyMarkup  A JSON-serialized object for an inline keyboard.\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagetext\n   */\n  editMessageReplyMarkup(replyMarkup, form = {}) {\n    form.reply_markup = replyMarkup;\n    return this._request('editMessageReplyMarkup', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to stop a poll which was sent by the bot.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the group/channel\n   * @param  {Number} pollId Identifier of the original message with the poll\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the stopped [Poll](https://core.telegram.org/bots/api#poll) is returned\n   * @see https://core.telegram.org/bots/api#stoppoll\n   */\n  stopPoll(chatId, pollId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = pollId;\n    return this._request('stopPoll', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS,\n   * or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers.\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} sticker A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded. Stickers are WebP format files.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n   * @see https://core.telegram.org/bots/api#sendsticker\n   */\n  sendSticker(chatId, sticker, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('sticker', sticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.sticker = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendSticker', opts);\n  }\n\n  /**\n   * Use this method to get a sticker set.\n   *\n   * @param  {String} name Name of the sticker set\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, a [StickerSet](https://core.telegram.org/bots/api#stickerset) object is returned\n   * @see https://core.telegram.org/bots/api#getstickerset\n   */\n  getStickerSet(name, form = {}) {\n    form.name = name;\n    return this._request('getStickerSet', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get information about custom emoji stickers by their identifiers.\n   *\n   * @param  {Array} custom_emoji_ids List of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects.\n   * @see https://core.telegram.org/bots/api#getcustomemojistickers\n   */\n  getCustomEmojiStickers(customEmojiIds, form = {}) {\n    form.custom_emoji_ids = stringify(customEmojiIds);\n    return this._request('getCustomEmojiStickers', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to upload a file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple\n   * times).\n   *\n   * @param  {Number} userId User identifier of sticker file owner\n   * @param  {String|stream.Stream|Buffer} sticker A file path or a Stream with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. Can also be a `file_id` previously uploaded.\n   * @param {String} stickerFormat Allow values:  `static`, `animated` or `video`\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n   * @see https://core.telegram.org/bots/api#uploadstickerfile\n   */\n  uploadStickerFile(userId, sticker, stickerFormat = 'static', options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.user_id = userId;\n    opts.qs.sticker_format = stickerFormat;\n    try {\n      const sendData = this._formatSendData('sticker', sticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.sticker = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('uploadStickerFile', opts);\n  }\n\n  /**\n   * Use this method to create new sticker set owned by a user.\n   *\n   * The bot will be able to edit the created sticker set.\n   *\n   * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n   *\n   * @param  {Number} userId User identifier of created sticker set owner\n   * @param  {String} name Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g.,   *\"animals\"*). Can contain only english letters, digits and underscores.\n   *  Must begin with a letter, can't contain consecutive underscores and must end in `\"_by_<bot_username>\"`. `<bot_username>` is case insensitive. 1-64 characters.\n   * @param  {String} title Sticker set title, 1-64 characters\n   * @param  {String|stream.Stream|Buffer} pngSticker Png image with the sticker, must be up to 512 kilobytes in size,\n   *  dimensions must not exceed 512px, and either width or height must be exactly 512px.\n   * @param  {String} emojis One or more emoji corresponding to the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#createnewstickerset\n   */\n  createNewStickerSet(userId, name, title, pngSticker, emojis, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.user_id = userId;\n    opts.qs.name = name;\n    opts.qs.title = title;\n    opts.qs.emojis = emojis;\n    opts.qs.mask_position = stringify(options.mask_position);\n    try {\n      const sendData = this._formatSendData('png_sticker', pngSticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.png_sticker = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('createNewStickerSet', opts);\n  }\n\n  /**\n   * Use this method to add a new sticker to a set created by the bot.\n   *\n   * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n   *\n   * Animated stickers can be added to animated sticker sets and only to them\n   *\n   * Note:\n   * - Emoji sticker sets can have up to 200 sticker\n   * - Static or Animated sticker sets can have up to 120 stickers\n   *\n   * @param  {Number} userId User identifier of sticker set owner\n   * @param  {String} name Sticker set name\n   * @param  {String|stream.Stream|Buffer} sticker Png image with the sticker (must be up to 512 kilobytes in size,\n   * dimensions must not exceed 512px, and either width or height must be exactly 512px, [TGS animation](https://core.telegram.org/stickers#animated-sticker-requirements)\n   * with the sticker or [WEBM video](https://core.telegram.org/stickers#video-sticker-requirements) with the sticker.\n   * @param  {String} emojis One or more emoji corresponding to the sticker\n   * @param  {String} stickerType Allow values: `png_sticker`, `tgs_sticker`, or `webm_sticker`.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#addstickertoset\n   */\n  addStickerToSet(userId, name, sticker, emojis, stickerType = 'png_sticker', options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.user_id = userId;\n    opts.qs.name = name;\n    opts.qs.emojis = emojis;\n    opts.qs.mask_position = stringify(options.mask_position);\n    if (typeof stickerType !== 'string' || ['png_sticker', 'tgs_sticker', 'webm_sticker'].indexOf(stickerType) === -1) {\n      return Promise.reject(new Error('stickerType must be a string and the allow types is: png_sticker, tgs_sticker, webm_sticker'));\n    }\n    try {\n      const sendData = this._formatSendData(stickerType, sticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs[stickerType] = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('addStickerToSet', opts);\n  }\n\n  /**\n   * Use this method to move a sticker in a set created by the bot to a specific position.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Number} position New sticker position in the set, zero-based\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickerpositioninset\n   */\n  setStickerPositionInSet(sticker, position, form = {}) {\n    form.sticker = sticker;\n    form.position = position;\n    return this._request('setStickerPositionInSet', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to delete a sticker from a set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletestickerfromset\n   * @todo Add tests for this method!\n   */\n  deleteStickerFromSet(sticker, form = {}) {\n    form.sticker = sticker;\n    return this._request('deleteStickerFromSet', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to replace an existing sticker in a sticker set with a new one\n   *\n   * @param  {Number} user_id User identifier of the sticker set owner\n   * @param  {String} name Sticker set name\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#replacestickerinset\n   * @todo Add tests for this method!\n   */\n  replaceStickerInSet(userId, name, oldSticker, form = {}) {\n    form.user_id = userId;\n    form.name = name;\n    form.old_sticker = oldSticker;\n    return this._request('deleteStickerFromSet', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to change the list of emoji assigned to a regular or custom emoji sticker.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param { Array } emojiList A JSON-serialized list of 1-20 emoji associated with the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickeremojilist\n   */\n  setStickerEmojiList(sticker, emojiList, form = {}) {\n    form.sticker = sticker;\n    form.emoji_list = stringify(emojiList);\n    return this._request('setStickerEmojiList', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to change the list of emoji assigned to a `regular` or `custom emoji` sticker.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickerkeywords\n   */\n  setStickerKeywords(sticker, form = {}) {\n    form.sticker = sticker;\n    if (form.keywords) {\n      form.keywords = stringify(form.keywords);\n    }\n    return this._request('setStickerKeywords', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to change the [mask position](https://core.telegram.org/bots/api#maskposition) of a mask sticker.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickermaskposition\n   */\n  setStickerMaskPosition(sticker, form = {}) {\n    form.sticker = sticker;\n    if (form.mask_position) {\n      form.mask_position = stringify(form.mask_position);\n    }\n    return this._request('setStickerMaskPosition', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to set the title of a created sticker set.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} name Sticker set name\n   * @param  {String} title Sticker set title, 1-64 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickersettitle\n   */\n  setStickerSetTitle(name, title, form = {}) {\n    form.name = name;\n    form.title = title;\n    return this._request('setStickerSetTitle', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to add a thumb to a set created by the bot.\n   *\n   * Animated thumbnails can be set for animated sticker sets only. Video thumbnails can be set only for video sticker sets only\n   *\n   * @param  {Number} userId User identifier of sticker set owner\n   * @param  {String} name Sticker set name\n   * @param  {String|stream.Stream|Buffer} thumbnail A .WEBP or .PNG image with the thumbnail,\n   * must be up to 128 kilobytes in size and have width and height exactly 100px,\n   * a TGS animation with the thumbnail up to 32 kilobytes in size or a WEBM video with the thumbnail up to 32 kilobytes in size.\n   *\n   * Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram\n   * to get a file from the Internet, or upload a new one. Animated sticker set thumbnails can't be uploaded via HTTP URL.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickersetthumbnail\n   */\n  setStickerSetThumbnail(userId, name, thumbnail, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.user_id = userId;\n    opts.qs.name = name;\n    opts.qs.mask_position = stringify(options.mask_position);\n    try {\n      const sendData = this._formatSendData('thumbnail', thumbnail, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.thumbnail = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('setStickerSetThumbnail', opts);\n  }\n\n  /**\n   * Use this method to set the thumbnail of a custom emoji sticker set.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} name Sticker set name\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setcustomemojistickersetthumbnail\n   */\n  setCustomEmojiStickerSetThumbnail(name, form = {}) {\n    form.name = name;\n    return this._request('setCustomEmojiStickerSetThumbnail', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to delete a sticker set that was created by the bot.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} name Sticker set name\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletestickerset\n   */\n  deleteStickerSet(name, form = {}) {\n    form.name = name;\n    return this._request('deleteStickerSet', {\n      form\n    });\n  }\n\n  /**\n   * Send answers to an inline query.\n   *\n   * Note: No more than 50 results per query are allowed.\n   *\n   * @param  {String} inlineQueryId Unique identifier of the query\n   * @param  {InlineQueryResult[]} results An array of results for the inline query\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, True is returned\n   * @see https://core.telegram.org/bots/api#answerinlinequery\n   */\n  answerInlineQuery(inlineQueryId, results, form = {}) {\n    form.inline_query_id = inlineQueryId;\n    form.results = stringify(results);\n    return this._request('answerInlineQuery', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to set the result of an interaction with a [Web App](https://core.telegram.org/bots/webapps)\n   * and send a corresponding message on behalf of the user to the chat from which the query originated.\n   *\n   * @param  {String} webAppQueryId Unique identifier for the query to be answered\n   * @param  {InlineQueryResult} result object that represents one result of an inline query\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, a [SentWebAppMessage](https://core.telegram.org/bots/api#sentwebappmessage) object is returned\n   * @see https://core.telegram.org/bots/api#answerwebappquery\n   */\n  answerWebAppQuery(webAppQueryId, result, form = {}) {\n    form.web_app_query_id = webAppQueryId;\n    form.result = stringify(result);\n    return this._request('answerWebAppQuery', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to send an invoice.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} title Product name, 1-32 characters\n   * @param  {String} description Product description, 1-255 characters\n   * @param  {String} payload Bot defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.\n   * @param  {String} providerToken Payments provider token, obtained via `@BotFather`\n   * @param  {String} currency Three-letter ISO 4217 currency code\n   * @param  {Array} prices Breakdown of prices\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n   * @see https://core.telegram.org/bots/api#sendinvoice\n   */\n  sendInvoice(chatId, title, description, payload, providerToken, currency, prices, form = {}) {\n    form.chat_id = chatId;\n    form.title = title;\n    form.description = description;\n    form.payload = payload;\n    form.provider_token = providerToken;\n    form.currency = currency;\n    form.prices = stringify(prices);\n    form.provider_data = stringify(form.provider_data);\n    if (form.suggested_tip_amounts) {\n      form.suggested_tip_amounts = stringify(form.suggested_tip_amounts);\n    }\n    return this._request('sendInvoice', {\n      form\n    });\n  }\n\n  /**\n  * Use this method to create a link for an invoice.\n  *\n  * @param {String} title Product name, 1-32 characters\n  * @param {String} description Product description, 1-255 characters\n  * @param {String} payload Bot defined invoice payload\n  * @param {String} providerToken Payment provider token\n  * @param {String} currency Three-letter ISO 4217 currency code\n  * @param {Array} prices Breakdown of prices\n  * @param {Object} [options] Additional Telegram query options\n  * @returns {Promise} The created invoice link as String on success.\n  * @see https://core.telegram.org/bots/api#createinvoicelink\n  */\n  createInvoiceLink(title, description, payload, providerToken, currency, prices, form = {}) {\n    form.title = title;\n    form.description = description;\n    form.payload = payload;\n    form.provider_token = providerToken;\n    form.currency = currency;\n    form.prices = stringify(prices);\n    return this._request('createInvoiceLink', {\n      form\n    });\n  }\n\n  /**\n  * Use this method to reply to shipping queries.\n  *\n  * If you sent an invoice requesting a shipping address and the parameter is_flexible was specified,\n  * the Bot API will send an [Update](https://core.telegram.org/bots/api#update) with a shipping_query field to the bot\n  *\n  * @param  {String} shippingQueryId  Unique identifier for the query to be answered\n  * @param  {Boolean} ok Specify if delivery of the product is possible\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} On success, True is returned\n  * @see https://core.telegram.org/bots/api#answershippingquery\n  */\n  answerShippingQuery(shippingQueryId, ok, form = {}) {\n    form.shipping_query_id = shippingQueryId;\n    form.ok = ok;\n    form.shipping_options = stringify(form.shipping_options);\n    return this._request('answerShippingQuery', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to respond to such pre-checkout queries\n   *\n   * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of\n   * an [Update](https://core.telegram.org/bots/api#update) with the field *pre_checkout_query*.\n   *\n   * **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n   *\n   * @param  {String} preCheckoutQueryId  Unique identifier for the query to be answered\n   * @param  {Boolean} ok Specify if every order details are ok\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, True is returned\n   * @see https://core.telegram.org/bots/api#answerprecheckoutquery\n   */\n  answerPreCheckoutQuery(preCheckoutQueryId, ok, form = {}) {\n    form.pre_checkout_query_id = preCheckoutQueryId;\n    form.ok = ok;\n    return this._request('answerPreCheckoutQuery', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to send a game.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} gameShortName name of the game to be sent. Set up your games via `@BotFather`.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n   * @see https://core.telegram.org/bots/api#sendgame\n   */\n  sendGame(chatId, gameShortName, form = {}) {\n    form.chat_id = chatId;\n    form.game_short_name = gameShortName;\n    return this._request('sendGame', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to set the score of the specified user in a game message.\n   *\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Number} score New score value, must be non-negative\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, if the message is not an inline message, the [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#setgamescore\n   */\n  setGameScore(userId, score, form = {}) {\n    form.user_id = userId;\n    form.score = score;\n    return this._request('setGameScore', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to get data for high score tables.\n   *\n   * Will return the score of the specified user and several of their neighbors in a game.\n   *\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns an Array of [GameHighScore](https://core.telegram.org/bots/api#gamehighscore) objects\n   * @see https://core.telegram.org/bots/api#getgamehighscores\n   */\n  getGameHighScores(userId, form = {}) {\n    form.user_id = userId;\n    return this._request('getGameHighScores', {\n      form\n    });\n  }\n\n  /**\n  * Use this method to delete a message, including service messages, with the following limitations:\n  * - A message can only be deleted if it was sent less than 48 hours ago.\n  * - A dice message can only be deleted if it was sent more than 24 hours ago.\n  * - Bots can delete outgoing messages in groups and supergroups.\n  * - Bots can delete incoming messages in groups, supergroups and channels.\n  * - Bots granted `can_post_messages` permissions can delete outgoing messages in channels.\n  * - If the bot is an administrator of a group, it can delete any message there.\n  * - If the bot has `can_delete_messages` permission in a supergroup, it can delete any message there.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n  * @param  {Number} messageId  Unique identifier of the target message\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#deletemessage\n  */\n  deleteMessage(chatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = messageId;\n    return this._request('deleteMessage', {\n      form\n    });\n  }\n\n  /**\n   * Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n   * @param  {Array<Number|String>} messageIds  Identifiers of 1-100 messages to delete. See deleteMessage for limitations on which messages can be deleted\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise<Boolean>} True on success\n   * @see https://core.telegram.org/bots/api#deletemessages\n   */\n  deleteMessages(chatId, messageIds, form = {}) {\n    form.chat_id = chatId;\n    form.message_ids = stringify(messageIds);\n    return this._request('deleteMessages', {\n      form\n    });\n  }\n}\nmodule.exports = TelegramBot;","map":{"version":3,"names":["require","shim","errors","TelegramBotWebHook","TelegramBotPolling","debug","EventEmitter","fileType","request","streamedRequest","qs","stream","mime","path","URL","fs","pump","deprecate","_messageTypes","_deprecatedMessageTypes","stringify","data","JSON","TelegramBot","messageTypes","on","event","listener","indexOf","url","join","constructor","token","options","polling","webHook","baseApiUrl","filepath","badRejection","_textRegexpCallbacks","_replyListenerId","_replyListeners","_polling","_webHook","autoStart","startPolling","autoOpen","openWebHook","_buildURL","_path","testEnvironment","_fixReplyMarkup","obj","replyMarkup","reply_markup","_fixEntitiesField","entities","captionEntities","caption_entities","explanationEntities","explanation_entities","_fixAddFileThumbnail","opts","thumb","formData","attachName","_formatSendData","replace","thumbnail","_fixReplyParameters","hasOwnProperty","reply_parameters","_request","Promise","reject","FatalError","Object","assign","form","method","simple","resolveWithFullResponse","forever","then","resp","body","parse","err","ParseError","ok","result","TelegramError","error_code","description","catch","error","response","type","fileOptions","deprecationMessage","filedata","filename","contentType","Stream","basename","toString","pathname","unescape","Buffer","isBuffer","process","env","NTBA_FIX_350","filetype","ext","existsSync","createReadStream","lookup","value","hasOpenWebHook","restart","start","initPolling","stopPolling","resolve","stop","getFileLink","fileId","getFile","file_path","getFileStream","fileStream","PassThrough","fileURI","emit","uri","downloadFile","downloadDir","promise","a","b","info","fileName","slice","lastIndexOf","filePath","createWriteStream","onText","regexp","callback","push","removeTextListener","index","findIndex","textListener","String","splice","clearTextListeners","onReplyToMessage","chatId","messageId","id","removeReplyListener","replyListenerId","replyListener","clearReplyListeners","isPolling","open","closeWebHook","close","isOpen","processUpdate","update","message","editedMessage","edited_message","channelPost","channel_post","editedChannelPost","edited_channel_post","businessConnection","business_connection","businesssMessage","business_message","editedBusinessMessage","edited_business_message","deletedBusinessMessage","deleted_business_messages","messageReaction","message_reaction","messageReactionCount","message_reaction_count","inlineQuery","inline_query","chosenInlineResult","chosen_inline_result","callbackQuery","callback_query","shippingQuery","shipping_query","preCheckoutQuery","pre_checkout_query","poll","pollAnswer","poll_answer","myChatMember","my_chat_member","chatMember","chat_member","chatJoinRequest","chat_join_request","chatBoost","chat_boost","removedChatBoost","removed_chat_boost","metadata","find","messageType","text","some","reg","RegExp","exec","lastIndex","onlyFirstMatch","reply_to_message","forEach","reply","chat","message_id","caption","getUpdates","timeout","arguments","limit","offset","setWebHook","cert","certificate","sendData","ex","deleteWebHook","getWebHookInfo","getMe","logOut","sendMessage","chat_id","forwardMessage","fromChatId","from_chat_id","forwardMessages","messageIds","message_ids","copyMessage","copyMessages","sendPhoto","photo","sendAudio","audio","sendDocument","doc","document","sendVideo","video","sendAnimation","animation","sendVoice","voice","sendVideoNote","videoNote","video_note","sendMediaGroup","media","inputMedia","input","payload","sendLocation","latitude","longitude","editMessageLiveLocation","stopMessageLiveLocation","sendVenue","title","address","sendContact","phoneNumber","firstName","phone_number","first_name","sendPoll","question","pollOptions","sendDice","sendChatAction","action","setMessageReaction","reaction","getUserProfilePhotos","userId","user_id","file_id","banChatMember","unbanChatMember","restrictChatMember","promoteChatMember","setChatAdministratorCustomTitle","customTitle","custom_title","banChatSenderChat","senderChatId","sender_chat_id","unbanChatSenderChat","setChatPermissions","chatPermissions","permissions","exportChatInviteLink","createChatInviteLink","editChatInviteLink","inviteLink","invite_link","revokeChatInviteLink","approveChatJoinRequest","declineChatJoinRequest","setChatPhoto","deleteChatPhoto","setChatTitle","setChatDescription","pinChatMessage","unpinChatMessage","unpinAllChatMessages","leaveChat","getChat","getChatAdministrators","getChatMemberCount","getChatMember","setChatStickerSet","stickerSetName","sticker_set_name","deleteChatStickerSet","getForumTopicIconStickers","createForumTopic","name","editForumTopic","messageThreadId","message_thread_id","closeForumTopic","reopenForumTopic","deleteForumTopic","unpinAllForumTopicMessages","editGeneralForumTopic","closeGeneralForumTopic","reopenGeneralForumTopic","hideGeneralForumTopic","unhideGeneralForumTopic","unpinAllGeneralForumTopicMessages","answerCallbackQuery","callbackQueryId","callback_query_id","show_alert","getUserChatBoosts","pollId","getBusinessConnection","businessConnectionId","business_connection_id","setMyCommands","commands","scope","deleteMyCommands","getMyCommands","setMyName","getMyName","setMyDescription","getMyDescription","setMyShortDescription","getMyShortDescription","setChatMenuButton","getChatMenuButton","setMyDefaultAdministratorRights","getMyDefaultAdministratorRights","editMessageText","editMessageCaption","editMessageMedia","regexAttach","test","editMessageReplyMarkup","stopPoll","sendSticker","sticker","getStickerSet","getCustomEmojiStickers","customEmojiIds","custom_emoji_ids","uploadStickerFile","stickerFormat","sticker_format","createNewStickerSet","pngSticker","emojis","mask_position","png_sticker","addStickerToSet","stickerType","Error","setStickerPositionInSet","position","deleteStickerFromSet","replaceStickerInSet","oldSticker","old_sticker","setStickerEmojiList","emojiList","emoji_list","setStickerKeywords","keywords","setStickerMaskPosition","setStickerSetTitle","setStickerSetThumbnail","setCustomEmojiStickerSetThumbnail","deleteStickerSet","answerInlineQuery","inlineQueryId","results","inline_query_id","answerWebAppQuery","webAppQueryId","web_app_query_id","sendInvoice","providerToken","currency","prices","provider_token","provider_data","suggested_tip_amounts","createInvoiceLink","answerShippingQuery","shippingQueryId","shipping_query_id","shipping_options","answerPreCheckoutQuery","preCheckoutQueryId","pre_checkout_query_id","sendGame","gameShortName","game_short_name","setGameScore","score","getGameHighScores","deleteMessage","deleteMessages","module","exports"],"sources":["/Users/boristrunov/Desktop/LevelCoin/project/node_modules/node-telegram-bot-api/src/telegram.js"],"sourcesContent":["// shims\nrequire('array.prototype.findindex').shim(); // for Node.js v0.x\n\nconst errors = require('./errors');\nconst TelegramBotWebHook = require('./telegramWebHook');\nconst TelegramBotPolling = require('./telegramPolling');\nconst debug = require('debug')('node-telegram-bot-api');\nconst EventEmitter = require('eventemitter3');\nconst fileType = require('file-type');\nconst request = require('@cypress/request-promise');\nconst streamedRequest = require('@cypress/request');\nconst qs = require('querystring');\nconst stream = require('stream');\nconst mime = require('mime');\nconst path = require('path');\nconst URL = require('url');\nconst fs = require('fs');\nconst pump = require('pump');\nconst deprecate = require('./utils').deprecate;\n\nconst _messageTypes = [\n  'text',\n  'animation',\n  'audio',\n  'channel_chat_created',\n  'contact',\n  'delete_chat_photo',\n  'dice',\n  'document',\n  'game',\n  'group_chat_created',\n  'invoice',\n  'left_chat_member',\n  'location',\n  'migrate_from_chat_id',\n  'migrate_to_chat_id',\n  'new_chat_members',\n  'new_chat_photo',\n  'new_chat_title',\n  'passport_data',\n  'photo',\n  'pinned_message',\n  'poll',\n  'sticker',\n  'successful_payment',\n  'supergroup_chat_created',\n  'video',\n  'video_note',\n  'voice',\n  'video_chat_started',\n  'video_chat_ended',\n  'video_chat_participants_invited',\n  'video_chat_scheduled',\n  'message_auto_delete_timer_changed',\n  'chat_invite_link',\n  'chat_member_updated',\n  'web_app_data',\n  'message_reaction'\n];\n\nconst _deprecatedMessageTypes = [\n  'new_chat_participant', 'left_chat_participant'\n];\n\n/**\n * JSON-serialize data. If the provided data is already a String,\n * return it as is.\n * @private\n * @param  {*} data\n * @return {String}\n */\nfunction stringify(data) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  return JSON.stringify(data);\n}\n\n\nclass TelegramBot extends EventEmitter {\n  /**\n   * The different errors the library uses.\n   * @type {Object}\n   */\n  static get errors() {\n    return errors;\n  }\n\n  /**\n   * The types of message updates the library handles.\n   * @type {String[]}\n   */\n  static get messageTypes() {\n    return _messageTypes;\n  }\n\n  /**\n   * Add listener for the specified [event](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events).\n   * This is the usual `emitter.on()` method.\n   * @param  {String} event\n   * @param  {Function} listener\n   * @see {@link https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events|Available events}\n   * @see https://nodejs.org/api/events.html#events_emitter_on_eventname_listener\n   */\n  on(event, listener) {\n    if (_deprecatedMessageTypes.indexOf(event) !== -1) {\n      const url = 'https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events';\n      deprecate(`Events ${_deprecatedMessageTypes.join(',')} are deprecated. See the updated list of events: ${url}`);\n    }\n    super.on(event, listener);\n  }\n\n  /**\n   * Both request method to obtain messages are implemented. To use standard polling, set `polling: true`\n   * on `options`. Notice that [webHook](https://core.telegram.org/bots/api#setwebhook) will need a SSL certificate.\n   * Emits `message` when a message arrives.\n   *\n   * @class TelegramBot\n   * @constructor\n   * @param {String} token Bot Token\n   * @param {Object} [options]\n   * @param {Boolean|Object} [options.polling=false] Set true to enable polling or set options.\n   *  If a WebHook has been set, it will be deleted automatically.\n   * @param {String|Number} [options.polling.timeout=10] *Deprecated. Use `options.polling.params` instead*.\n   *  Timeout in seconds for long polling.\n   * @param {Boolean} [options.testEnvironment=false] Set true to  work with test enviroment.\n   * When working with the test environment, you may use HTTP links without TLS to test your Web App.\n   * @param {String|Number} [options.polling.interval=300] Interval between requests in miliseconds\n   * @param {Boolean} [options.polling.autoStart=true] Start polling immediately\n   * @param {Object} [options.polling.params] Parameters to be used in polling API requests.\n   *  See https://core.telegram.org/bots/api#getupdates for more information.\n   * @param  {Number} [options.polling.params.timeout=10] Timeout in seconds for long polling.\n   * @param {Boolean|Object} [options.webHook=false] Set true to enable WebHook or set options\n   * @param {String} [options.webHook.host=\"0.0.0.0\"] Host to bind to\n   * @param {Number} [options.webHook.port=8443] Port to bind to\n   * @param {String} [options.webHook.key] Path to file with PEM private key for webHook server.\n   *  The file is read **synchronously**!\n   * @param {String} [options.webHook.cert] Path to file with PEM certificate (public) for webHook server.\n   *  The file is read **synchronously**!\n   * @param {String} [options.webHook.pfx] Path to file with PFX private key and certificate chain for webHook server.\n   *  The file is read **synchronously**!\n   * @param {Boolean} [options.webHook.autoOpen=true] Open webHook immediately\n   * @param {Object} [options.webHook.https] Options to be passed to `https.createServer()`.\n   *  Note that `options.webHook.key`, `options.webHook.cert` and `options.webHook.pfx`, if provided, will be\n   *  used to override `key`, `cert` and `pfx` in this object, respectively.\n   *  See https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener for more information.\n   * @param {String} [options.webHook.healthEndpoint=\"/healthz\"] An endpoint for health checks that always responds with 200 OK\n   * @param {Boolean} [options.onlyFirstMatch=false] Set to true to stop after first match. Otherwise, all regexps are executed\n   * @param {Object} [options.request] Options which will be added for all requests to telegram api.\n   *  See https://github.com/request/request#requestoptions-callback for more information.\n   * @param {String} [options.baseApiUrl=\"https://api.telegram.org\"] API Base URl; useful for proxying and testing\n   * @param {Boolean} [options.filepath=true] Allow passing file-paths as arguments when sending files,\n   *  such as photos using `TelegramBot#sendPhoto()`. See [usage information][usage-sending-files-performance]\n   *  for more information on this option and its consequences.\n   * @param {Boolean} [options.badRejection=false] Set to `true`\n   *  **if and only if** the Node.js version you're using terminates the\n   *  process on unhandled rejections. This option is only for\n   *  *forward-compatibility purposes*.\n   * @see https://core.telegram.org/bots/api\n   */\n  constructor(token, options = {}) {\n    super();\n    this.token = token;\n    this.options = options;\n    this.options.polling = (typeof options.polling === 'undefined') ? false : options.polling;\n    this.options.webHook = (typeof options.webHook === 'undefined') ? false : options.webHook;\n    this.options.baseApiUrl = options.baseApiUrl || 'https://api.telegram.org';\n    this.options.filepath = (typeof options.filepath === 'undefined') ? true : options.filepath;\n    this.options.badRejection = (typeof options.badRejection === 'undefined') ? false : options.badRejection;\n    this._textRegexpCallbacks = [];\n    this._replyListenerId = 0;\n    this._replyListeners = [];\n    this._polling = null;\n    this._webHook = null;\n\n    if (options.polling) {\n      const autoStart = options.polling.autoStart;\n      if (typeof autoStart === 'undefined' || autoStart === true) {\n        this.startPolling();\n      }\n    }\n\n    if (options.webHook) {\n      const autoOpen = options.webHook.autoOpen;\n      if (typeof autoOpen === 'undefined' || autoOpen === true) {\n        this.openWebHook();\n      }\n    }\n  }\n\n  /**\n   * Generates url with bot token and provided path/method you want to be got/executed by bot\n   * @param  {String} path\n   * @return {String} url\n   * @private\n   * @see https://core.telegram.org/bots/api#making-requests\n   */\n  _buildURL(_path) {\n    return `${this.options.baseApiUrl}/bot${this.token}${this.options.testEnvironment ? '/test' : ''}/${_path}`;\n  }\n\n  /**\n   * Fix 'reply_markup' parameter by making it JSON-serialized, as\n   * required by the Telegram Bot API\n   * @param {Object} obj Object; either 'form' or 'qs'\n   * @private\n   * @see https://core.telegram.org/bots/api#sendmessage\n   */\n  _fixReplyMarkup(obj) {\n    const replyMarkup = obj.reply_markup;\n    if (replyMarkup && typeof replyMarkup !== 'string') {\n      obj.reply_markup = stringify(replyMarkup);\n    }\n  }\n\n  /**\n   * Fix 'entities' or 'caption_entities' or 'explanation_entities' parameter by making it JSON-serialized, as\n   * required by the Telegram Bot API\n   * @param {Object} obj Object;\n   * @private\n   * @see https://core.telegram.org/bots/api#sendmessage\n   * @see https://core.telegram.org/bots/api#copymessage\n   * @see https://core.telegram.org/bots/api#sendpoll\n   */\n  _fixEntitiesField(obj) {\n    const entities = obj.entities;\n    const captionEntities = obj.caption_entities;\n    const explanationEntities = obj.explanation_entities;\n    if (entities && typeof entities !== 'string') {\n      obj.entities = stringify(entities);\n    }\n\n    if (captionEntities && typeof captionEntities !== 'string') {\n      obj.caption_entities = stringify(captionEntities);\n    }\n\n    if (explanationEntities && typeof explanationEntities !== 'string') {\n      obj.explanation_entities = stringify(explanationEntities);\n    }\n  }\n\n  _fixAddFileThumbnail(options, opts) {\n    if (options.thumb) {\n      if (opts.formData === null) {\n        opts.formData = {};\n      }\n\n      const attachName = 'photo';\n      const [formData] = this._formatSendData(attachName, options.thumb.replace('attach://', ''));\n\n      if (formData) {\n        opts.formData[attachName] = formData[attachName];\n        opts.qs.thumbnail = `attach://${attachName}`;\n      }\n    }\n  }\n\n  /**\n   * Fix 'reply_parameters' parameter by making it JSON-serialized, as\n   * required by the Telegram Bot API\n   * @param {Object} obj Object; either 'form' or 'qs'\n   * @private\n   * @see https://core.telegram.org/bots/api#sendmessage\n   */\n  _fixReplyParameters(obj) {\n    if (obj.hasOwnProperty('reply_parameters') && typeof obj.reply_parameters !== 'string') {\n      obj.reply_parameters = stringify(obj.reply_parameters);\n    }\n  }\n\n  /**\n   * Make request against the API\n   * @param  {String} _path API endpoint\n   * @param  {Object} [options]\n   * @private\n   * @return {Promise}\n   */\n  _request(_path, options = {}) {\n    if (!this.token) {\n      return Promise.reject(new errors.FatalError('Telegram Bot Token not provided!'));\n    }\n\n    if (this.options.request) {\n      Object.assign(options, this.options.request);\n    }\n\n    if (options.form) {\n      this._fixReplyMarkup(options.form);\n      this._fixEntitiesField(options.form);\n      this._fixReplyParameters(options.form);\n    }\n    if (options.qs) {\n      this._fixReplyMarkup(options.qs);\n      this._fixReplyParameters(options.qs);\n    }\n\n    options.method = 'POST';\n    options.url = this._buildURL(_path);\n    options.simple = false;\n    options.resolveWithFullResponse = true;\n    options.forever = true;\n    debug('HTTP request: %j', options);\n    return request(options)\n      .then(resp => {\n        let data;\n        try {\n          data = resp.body = JSON.parse(resp.body);\n        } catch (err) {\n          throw new errors.ParseError(`Error parsing response: ${resp.body}`, resp);\n        }\n\n        if (data.ok) {\n          return data.result;\n        }\n\n        throw new errors.TelegramError(`${data.error_code} ${data.description}`, resp);\n      }).catch(error => {\n        // TODO: why can't we do `error instanceof errors.BaseError`?\n        if (error.response) throw error;\n        throw new errors.FatalError(error);\n      });\n  }\n\n  /**\n   * Format data to be uploaded; handles file paths, streams and buffers\n   * @param  {String} type\n   * @param  {String|stream.Stream|Buffer} data\n   * @param  {Object} fileOptions File options\n   * @param  {String} [fileOptions.filename] File name\n   * @param  {String} [fileOptions.contentType] Content type (i.e. MIME)\n   * @return {Array} formatted\n   * @return {Object} formatted[0] formData\n   * @return {String} formatted[1] fileId\n   * @throws Error if Buffer file type is not supported.\n   * @see https://npmjs.com/package/file-type\n   * @private\n   */\n  _formatSendData(type, data, fileOptions = {}) {\n    const deprecationMessage =\n      'See https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files' +\n      ' for more information on how sending files has been improved and' +\n      ' on how to disable this deprecation message altogether.';\n    let filedata = data;\n    let filename = fileOptions.filename;\n    let contentType = fileOptions.contentType;\n\n    if (data instanceof stream.Stream) {\n      if (!filename && data.path) {\n        // Will be 'null' if could not be parsed.\n        // For example, 'data.path' === '/?id=123' from 'request(\"https://example.com/?id=123\")'\n        const url = URL.parse(path.basename(data.path.toString()));\n        if (url.pathname) {\n          filename = qs.unescape(url.pathname);\n        }\n      }\n    } else if (Buffer.isBuffer(data)) {\n      if (!filename && !process.env.NTBA_FIX_350) {\n        deprecate(`Buffers will have their filenames default to \"filename\" instead of \"data\". ${deprecationMessage}`);\n        filename = 'data';\n      }\n      if (!contentType) {\n        const filetype = fileType(data);\n        if (filetype) {\n          contentType = filetype.mime;\n          const ext = filetype.ext;\n          if (ext && !process.env.NTBA_FIX_350) {\n            filename = `${filename}.${ext}`;\n          }\n        } else if (!process.env.NTBA_FIX_350) {\n          deprecate(`An error will no longer be thrown if file-type of buffer could not be detected. ${deprecationMessage}`);\n          throw new errors.FatalError('Unsupported Buffer file-type');\n        }\n      }\n    } else if (data) {\n      if (this.options.filepath && fs.existsSync(data)) {\n        filedata = fs.createReadStream(data);\n        if (!filename) {\n          filename = path.basename(data);\n        }\n      } else {\n        return [null, data];\n      }\n    } else {\n      return [null, data];\n    }\n\n    filename = filename || 'filename';\n    contentType = contentType || mime.lookup(filename);\n    if (process.env.NTBA_FIX_350) {\n      contentType = contentType || 'application/octet-stream';\n    } else {\n      deprecate(`In the future, content-type of files you send will default to \"application/octet-stream\". ${deprecationMessage}`);\n    }\n\n    // TODO: Add missing file extension.\n\n    return [{\n      [type]: {\n        value: filedata,\n        options: {\n          filename,\n          contentType,\n        },\n      },\n    }, null];\n  }\n\n  /**\n   * Start polling.\n   * Rejects returned promise if a WebHook is being used by this instance.\n   * @param  {Object} [options]\n   * @param  {Boolean} [options.restart=true] Consecutive calls to this method causes polling to be restarted\n   * @return {Promise}\n   */\n  startPolling(options = {}) {\n    if (this.hasOpenWebHook()) {\n      return Promise.reject(new errors.FatalError('Polling and WebHook are mutually exclusive'));\n    }\n    options.restart = typeof options.restart === 'undefined' ? true : options.restart;\n    if (!this._polling) {\n      this._polling = new TelegramBotPolling(this);\n    }\n    return this._polling.start(options);\n  }\n\n  /**\n   * Alias of `TelegramBot#startPolling()`. This is **deprecated**.\n   * @param  {Object} [options]\n   * @return {Promise}\n   * @deprecated\n   */\n  initPolling() {\n    deprecate('TelegramBot#initPolling() is deprecated. Use TelegramBot#startPolling() instead.');\n    return this.startPolling();\n  }\n\n  /**\n   * Stops polling after the last polling request resolves.\n   * Multiple invocations do nothing if polling is already stopped.\n   * Returning the promise of the last polling request is **deprecated**.\n   * @param  {Object} [options] Options\n   * @param  {Boolean} [options.cancel] Cancel current request\n   * @param  {String} [options.reason] Reason for stopping polling\n   * @return {Promise}\n   */\n  stopPolling(options) {\n    if (!this._polling) {\n      return Promise.resolve();\n    }\n    return this._polling.stop(options);\n  }\n\n  /**\n   * Get link for file.\n   * Use this method to get link for file for subsequent use.\n   * Attention: link will be valid for 1 hour.\n   *\n   * This method is a sugar extension of the (getFile)[#getfilefileid] method,\n   * which returns just path to file on remote server (you will have to manually build full uri after that).\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Promise which will have  *fileURI* in resolve callback\n   * @see https://core.telegram.org/bots/api#getfile\n   */\n  getFileLink(fileId, form = {}) {\n    return this.getFile(fileId, form)\n      .then(resp => `${this.options.baseApiUrl}/file/bot${this.token}/${resp.file_path}`);\n  }\n\n  /**\n   * Return a readable stream for file.\n   *\n   * `fileStream.path` is the specified file ID i.e. `fileId`.\n   * `fileStream` emits event `info` passing a single argument i.e.\n   * `info` with the interface `{ uri }` where `uri` is the URI of the\n   * file on Telegram servers.\n   *\n   * This method is a sugar extension of the [getFileLink](#TelegramBot+getFileLink) method,\n   * which returns the full URI to the file on remote server.\n   *\n   * @param  {String} fileId File identifier to get info about\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {stream.Readable} fileStream\n   */\n  getFileStream(fileId, form = {}) {\n    const fileStream = new stream.PassThrough();\n    fileStream.path = fileId;\n    this.getFileLink(fileId, form)\n      .then((fileURI) => {\n        fileStream.emit('info', {\n          uri: fileURI,\n        });\n        pump(streamedRequest(Object.assign({ uri: fileURI }, this.options.request)), fileStream);\n      })\n      .catch((error) => {\n        fileStream.emit('error', error);\n      });\n    return fileStream;\n  }\n\n  /**\n   * Downloads file in the specified folder.\n   *\n   * This method is a sugar extension of the [getFileStream](#TelegramBot+getFileStream) method,\n   * which returns a readable file stream.\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @param  {String} downloadDir Absolute path to the folder in which file will be saved\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Promise, which will have *filePath* of downloaded file in resolve callback\n   */\n  downloadFile(fileId, downloadDir, form = {}) {\n    let resolve;\n    let reject;\n    const promise = new Promise((a, b) => {\n      resolve = a;\n      reject = b;\n    });\n    const fileStream = this.getFileStream(fileId, form);\n    fileStream.on('info', (info) => {\n      const fileName = info.uri.slice(info.uri.lastIndexOf('/') + 1);\n      // TODO: Ensure fileName doesn't contains slashes\n      const filePath = path.join(downloadDir, fileName);\n      pump(fileStream, fs.createWriteStream(filePath), (error) => {\n        if (error) { return reject(error); }\n        return resolve(filePath);\n      });\n    });\n    fileStream.on('error', (err) => {\n      reject(err);\n    });\n    return promise;\n  }\n\n  /**\n   * Register a RegExp to test against an incomming text message.\n   * @param  {RegExp}   regexpRexecuted with `exec`.\n   * @param  {Function} callback     Callback will be called with 2 parameters,\n   * the `msg` and the result of executing `regexp.exec` on message text.\n   */\n  onText(regexp, callback) {\n    this._textRegexpCallbacks.push({ regexp, callback });\n  }\n\n  /**\n   * Remove a listener registered with `onText()`.\n   * @param  {RegExp} regexp RegExp used previously in `onText()`\n   * @return {Object} deletedListener The removed reply listener if\n   *   found. This object has `regexp` and `callback`\n   *   properties. If not found, returns `null`.\n   */\n  removeTextListener(regexp) {\n    const index = this._textRegexpCallbacks.findIndex((textListener) => {\n      return String(textListener.regexp) === String(regexp);\n    });\n    if (index === -1) {\n      return null;\n    }\n    return this._textRegexpCallbacks.splice(index, 1)[0];\n  }\n\n  /**\n   * Remove all listeners registered with `onText()`.\n   */\n  clearTextListeners() {\n    this._textRegexpCallbacks = [];\n  }\n\n  /**\n   * Register a reply to wait for a message response.\n   *\n   * @param  {Number|String} chatId The chat id where the message cames from.\n   * @param  {Number|String} messageId The message id to be replied.\n   * @param  {Function} callback Callback will be called with the reply\n   *  message.\n   * @return {Number} id The ID of the inserted reply listener.\n   */\n  onReplyToMessage(chatId, messageId, callback) {\n    const id = ++this._replyListenerId;\n    this._replyListeners.push({\n      id,\n      chatId,\n      messageId,\n      callback\n    });\n    return id;\n  }\n\n  /**\n   * Removes a reply that has been prev. registered for a message response.\n   * @param   {Number} replyListenerId The ID of the reply listener.\n   * @return  {Object} deletedListener The removed reply listener if\n   *   found. This object has `id`, `chatId`, `messageId` and `callback`\n   *   properties. If not found, returns `null`.\n   */\n  removeReplyListener(replyListenerId) {\n    const index = this._replyListeners.findIndex((replyListener) => {\n      return replyListener.id === replyListenerId;\n    });\n    if (index === -1) {\n      return null;\n    }\n    return this._replyListeners.splice(index, 1)[0];\n  }\n\n  /**\n   * Removes all replies that have been prev. registered for a message response.\n   *\n   * @return  {Array} deletedListeners An array of removed listeners.\n   */\n  clearReplyListeners() {\n    this._replyListeners = [];\n  }\n\n  /**\n   * Return true if polling. Otherwise, false.\n   *\n   * @return {Boolean}\n   */\n  isPolling() {\n    return this._polling ? this._polling.isPolling() : false;\n  }\n\n  /**\n   * Open webhook.\n   * Multiple invocations do nothing if webhook is already open.\n   * Rejects returned promise if Polling is being used by this instance.\n   *\n   * @return {Promise}\n   */\n  openWebHook() {\n    if (this.isPolling()) {\n      return Promise.reject(new errors.FatalError('WebHook and Polling are mutually exclusive'));\n    }\n    if (!this._webHook) {\n      this._webHook = new TelegramBotWebHook(this);\n    }\n    return this._webHook.open();\n  }\n\n  /**\n   * Close webhook after closing all current connections.\n   * Multiple invocations do nothing if webhook is already closed.\n   *\n   * @return {Promise} Promise\n   */\n  closeWebHook() {\n    if (!this._webHook) {\n      return Promise.resolve();\n    }\n    return this._webHook.close();\n  }\n\n  /**\n   * Return true if using webhook and it is open i.e. accepts connections.\n   * Otherwise, false.\n   *\n   * @return {Boolean}\n   */\n  hasOpenWebHook() {\n    return this._webHook ? this._webHook.isOpen() : false;\n  }\n\n\n  /**\n   * Process an update; emitting the proper events and executing regexp\n   * callbacks. This method is useful should you be using a different\n   * way to fetch updates, other than those provided by TelegramBot.\n   *\n   * @param  {Object} update\n   * @see https://core.telegram.org/bots/api#update\n   */\n  processUpdate(update) {\n    debug('Process Update %j', update);\n    const message = update.message;\n    const editedMessage = update.edited_message;\n    const channelPost = update.channel_post;\n    const editedChannelPost = update.edited_channel_post;\n    const businessConnection = update.business_connection;\n    const businesssMessage = update.business_message;\n    const editedBusinessMessage = update.edited_business_message;\n    const deletedBusinessMessage = update.deleted_business_messages;\n    const messageReaction = update.message_reaction;\n    const messageReactionCount = update.message_reaction_count;\n    const inlineQuery = update.inline_query;\n    const chosenInlineResult = update.chosen_inline_result;\n    const callbackQuery = update.callback_query;\n    const shippingQuery = update.shipping_query;\n    const preCheckoutQuery = update.pre_checkout_query;\n    const poll = update.poll;\n    const pollAnswer = update.poll_answer;\n    const myChatMember = update.my_chat_member;\n    const chatMember = update.chat_member;\n    const chatJoinRequest = update.chat_join_request;\n    const chatBoost = update.chat_boost;\n    const removedChatBoost = update.removed_chat_boost;\n\n\n    if (message) {\n      debug('Process Update message %j', message);\n      const metadata = {};\n      metadata.type = TelegramBot.messageTypes.find((messageType) => {\n        return message[messageType];\n      });\n      this.emit('message', message, metadata);\n      if (metadata.type) {\n        debug('Emitting %s: %j', metadata.type, message);\n        this.emit(metadata.type, message, metadata);\n      }\n      if (message.text) {\n        debug('Text message');\n        this._textRegexpCallbacks.some(reg => {\n          debug('Matching %s with %s', message.text, reg.regexp);\n\n          if (!(reg.regexp instanceof RegExp)) {\n            reg.regexp = new RegExp(reg.regexp);\n          }\n\n          const result = reg.regexp.exec(message.text);\n          if (!result) {\n            return false;\n          }\n          // reset index so we start at the beginning of the regex each time\n          reg.regexp.lastIndex = 0;\n          debug('Matches %s', reg.regexp);\n          reg.callback(message, result);\n          // returning truthy value exits .some\n          return this.options.onlyFirstMatch;\n        });\n      }\n      if (message.reply_to_message) {\n        // Only callbacks waiting for this message\n        this._replyListeners.forEach(reply => {\n          // Message from the same chat\n          if (reply.chatId === message.chat.id) {\n            // Responding to that message\n            if (reply.messageId === message.reply_to_message.message_id) {\n              // Resolve the promise\n              reply.callback(message);\n            }\n          }\n        });\n      }\n    } else if (editedMessage) {\n      debug('Process Update edited_message %j', editedMessage);\n      this.emit('edited_message', editedMessage);\n      if (editedMessage.text) {\n        this.emit('edited_message_text', editedMessage);\n      }\n      if (editedMessage.caption) {\n        this.emit('edited_message_caption', editedMessage);\n      }\n    } else if (channelPost) {\n      debug('Process Update channel_post %j', channelPost);\n      this.emit('channel_post', channelPost);\n    } else if (editedChannelPost) {\n      debug('Process Update edited_channel_post %j', editedChannelPost);\n      this.emit('edited_channel_post', editedChannelPost);\n      if (editedChannelPost.text) {\n        this.emit('edited_channel_post_text', editedChannelPost);\n      }\n      if (editedChannelPost.caption) {\n        this.emit('edited_channel_post_caption', editedChannelPost);\n      }\n    } else if (businessConnection) {\n      debug('Process Update business_connection %j', businessConnection);\n      this.emit('business_connection', businessConnection);\n    } else if (businesssMessage) {\n      debug('Process Update business_message %j', businesssMessage);\n      this.emit('business_message', businesssMessage);\n    } else if (editedBusinessMessage) {\n      debug('Process Update edited_business_message %j', editedBusinessMessage);\n      this.emit('edited_business_message', editedBusinessMessage);\n    } else if (deletedBusinessMessage) {\n      debug('Process Update deleted_business_messages %j', deletedBusinessMessage);\n      this.emit('deleted_business_messages', deletedBusinessMessage);\n    } else if (messageReaction) {\n      debug('Process Update message_reaction %j', messageReaction);\n      this.emit('message_reaction', messageReaction);\n    } else if (messageReactionCount) {\n      debug('Process Update message_reaction_count %j', messageReactionCount);\n      this.emit('message_reaction_count', messageReactionCount);\n    } else if (inlineQuery) {\n      debug('Process Update inline_query %j', inlineQuery);\n      this.emit('inline_query', inlineQuery);\n    } else if (chosenInlineResult) {\n      debug('Process Update chosen_inline_result %j', chosenInlineResult);\n      this.emit('chosen_inline_result', chosenInlineResult);\n    } else if (callbackQuery) {\n      debug('Process Update callback_query %j', callbackQuery);\n      this.emit('callback_query', callbackQuery);\n    } else if (shippingQuery) {\n      debug('Process Update shipping_query %j', shippingQuery);\n      this.emit('shipping_query', shippingQuery);\n    } else if (preCheckoutQuery) {\n      debug('Process Update pre_checkout_query %j', preCheckoutQuery);\n      this.emit('pre_checkout_query', preCheckoutQuery);\n    } else if (poll) {\n      debug('Process Update poll %j', poll);\n      this.emit('poll', poll);\n    } else if (pollAnswer) {\n      debug('Process Update poll_answer %j', pollAnswer);\n      this.emit('poll_answer', pollAnswer);\n    } else if (chatMember) {\n      debug('Process Update chat_member %j', chatMember);\n      this.emit('chat_member', chatMember);\n    } else if (myChatMember) {\n      debug('Process Update my_chat_member %j', myChatMember);\n      this.emit('my_chat_member', myChatMember);\n    } else if (chatJoinRequest) {\n      debug('Process Update my_chat_member %j', chatJoinRequest);\n      this.emit('chat_join_request', chatJoinRequest);\n    } else if (chatBoost) {\n      debug('Process Update chat_boost %j', chatBoost);\n      this.emit('chat_boost', chatBoost);\n    } else if (removedChatBoost) {\n      debug('Process Update removed_chat_boost %j', removedChatBoost);\n      this.emit('removed_chat_boost', removedChatBoost);\n    }\n  }\n\n  /** Start Telegram Bot API methods */\n\n  /**\n  * Use this method to receive incoming updates using long polling.\n  * This method has an [older, compatible signature][getUpdates-v0.25.0]\n  * that is being deprecated.\n  *\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise}\n  * @see https://core.telegram.org/bots/api#getupdates\n  */\n  getUpdates(form = {}) {\n    /* The older method signature was getUpdates(timeout, limit, offset).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature getUpdates(timeout, limit, offset) has been deprecated since v0.25.0');\n      form = {\n        timeout: arguments[0],\n        limit: arguments[1],\n        offset: arguments[2],\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n\n    return this._request('getUpdates', { form });\n  }\n\n  /**\n   * Specify an url to receive incoming updates via an outgoing webHook.\n   * This method has an [older, compatible signature][setWebHook-v0.25.0]\n   * that is being deprecated.\n   *\n   * @param  {String} url URL where Telegram will make HTTP Post. Leave empty to\n   * delete webHook.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {String|stream.Stream} [options.certificate] PEM certificate key (public).\n   * @param  {String} [options.secret_token] Optional secret token to be sent in a header `X-Telegram-Bot-Api-Secret-Token` in every webhook request.\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#setwebhook\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  setWebHook(url, options = {}, fileOptions = {}) {\n    /* The older method signature was setWebHook(url, cert).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    let cert;\n    // Note: 'options' could be an object, if a stream was provided (in place of 'cert')\n    if (typeof options !== 'object' || options instanceof stream.Stream) {\n      deprecate('The method signature setWebHook(url, cert) has been deprecated since v0.25.0');\n      cert = options;\n      options = {}; // eslint-disable-line no-param-reassign\n    } else {\n      cert = options.certificate;\n    }\n\n    const opts = {\n      qs: options,\n    };\n    opts.qs.url = url;\n\n    if (cert) {\n      try {\n        const sendData = this._formatSendData('certificate', cert, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.certificate = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n    }\n\n    return this._request('setWebHook', opts);\n  }\n\n  /**\n   * Use this method to remove webhook integration if you decide to\n   * switch back to getUpdates. Returns True on success.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#deletewebhook\n   */\n  deleteWebHook(form = {}) {\n    return this._request('deleteWebhook', { form });\n  }\n\n  /**\n   * Use this method to get current webhook status.\n   * On success, returns a [WebhookInfo](https://core.telegram.org/bots/api#webhookinfo) object.\n   * If the bot is using getUpdates, will return an object with the\n   * url field empty.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getwebhookinfo\n   */\n  getWebHookInfo(form = {}) {\n    return this._request('getWebhookInfo', { form });\n  }\n\n  /**\n   * A simple method for testing your bot's authentication token. Requires no parameters.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} basic information about the bot in form of a [User](https://core.telegram.org/bots/api#user) object.\n   * @see https://core.telegram.org/bots/api#getme\n   */\n  getMe(form = {}) {\n    return this._request('getMe', { form });\n  }\n\n  /**\n   * This method log out your bot from the cloud Bot API server before launching the bot locally.\n   * You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates.\n   * After a successful call, you will not be able to log in again using the same token for 10 minutes.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#logout\n   */\n  logOut(form = {}) {\n    return this._request('logOut', { form });\n  }\n\n  /**\n   * This method close the bot instance before moving it from one local server to another.\n   * This method will return error 429 in the first 10 minutes after the bot is launched.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#close\n   */\n  close(form = {}) {\n    return this._request('close', { form });\n  }\n\n  /**\n   * Send text message.\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} text Text of the message to be sent\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendmessage\n   */\n  sendMessage(chatId, text, form = {}) {\n    form.chat_id = chatId;\n    form.text = text;\n    return this._request('sendMessage', { form });\n  }\n\n  /**\n   * Forward messages of any kind.\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * or username of the target channel (in the format `@channelusername`)\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent (or channel username in the format `@channelusername`)\n   * @param  {Number|String} messageId  Unique message identifier in the chat specified in fromChatId\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#forwardmessage\n   */\n  forwardMessage(chatId, fromChatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_id = messageId;\n    return this._request('forwardMessage', { form });\n  }\n\n  /**\n   * Use this method to forward multiple messages of any kind.\n   * If some of the specified messages can't be found or forwarded, they are skipped.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * or username of the target channel (in the format `@channelusername`)\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent (or channel username in the format `@channelusername`)\n   * @param  {Array<Number|String>} messageIds Identifiers of 1-100 messages in the chat from_chat_id to forward.\n   * The identifiers must be specified in a strictly increasing order.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} An array of MessageId of the sent messages on success\n   * @see https://core.telegram.org/bots/api#forwardmessages\n   */\n  forwardMessages(chatId, fromChatId, messageIds, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_ids = messageIds;\n    return this._request('forwardMessages', { form });\n  }\n\n  /**\n   * Copy messages of any kind. **Service messages and invoice messages can't be copied.**\n   * The method is analogous to the method forwardMessages, but the copied message doesn't\n   * have a link to the original message.\n   * Returns the MessageId of the sent message on success.\n   * @param  {Number|String} chatId     Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent\n   * @param  {Number|String} messageId  Unique message identifier\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} The [MessageId](https://core.telegram.org/bots/api#messageid) of the sent message on success\n   * @see https://core.telegram.org/bots/api#copymessage\n   */\n  copyMessage(chatId, fromChatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_id = messageId;\n    return this._request('copyMessage', { form });\n  }\n\n  /**\n   * Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped.\n   * Service messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied.\n   * Returns the MessageId of the sent message on success.\n   * @param  {Number|String} chatId Unique identifier for the target chat\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent\n   * @param  {Array} messageIds  Identifiers of 1-100 messages in the chat from_chat_id to copy.\n   * The identifiers must be specified in a strictly increasing order.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} An array of MessageId of the sent messages\n   * @see https://core.telegram.org/bots/api#copymessages\n   */\n  copyMessages(chatId, fromChatId, messageIds, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_ids = stringify(messageIds);\n    return this._request('copyMessages', { form });\n  }\n\n  /**\n   * Send photo\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} photo A file path or a Stream. Can\n   * also be a `file_id` previously uploaded\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendphoto\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendPhoto(chatId, photo, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('photo', photo, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.photo = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendPhoto', opts);\n  }\n\n  /**\n  * Send audio\n  *\n  * **Your audio must be in the .MP3 or .M4A format.**\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {String|stream.Stream|Buffer} audio A file path, Stream or Buffer.\n  * Can also be a `file_id` previously uploaded.\n  * @param  {Object} [options] Additional Telegram query options\n  * @param  {Object} [fileOptions] Optional file related meta-data\n  * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n  * @see https://core.telegram.org/bots/api#sendaudio\n  * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n  */\n  sendAudio(chatId, audio, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n\n    opts.qs.chat_id = chatId;\n\n    try {\n      const sendData = this._formatSendData('audio', audio, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.audio = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n\n    return this._request('sendAudio', opts);\n  }\n\n  /**\n  * Send Document\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {String|stream.Stream|Buffer} doc A file path, Stream or Buffer.\n  * Can also be a `file_id` previously uploaded.\n  * @param  {Object} [options] Additional Telegram query options\n  * @param  {Object} [fileOptions] Optional file related meta-data\n  * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n  * @see https://core.telegram.org/bots/api#sendDocument\n  * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n  */\n  sendDocument(chatId, doc, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('document', doc, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.document = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n\n    return this._request('sendDocument', opts);\n  }\n\n  /**\n   * Use this method to send video files, **Telegram clients support mp4 videos** (other formats may be sent as Document).\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} video A file path or Stream.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendvideo\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendVideo(chatId, video, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('video', video, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.video = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVideo', opts);\n  }\n\n  /**\n   * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound).\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} animation A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendanimation\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendAnimation(chatId, animation, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('animation', animation, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.animation = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendAnimation', opts);\n  }\n\n  /**\n   * Send voice\n   *\n   * **Your audio must be in an .OGG file encoded with OPUS**, or in .MP3 format, or in .M4A format (other formats may be sent as Audio or Document)\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} voice A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendvoice\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendVoice(chatId, voice, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('voice', voice, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.voice = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVoice', opts);\n  }\n\n  /**\n   * Use this method to send video messages\n   * Telegram clients support **rounded square MPEG4 videos** of up to 1 minute long.\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} videoNote A file path or Stream.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @info The length parameter is actually optional. However, the API (at time of writing) requires you to always provide it until it is fixed.\n   * @see https://core.telegram.org/bots/api#sendvideonote\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n  */\n  sendVideoNote(chatId, videoNote, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('video_note', videoNote, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.video_note = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVideoNote', opts);\n  }\n\n  /**\n   * Use this method to send a group of photos or videos as an album.\n   *\n   * **Documents and audio files can be only grouped in an album with messages of the same type**\n   *\n   * If you wish to [specify file options](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files),\n   * add a `fileOptions` property to the target input in `media`.\n   *\n   * @param  {String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Array} media A JSON-serialized array describing photos and videos to be sent, must include 2–10 items\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, an array of the sent [Messages](https://core.telegram.org/bots/api#message)\n   * is returned.\n   * @see https://core.telegram.org/bots/api#sendmediagroup\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendMediaGroup(chatId, media, options = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.chat_id = chatId;\n\n    opts.formData = {};\n    const inputMedia = [];\n    let index = 0;\n    for (const input of media) {\n      const payload = Object.assign({}, input);\n      delete payload.media;\n      delete payload.fileOptions;\n      try {\n        const attachName = String(index);\n        const [formData, fileId] = this._formatSendData(attachName, input.media, input.fileOptions);\n        if (formData) {\n          opts.formData[attachName] = formData[attachName];\n          payload.media = `attach://${attachName}`;\n        } else {\n          payload.media = fileId;\n        }\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      inputMedia.push(payload);\n      index++;\n    }\n    opts.qs.media = stringify(inputMedia);\n\n    return this._request('sendMediaGroup', opts);\n  }\n\n\n  /**\n   * Send location.\n   * Use this method to send point on the map.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendlocation\n   */\n  sendLocation(chatId, latitude, longitude, form = {}) {\n    form.chat_id = chatId;\n    form.latitude = latitude;\n    form.longitude = longitude;\n    return this._request('sendLocation', { form });\n  }\n\n  /**\n   * Use this method to edit live location messages sent by\n   * the bot or via the bot (for inline bots).\n   *\n   *  A location **can be edited until its live_period expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api#stopmessagelivelocation)**\n   *\n   * Note that you must provide one of chat_id, message_id, or\n   * inline_message_id in your request.\n   *\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n   * @see https://core.telegram.org/bots/api#editmessagelivelocation\n   */\n  editMessageLiveLocation(latitude, longitude, form = {}) {\n    form.latitude = latitude;\n    form.longitude = longitude;\n    return this._request('editMessageLiveLocation', { form });\n  }\n\n  /**\n   * Use this method to stop updating a live location message sent by\n   * the bot or via the bot (for inline bots) before live_period expires.\n   *\n   * Note that you must provide one of chat_id, message_id, or\n   * inline_message_id in your request.\n   *\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n   * @see https://core.telegram.org/bots/api#stopmessagelivelocation\n   */\n  stopMessageLiveLocation(form = {}) {\n    return this._request('stopMessageLiveLocation', { form });\n  }\n\n  /**\n   * Send venue.\n   * Use this method to send information about a venue.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {String} title Name of the venue\n   * @param  {String} address Address of the venue\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned.\n   * @see https://core.telegram.org/bots/api#sendvenue\n   */\n  sendVenue(chatId, latitude, longitude, title, address, form = {}) {\n    form.chat_id = chatId;\n    form.latitude = latitude;\n    form.longitude = longitude;\n    form.title = title;\n    form.address = address;\n    return this._request('sendVenue', { form });\n  }\n\n  /**\n   * Send contact.\n   * Use this method to send phone contacts.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} phoneNumber Contact's phone number\n   * @param  {String} firstName Contact's first name\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendcontact\n   */\n  sendContact(chatId, phoneNumber, firstName, form = {}) {\n    form.chat_id = chatId;\n    form.phone_number = phoneNumber;\n    form.first_name = firstName;\n    return this._request('sendContact', { form });\n  }\n\n  /**\n   * Send poll.\n   * Use this method to send a native poll.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the group/channel\n   * @param  {String} question Poll question, 1-300 characters\n   * @param  {Array} pollOptions Poll options, between 2-10 options (only 1-100 characters each)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendpoll\n   */\n  sendPoll(chatId, question, pollOptions, form = {}) {\n    form.chat_id = chatId;\n    form.question = question;\n    form.options = stringify(pollOptions);\n    return this._request('sendPoll', { form });\n  }\n\n  /**\n   * Send Dice\n   * Use this method to send an animated emoji that will display a random value.\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#senddice\n   */\n  sendDice(chatId, options = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('dice');\n      opts.formData = sendData[0];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendDice', opts);\n  }\n\n\n  /**\n   * Send chat action.\n   *\n   * Use this method when you need to tell the user that something is happening on the bot's side.\n   * **The status is set for 5 seconds or less** (when a message arrives from your bot, Telegram clients clear its typing status).\n   *\n   *  Action `typing` for [text messages](https://core.telegram.org/bots/api#sendmessage),\n   * `upload_photo` for [photos](https://core.telegram.org/bots/api#sendphoto), `record_video` or `upload_video` for [videos](https://core.telegram.org/bots/api#sendvideo),\n   * `record_voice` or `upload_voice` for [voice notes](https://core.telegram.org/bots/api#sendvoice), `upload_document` for [general files](https://core.telegram.org/bots/api#senddocument),\n   * `choose_sticker` for [stickers](https://core.telegram.org/bots/api#sendsticker), `find_location` for [location data](https://core.telegram.org/bots/api#sendlocation),\n   * `record_video_note` or `upload_video_note` for [video notes](https://core.telegram.org/bots/api#sendvideonote).\n   *\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} action Type of action to broadcast.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#sendchataction\n   */\n  sendChatAction(chatId, action, form = {}) {\n    form.chat_id = chatId;\n    form.action = action;\n    return this._request('sendChatAction', { form });\n  }\n\n  /**\n   * Use this method to change the chosen reactions on a message.\n   * - Service messages can't be reacted to.\n   * - Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel.\n   * - In albums, bots must react to the first message.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n   * @param  {Number} messageId  Unique identifier of the target message\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise<Boolean>} True on success\n   * @see https://core.telegram.org/bots/api#setmessagereaction\n   */\n  setMessageReaction(chatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = messageId;\n    if (form.reaction) {\n      form.reaction = stringify(form.reaction);\n    }\n    return this._request('setMessageReaction', { form });\n  }\n\n  /**\n   * Use this method to get a list of profile pictures for a user.\n   * Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.\n   * This method has an [older, compatible signature][getUserProfilePhotos-v0.25.0]\n   * that is being deprecated.\n   *\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object\n   * @see https://core.telegram.org/bots/api#getuserprofilephotos\n   */\n  getUserProfilePhotos(userId, form = {}) {\n    /* The older method signature was getUserProfilePhotos(userId, offset, limit).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature getUserProfilePhotos(userId, offset, limit) has been deprecated since v0.25.0');\n      form = {\n        offset: arguments[1],\n        limit: arguments[2],\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n    form.user_id = userId;\n    return this._request('getUserProfilePhotos', { form });\n  }\n\n  /**\n   * Get file.\n   * Use this method to get basic info about a file and prepare it for downloading.\n   *\n   * Attention: **link will be valid for 1 hour.**\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n   * @see https://core.telegram.org/bots/api#getfile\n   */\n  getFile(fileId, form = {}) {\n    form.file_id = fileId;\n    return this._request('getFile', { form });\n  }\n\n  /**\n    * Use this method to ban a user in a group, a supergroup or a channel.\n    * In the case of supergroups and channels, the user will not be able to\n    * return to the chat on their own using invite links, etc., unless unbanned first..\n    *\n    * The **bot must be an administrator in the group, supergroup or a channel** for this to work.\n    *\n    *\n    * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} userId  Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success.\n    * @see https://core.telegram.org/bots/api#banchatmember\n    */\n  banChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('banChatMember', { form });\n  }\n\n  /**\n  * Use this method to unban a previously kicked user in a supergroup.\n  * The user will not return to the group automatically, but will be\n  * able to join via link, etc.\n  *\n  * The **bot must be an administrator** in the supergroup or channel for this to work.\n  *\n  * **By default**, this method guarantees that after the call the user is not a member of the chat, but will be able to join it.\n  * So **if the user is a member of the chat they will also be removed from the chat**. If you don't want this, use the parameter *only_if_banned*\n  *\n  * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Number} userId  Unique identifier of the target user\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#unbanchatmember\n  */\n  unbanChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('unbanChatMember', { form });\n  }\n\n  /**\n  * Use this method to restrict a user in a supergroup.\n  * The bot **must be an administrator in the supergroup** for this to work\n  * and must have the appropriate admin rights. Pass True for all boolean parameters\n  * to lift restrictions from a user. Returns True on success.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Number} userId Unique identifier of the target user\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#restrictchatmember\n  */\n  restrictChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('restrictChatMember', { form });\n  }\n\n  /**\n   * Use this method to promote or demote a user in a supergroup or a channel.\n   * The bot **must be an administrator** in the chat for this to work\n   * and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success.\n   * @see https://core.telegram.org/bots/api#promotechatmember\n   */\n  promoteChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('promoteChatMember', { form });\n  }\n\n  /**\n   * Use this method to set a custom title for an administrator in a supergroup promoted by the bot.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId Unique identifier of the target user\n   * @param  {String} customTitle New custom title for the administrator; 0-16 characters, emoji are not allowed\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatadministratorcustomtitle\n   */\n  setChatAdministratorCustomTitle(chatId, userId, customTitle, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    form.custom_title = customTitle;\n    return this._request('setChatAdministratorCustomTitle', { form });\n  }\n\n\n  /**\n   * Use this method to ban a channel chat in a supergroup or a channel.\n   *\n   * Until the chat is [unbanned](https://core.telegram.org/bots/api#unbanchatsenderchat), the owner of the banned chat won't be able to send messages on behalf of any of their channels.\n   * The bot **must be an administrator in the supergroup or channel** for this to work and must have the appropriate administrator rights\n   *\n   * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} senderChatId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success.\n   * @see https://core.telegram.org/bots/api#banchatsenderchat\n   */\n  banChatSenderChat(chatId, senderChatId, form = {}) {\n    form.chat_id = chatId;\n    form.sender_chat_id = senderChatId;\n    return this._request('banChatSenderChat', { form });\n  }\n\n  /**\n  * Use this method to unban a previously banned channel chat in a supergroup or channel.\n  *\n  * The bot **must be an administrator** for this to work and must have the appropriate administrator rights.\n  *\n  * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Number} senderChatId Unique identifier of the target user\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#unbanchatsenderchat\n  */\n  unbanChatSenderChat(chatId, senderChatId, form = {}) {\n    form.chat_id = chatId;\n    form.sender_chat_id = senderChatId;\n    return this._request('unbanChatSenderChat', { form });\n  }\n\n  /**\n   * Use this method to set default chat permissions for all members.\n   *\n   * The bot **must be an administrator in the group or a supergroup** for this to\n   * work and **must have the `can_restrict_members` admin rights.**\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Array} chatPermissions New default chat permissions\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatpermissions\n   */\n  setChatPermissions(chatId, chatPermissions, form = {}) {\n    form.chat_id = chatId;\n    form.permissions = stringify(chatPermissions);\n    return this._request('setChatPermissions', { form });\n  }\n\n  /**\n   * Use this method to generate a new primary invite link for a chat. **Any previously generated primary link is revoked**.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Exported invite link as String on success.\n   * @see https://core.telegram.org/bots/api#exportchatinvitelink\n   */\n  exportChatInviteLink(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('exportChatInviteLink', { form });\n  }\n\n  /**\n   * Use this method to create an additional invite link for a chat.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * The link generated with this method can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api#revokechatinvitelink)\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Object} The new invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n   * @see https://core.telegram.org/bots/api#createchatinvitelink\n   */\n  createChatInviteLink(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('createChatInviteLink', { form });\n  }\n\n  /**\n   * Use this method to edit a non-primary invite link created by the bot.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} inviteLink Text with the invite link to edit\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} The edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n   * @see https://core.telegram.org/bots/api#editchatinvitelink\n   */\n  editChatInviteLink(chatId, inviteLink, form = {}) {\n    form.chat_id = chatId;\n    form.invite_link = inviteLink;\n    return this._request('editChatInviteLink', { form });\n  }\n\n  /**\n   * Use this method to revoke an invite link created by the bot.\n   * Note: If the primary link is revoked, a new link is automatically generated\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} inviteLink The invite link to revoke\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} The revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n   * @see https://core.telegram.org/bots/api#revokechatinvitelink\n   */\n  revokeChatInviteLink(chatId, inviteLink, form = {}) {\n    form.chat_id = chatId;\n    form.invite_link = inviteLink;\n    return this._request('revokeChatInviteLink', { form });\n  }\n\n  /**\n   * Use this method to approve a chat join request.\n   *\n   * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right.**\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#approvechatjoinrequest\n   */\n  approveChatJoinRequest(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('approveChatJoinRequest', { form });\n  }\n\n  /**\n   * Use this method to decline a chat join request.\n   *\n   * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right**.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#declinechatjoinrequest\n   */\n  declineChatJoinRequest(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('declineChatJoinRequest', { form });\n  }\n\n  /**\n   * Use this method to set a new profile photo for the chat. **Photos can't be changed for private chats**.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {stream.Stream|Buffer} photo A file path or a Stream.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatphoto\n   */\n  setChatPhoto(chatId, photo, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('photo', photo, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.photo = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('setChatPhoto', opts);\n  }\n\n  /**\n  * Use this method to delete a chat photo. **Photos can't be changed for private chats**.\n  *\n  * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#deletechatphoto\n  */\n  deleteChatPhoto(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('deleteChatPhoto', { form });\n  }\n\n  /**\n   * Use this method to change the title of a chat. **Titles can't be changed for private chats**.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} title New chat title, 1-255 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchattitle\n   */\n  setChatTitle(chatId, title, form = {}) {\n    form.chat_id = chatId;\n    form.title = title;\n    return this._request('setChatTitle', { form });\n  }\n\n  /**\n   * Use this method to change the description of a group, a supergroup or a channel.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} description New chat title, 0-255 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatdescription\n   */\n  setChatDescription(chatId, description, form = {}) {\n    form.chat_id = chatId;\n    form.description = description;\n    return this._request('setChatDescription', { form });\n  }\n\n  /**\n   * Use this method to pin a message in a supergroup.\n   *\n   * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n   * right in a supergroup or `can_edit_messages` administrator right in a channel.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} messageId Identifier of a message to pin\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#pinchatmessage\n   */\n  pinChatMessage(chatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = messageId;\n    return this._request('pinChatMessage', { form });\n  }\n\n  /**\n   * Use this method to remove a message from the list of pinned messages in a chat\n   *\n   * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n   * right in a supergroup or `can_edit_messages` administrator right in a channel.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unpinchatmessage\n   */\n  unpinChatMessage(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unpinChatMessage', { form });\n  }\n\n  /**\n  * Use this method to clear the list of pinned messages in a chat.\n  *\n  * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n  * right in a supergroup or `can_edit_messages` administrator right in a channel.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#unpinallchatmessages\n  */\n  unpinAllChatMessages(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unpinAllChatMessages', { form });\n  }\n\n  /**\n   * Use this method for your bot to leave a group, supergroup or channel\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#leavechat\n   */\n  leaveChat(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('leaveChat', { form });\n  }\n\n  /**\n   * Use this method to get up to date information about the chat\n   * (current name of the user for one-on-one conversations, current\n   * username of a user, group or channel, etc.).\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`) or channel\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [ChatFullInfo](https://core.telegram.org/bots/api#chatfullinfo) object on success\n   * @see https://core.telegram.org/bots/api#getchat\n   */\n  getChat(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getChat', { form });\n  }\n\n  /**\n   * Use this method to get a list of administrators in a chat\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api#chatmember) objects that contains information about all chat administrators except other bots.\n   * If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned\n   * @see https://core.telegram.org/bots/api#getchatadministrators\n   */\n  getChatAdministrators(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getChatAdministrators', { form });\n  }\n\n  /**\n  * Use this method to get the number of members in a chat.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} Int on success\n  * @see https://core.telegram.org/bots/api#getchatmembercount\n  */\n  getChatMemberCount(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getChatMemberCount', { form });\n  }\n\n  /**\n   * Use this method to get information about a member of a chat.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [ChatMember](https://core.telegram.org/bots/api#chatmember) object on success\n   * @see https://core.telegram.org/bots/api#getchatmember\n   */\n  getChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('getChatMember', { form });\n  }\n\n  /**\n   * Use this method to set a new group sticker set for a supergroup.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n   *\n   * **Note:** Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {String} stickerSetName Name of the sticker set to be set as the group sticker set\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatstickerset\n   */\n  setChatStickerSet(chatId, stickerSetName, form = {}) {\n    form.chat_id = chatId;\n    form.sticker_set_name = stickerSetName;\n    return this._request('setChatStickerSet', { form });\n  }\n\n\n  /**\n   * Use this method to delete a group sticker set from a supergroup.\n   *\n   * Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletechatstickerset\n   */\n  deleteChatStickerSet(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('deleteChatStickerSet', { form });\n  }\n\n  /**\n   * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects\n   * @see https://core.telegram.org/bots/api#getforumtopiciconstickers\n   */\n  getForumTopicIconStickers(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getForumTopicIconStickers', { form });\n  }\n\n  /**\n   * Use this method to create a topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n   *\n   * Returns information about the created topic as a [ForumTopic](https://core.telegram.org/bots/api#forumtopic) object.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {String} name Topic name, 1-128 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @see https://core.telegram.org/bots/api#createforumtopic\n   */\n  createForumTopic(chatId, name, form = {}) {\n    form.chat_id = chatId;\n    form.name = name;\n    return this._request('createForumTopic', { form });\n  }\n\n  /**\n   * Use this method to edit name and icon of a topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#editforumtopic\n   */\n  editForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('editForumTopic', { form });\n  }\n\n  /**\n   * Use this method to close an open topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#closeforumtopic\n   */\n  closeForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('closeForumTopic', { form });\n  }\n\n  /**\n   * Use this method to reopen a closed topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#reopenforumtopic\n   */\n  reopenForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('reopenForumTopic', { form });\n  }\n\n  /**\n   * Use this method to delete a forum topic along with all its messages in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deleteforumtopic\n   */\n  deleteForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('deleteForumTopic', { form });\n  }\n\n  /**\n   * Use this method to clear the list of pinned messages in a forum topic.\n   * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unpinallforumtopicmessages\n   */\n  unpinAllForumTopicMessages(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('unpinAllForumTopicMessages', { form });\n  }\n\n  /**\n  * Use this method to edit the name of the 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically unhidden if it was hidden.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {String} name New topic name, 1-128 characters\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#editgeneralforumtopic\n  */\n  editGeneralForumTopic(chatId, name, form = {}) {\n    form.chat_id = chatId;\n    form.name = name;\n    return this._request('editGeneralForumTopic', { form });\n  }\n\n  /**\n  * Use this method to close an open 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically unhidden if it was hidden.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#closegeneralforumtopic\n  */\n  closeGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('closeGeneralForumTopic', { form });\n  }\n\n  /**\n  * Use this method to reopen a closed 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically unhidden if it was hidden.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#reopengeneralforumtopic\n  */\n  reopenGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('reopenGeneralForumTopic', { form });\n  }\n\n  /**\n  * Use this method to hide the 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically closed if it was open.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#hidegeneralforumtopic\n  */\n  hideGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('hideGeneralForumTopic', { form });\n  }\n\n  /**\n   * Use this method to unhide the 'General' topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unhidegeneralforumtopic\n   */\n  unhideGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unhideGeneralForumTopic', { form });\n  }\n\n  /**\n   * Use this method to clear the list of pinned messages in a General forum topic.\n   * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages\n   */\n  unpinAllGeneralForumTopicMessages(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unhideGeneralForumTopic', { form });\n  }\n\n  /**\n   * Use this method to send answers to callback queries sent from\n   * [inline keyboards](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating).\n   *\n   * The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.\n   *\n   * This method has **older, compatible signatures ([1][answerCallbackQuery-v0.27.1])([2][answerCallbackQuery-v0.29.0])**\n   * that are being deprecated.\n   *\n   * @param  {String} callbackQueryId Unique identifier for the query to be answered\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#answercallbackquery\n   */\n  answerCallbackQuery(callbackQueryId, form = {}) {\n    /* The older method signature (in/before v0.27.1) was answerCallbackQuery(callbackQueryId, text, showAlert).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature answerCallbackQuery(callbackQueryId, text, showAlert) has been deprecated since v0.27.1');\n      form = {\n        callback_query_id: arguments[0],\n        text: arguments[1],\n        show_alert: arguments[2],\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n    /* The older method signature (in/before v0.29.0) was answerCallbackQuery([options]).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library. */\n    if (typeof callbackQueryId === 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature answerCallbackQuery([options]) has been deprecated since v0.29.0');\n      form = callbackQueryId;\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    } else {\n      form.callback_query_id = callbackQueryId;\n    }\n    return this._request('answerCallbackQuery', { form });\n  }\n\n  /**\n   * Use this method to get the list of boosts added to a chat by a use.\n   * Requires administrator rights in the chat\n   *\n   * @param  {Number|String} chatId  Unique identifier for the group/channel\n   * @param  {Number} user_id Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns a [UserChatBoosts](https://core.telegram.org/bots/api#userchatboosts) object\n   * @see https://core.telegram.org/bots/api#getuserchatboosts\n   */\n  getUserChatBoosts(chatId, pollId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = pollId;\n    return this._request('getUserChatBoosts', { form });\n  }\n\n  /**\n   * Use this method to get information about the connection of the bot with a business account\n   *\n   * @param  {Number|String} businessConnectionId  Unique identifier for the group/channel\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns [BusinessConnection](https://core.telegram.org/bots/api#businessconnection) object\n   * @see https://core.telegram.org/bots/api#getbusinessconnection\n   */\n  getBusinessConnection(businessConnectionId, form = {}) {\n    form.business_connection_id = businessConnectionId;\n    return this._request('getBusinessConnection', { form });\n  }\n\n  /**\n   * Use this method to change the list of the bot's commands.\n   *\n   * See https://core.telegram.org/bots#commands for more details about bot commands\n   *\n   * @param  {Array} commands  List of bot commands to be set as the list of the [bot's commands](https://core.telegram.org/bots/api#botcommand). At most 100 commands can be specified.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setmycommands\n   */\n  setMyCommands(commands, form = {}) {\n    form.commands = stringify(commands);\n\n    if (form.scope) {\n      form.scope = stringify(form.scope);\n    }\n\n    return this._request('setMyCommands', { form });\n  }\n\n  /**\n   * Use this method to delete the list of the bot's commands for the given scope and user language.\n   *\n   *  After deletion, [higher level commands](https://core.telegram.org/bots/api#determining-list-of-commands) will be shown to affected users.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletemycommands\n   */\n  deleteMyCommands(form = {}) {\n    return this._request('deleteMyCommands', { form });\n  }\n\n\n  /**\n   * Use this method to get the current list of the bot's commands for the given scope and user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Array of [BotCommand](https://core.telegram.org/bots/api#botcommand) on success. If commands aren't set, an empty list is returned.\n   * @see https://core.telegram.org/bots/api#getmycommands\n   */\n  getMyCommands(form = {}) {\n    if (form.scope) {\n      form.scope = stringify(form.scope);\n    }\n    return this._request('getMyCommands', { form });\n  }\n\n  /**\n   * Use this method to change the bot's name.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setmyname\n   */\n  setMyName(form = {}) {\n    return this._request('setMyName', { form });\n  }\n\n  /**\n   * Use this method to get the current bot name for the given user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [BotName](https://core.telegram.org/bots/api#botname) on success\n   * @see https://core.telegram.org/bots/api#getmyname\n   */\n  getMyName(form = {}) {\n    return this._request('getMyName', { form });\n  }\n\n  /**\n   * Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.\n   *\n   * Returns True on success.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setmydescription\n   */\n  setMyDescription(form = {}) {\n    return this._request('setMyDescription', { form });\n  }\n\n  /**\n   * Use this method to get the current bot description for the given user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Returns [BotDescription](https://core.telegram.org/bots/api#botdescription) on success.\n   * @see https://core.telegram.org/bots/api#getmydescription\n   */\n  getMyDescription(form = {}) {\n    return this._request('getMyDescription', { form });\n  }\n\n  /**\n   * Use this method to change the bot's short description, which is shown on the bot's profile page\n   * and is sent together with the link when users share the bot.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Returns True on success.\n   * @see https://core.telegram.org/bots/api#setmyshortdescription\n   */\n  setMyShortDescription(form = {}) {\n    return this._request('setMyShortDescription', { form });\n  }\n\n  /**\n   * Use this method to get the current bot short description for the given user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Returns [BotShortDescription](https://core.telegram.org/bots/api#botshortdescription) on success.\n   * @see https://core.telegram.org/bots/api#getmyshortdescription\n   */\n  getMyShortDescription(form = {}) {\n    return this._request('getMyShortDescription', { form });\n  }\n\n  /**\n   * Use this method to change the bot's menu button in a private chat, or the default menu button.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatmenubutton\n   */\n  setChatMenuButton(form = {}) {\n    return this._request('setChatMenuButton', { form });\n  }\n\n  /**\n   * Use this method to get the current value of the bot's menu button in a private chat, or the default menu button.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [MenuButton](https://core.telegram.org/bots/api#menubutton) on success\n   * @see https://core.telegram.org/bots/api#getchatmenubutton\n   */\n  getChatMenuButton(form = {}) {\n    return this._request('getChatMenuButton', { form });\n  }\n\n  /**\n   * Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels.\n   *\n   * These rights will be suggested to users, but they are are free to modify the list before adding the bot.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#getchatmenubutton\n   */\n  setMyDefaultAdministratorRights(form = {}) {\n    return this._request('setMyDefaultAdministratorRights', { form });\n  }\n\n  /**\n   * Use this method to get the current default administrator rights of the bot.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [ChatAdministratorRights](https://core.telegram.org/bots/api#chatadministratorrights) on success\n   * @see https://core.telegram.org/bots/api#getmydefaultadministratorrights\n   */\n  getMyDefaultAdministratorRights(form = {}) {\n    return this._request('getMyDefaultAdministratorRights', { form });\n  }\n\n  /**\n   * Use this method to edit text or [game](https://core.telegram.org/bots/api#games) messages sent by the bot or via the bot (for inline bots).\n   *\n   * Note: that **you must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {String} text  New text of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagetext\n   */\n  editMessageText(text, form = {}) {\n    form.text = text;\n    return this._request('editMessageText', { form });\n  }\n\n  /**\n   * Use this method to edit captions of messages sent by the bot or via the bot (for inline bots).\n   *\n   * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {String} caption  New caption of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagecaption\n   */\n  editMessageCaption(caption, form = {}) {\n    form.caption = caption;\n    return this._request('editMessageCaption', { form });\n  }\n\n  /**\n   * Use this method to edit animation, audio, document, photo, or video messages.\n   *\n   * If a message is a part of a message album, then it can be edited only to a photo or a video.\n   *\n   * Otherwise, message type can be changed arbitrarily. When inline message is edited, new file can't be uploaded.\n   * Use previously uploaded file via its file_id or specify a URL.\n   *\n   * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {Object} media  A JSON-serialized object for a new media content of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagemedia\n   */\n  editMessageMedia(media, form = {}) {\n    const regexAttach = /attach:\\/\\/.+/;\n\n    if (typeof media.media === 'string' && regexAttach.test(media.media)) {\n      const opts = {\n        qs: form,\n      };\n\n      opts.formData = {};\n\n      const payload = Object.assign({}, media);\n      delete payload.media;\n\n      try {\n        const attachName = String(0);\n        const [formData] = this._formatSendData(\n          attachName,\n          media.media.replace('attach://', ''),\n          media.fileOptions\n        );\n\n        if (formData) {\n          opts.formData[attachName] = formData[attachName];\n          payload.media = `attach://${attachName}`;\n        } else {\n          throw new errors.FatalError(`Failed to process the replacement action for your ${media.type}`);\n        }\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n\n      opts.qs.media = stringify(payload);\n\n      return this._request('editMessageMedia', opts);\n    }\n\n    form.media = stringify(media);\n\n    return this._request('editMessageMedia', { form });\n  }\n\n  /**\n   * Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).\n   *\n   * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {Object} replyMarkup  A JSON-serialized object for an inline keyboard.\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagetext\n   */\n  editMessageReplyMarkup(replyMarkup, form = {}) {\n    form.reply_markup = replyMarkup;\n    return this._request('editMessageReplyMarkup', { form });\n  }\n\n\n  /**\n   * Use this method to stop a poll which was sent by the bot.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the group/channel\n   * @param  {Number} pollId Identifier of the original message with the poll\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the stopped [Poll](https://core.telegram.org/bots/api#poll) is returned\n   * @see https://core.telegram.org/bots/api#stoppoll\n   */\n  stopPoll(chatId, pollId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = pollId;\n    return this._request('stopPoll', { form });\n  }\n\n  /**\n   * Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS,\n   * or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers.\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} sticker A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded. Stickers are WebP format files.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n   * @see https://core.telegram.org/bots/api#sendsticker\n   */\n  sendSticker(chatId, sticker, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('sticker', sticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.sticker = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendSticker', opts);\n  }\n\n  /**\n   * Use this method to get a sticker set.\n   *\n   * @param  {String} name Name of the sticker set\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, a [StickerSet](https://core.telegram.org/bots/api#stickerset) object is returned\n   * @see https://core.telegram.org/bots/api#getstickerset\n   */\n  getStickerSet(name, form = {}) {\n    form.name = name;\n    return this._request('getStickerSet', { form });\n  }\n\n  /**\n   * Use this method to get information about custom emoji stickers by their identifiers.\n   *\n   * @param  {Array} custom_emoji_ids List of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects.\n   * @see https://core.telegram.org/bots/api#getcustomemojistickers\n   */\n  getCustomEmojiStickers(customEmojiIds, form = {}) {\n    form.custom_emoji_ids = stringify(customEmojiIds);\n    return this._request('getCustomEmojiStickers', { form });\n  }\n\n  /**\n   * Use this method to upload a file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple\n   * times).\n   *\n   * @param  {Number} userId User identifier of sticker file owner\n   * @param  {String|stream.Stream|Buffer} sticker A file path or a Stream with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. Can also be a `file_id` previously uploaded.\n   * @param {String} stickerFormat Allow values:  `static`, `animated` or `video`\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n   * @see https://core.telegram.org/bots/api#uploadstickerfile\n   */\n  uploadStickerFile(userId, sticker, stickerFormat = 'static', options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.user_id = userId;\n    opts.qs.sticker_format = stickerFormat;\n\n    try {\n      const sendData = this._formatSendData('sticker', sticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.sticker = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('uploadStickerFile', opts);\n  }\n\n  /**\n   * Use this method to create new sticker set owned by a user.\n   *\n   * The bot will be able to edit the created sticker set.\n   *\n   * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n   *\n   * @param  {Number} userId User identifier of created sticker set owner\n   * @param  {String} name Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g.,   *\"animals\"*). Can contain only english letters, digits and underscores.\n   *  Must begin with a letter, can't contain consecutive underscores and must end in `\"_by_<bot_username>\"`. `<bot_username>` is case insensitive. 1-64 characters.\n   * @param  {String} title Sticker set title, 1-64 characters\n   * @param  {String|stream.Stream|Buffer} pngSticker Png image with the sticker, must be up to 512 kilobytes in size,\n   *  dimensions must not exceed 512px, and either width or height must be exactly 512px.\n   * @param  {String} emojis One or more emoji corresponding to the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#createnewstickerset\n   */\n  createNewStickerSet(userId, name, title, pngSticker, emojis, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.user_id = userId;\n    opts.qs.name = name;\n    opts.qs.title = title;\n    opts.qs.emojis = emojis;\n    opts.qs.mask_position = stringify(options.mask_position);\n    try {\n      const sendData = this._formatSendData('png_sticker', pngSticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.png_sticker = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('createNewStickerSet', opts);\n  }\n\n  /**\n   * Use this method to add a new sticker to a set created by the bot.\n   *\n   * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n   *\n   * Animated stickers can be added to animated sticker sets and only to them\n   *\n   * Note:\n   * - Emoji sticker sets can have up to 200 sticker\n   * - Static or Animated sticker sets can have up to 120 stickers\n   *\n   * @param  {Number} userId User identifier of sticker set owner\n   * @param  {String} name Sticker set name\n   * @param  {String|stream.Stream|Buffer} sticker Png image with the sticker (must be up to 512 kilobytes in size,\n   * dimensions must not exceed 512px, and either width or height must be exactly 512px, [TGS animation](https://core.telegram.org/stickers#animated-sticker-requirements)\n   * with the sticker or [WEBM video](https://core.telegram.org/stickers#video-sticker-requirements) with the sticker.\n   * @param  {String} emojis One or more emoji corresponding to the sticker\n   * @param  {String} stickerType Allow values: `png_sticker`, `tgs_sticker`, or `webm_sticker`.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#addstickertoset\n   */\n  addStickerToSet(userId, name, sticker, emojis, stickerType = 'png_sticker', options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.user_id = userId;\n    opts.qs.name = name;\n    opts.qs.emojis = emojis;\n    opts.qs.mask_position = stringify(options.mask_position);\n\n    if (typeof stickerType !== 'string' || ['png_sticker', 'tgs_sticker', 'webm_sticker'].indexOf(stickerType) === -1) {\n      return Promise.reject(new Error('stickerType must be a string and the allow types is: png_sticker, tgs_sticker, webm_sticker'));\n    }\n\n    try {\n      const sendData = this._formatSendData(stickerType, sticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs[stickerType] = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('addStickerToSet', opts);\n  }\n\n  /**\n   * Use this method to move a sticker in a set created by the bot to a specific position.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Number} position New sticker position in the set, zero-based\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickerpositioninset\n   */\n  setStickerPositionInSet(sticker, position, form = {}) {\n    form.sticker = sticker;\n    form.position = position;\n    return this._request('setStickerPositionInSet', { form });\n  }\n\n  /**\n   * Use this method to delete a sticker from a set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletestickerfromset\n   * @todo Add tests for this method!\n   */\n  deleteStickerFromSet(sticker, form = {}) {\n    form.sticker = sticker;\n    return this._request('deleteStickerFromSet', { form });\n  }\n\n  /**\n   * Use this method to replace an existing sticker in a sticker set with a new one\n   *\n   * @param  {Number} user_id User identifier of the sticker set owner\n   * @param  {String} name Sticker set name\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#replacestickerinset\n   * @todo Add tests for this method!\n   */\n  replaceStickerInSet(userId, name, oldSticker, form = {}) {\n    form.user_id = userId;\n    form.name = name;\n    form.old_sticker = oldSticker;\n    return this._request('deleteStickerFromSet', { form });\n  }\n\n\n  /**\n   * Use this method to change the list of emoji assigned to a regular or custom emoji sticker.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param { Array } emojiList A JSON-serialized list of 1-20 emoji associated with the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickeremojilist\n   */\n  setStickerEmojiList(sticker, emojiList, form = {}) {\n    form.sticker = sticker;\n    form.emoji_list = stringify(emojiList);\n    return this._request('setStickerEmojiList', { form });\n  }\n\n  /**\n   * Use this method to change the list of emoji assigned to a `regular` or `custom emoji` sticker.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickerkeywords\n   */\n  setStickerKeywords(sticker, form = {}) {\n    form.sticker = sticker;\n    if (form.keywords) {\n      form.keywords = stringify(form.keywords);\n    }\n    return this._request('setStickerKeywords', { form });\n  }\n\n  /**\n   * Use this method to change the [mask position](https://core.telegram.org/bots/api#maskposition) of a mask sticker.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickermaskposition\n   */\n  setStickerMaskPosition(sticker, form = {}) {\n    form.sticker = sticker;\n    if (form.mask_position) {\n      form.mask_position = stringify(form.mask_position);\n    }\n    return this._request('setStickerMaskPosition', { form });\n  }\n\n  /**\n   * Use this method to set the title of a created sticker set.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} name Sticker set name\n   * @param  {String} title Sticker set title, 1-64 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickersettitle\n   */\n  setStickerSetTitle(name, title, form = {}) {\n    form.name = name;\n    form.title = title;\n    return this._request('setStickerSetTitle', { form });\n  }\n\n  /**\n   * Use this method to add a thumb to a set created by the bot.\n   *\n   * Animated thumbnails can be set for animated sticker sets only. Video thumbnails can be set only for video sticker sets only\n   *\n   * @param  {Number} userId User identifier of sticker set owner\n   * @param  {String} name Sticker set name\n   * @param  {String|stream.Stream|Buffer} thumbnail A .WEBP or .PNG image with the thumbnail,\n   * must be up to 128 kilobytes in size and have width and height exactly 100px,\n   * a TGS animation with the thumbnail up to 32 kilobytes in size or a WEBM video with the thumbnail up to 32 kilobytes in size.\n   *\n   * Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram\n   * to get a file from the Internet, or upload a new one. Animated sticker set thumbnails can't be uploaded via HTTP URL.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickersetthumbnail\n   */\n  setStickerSetThumbnail(userId, name, thumbnail, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.user_id = userId;\n    opts.qs.name = name;\n    opts.qs.mask_position = stringify(options.mask_position);\n    try {\n      const sendData = this._formatSendData('thumbnail', thumbnail, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.thumbnail = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('setStickerSetThumbnail', opts);\n  }\n\n\n  /**\n   * Use this method to set the thumbnail of a custom emoji sticker set.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} name Sticker set name\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setcustomemojistickersetthumbnail\n   */\n  setCustomEmojiStickerSetThumbnail(name, form = {}) {\n    form.name = name;\n    return this._request('setCustomEmojiStickerSetThumbnail', { form });\n  }\n\n  /**\n   * Use this method to delete a sticker set that was created by the bot.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} name Sticker set name\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletestickerset\n   */\n  deleteStickerSet(name, form = {}) {\n    form.name = name;\n    return this._request('deleteStickerSet', { form });\n  }\n\n  /**\n   * Send answers to an inline query.\n   *\n   * Note: No more than 50 results per query are allowed.\n   *\n   * @param  {String} inlineQueryId Unique identifier of the query\n   * @param  {InlineQueryResult[]} results An array of results for the inline query\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, True is returned\n   * @see https://core.telegram.org/bots/api#answerinlinequery\n   */\n  answerInlineQuery(inlineQueryId, results, form = {}) {\n    form.inline_query_id = inlineQueryId;\n    form.results = stringify(results);\n    return this._request('answerInlineQuery', { form });\n  }\n\n  /**\n   * Use this method to set the result of an interaction with a [Web App](https://core.telegram.org/bots/webapps)\n   * and send a corresponding message on behalf of the user to the chat from which the query originated.\n   *\n   * @param  {String} webAppQueryId Unique identifier for the query to be answered\n   * @param  {InlineQueryResult} result object that represents one result of an inline query\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, a [SentWebAppMessage](https://core.telegram.org/bots/api#sentwebappmessage) object is returned\n   * @see https://core.telegram.org/bots/api#answerwebappquery\n   */\n  answerWebAppQuery(webAppQueryId, result, form = {}) {\n    form.web_app_query_id = webAppQueryId;\n    form.result = stringify(result);\n    return this._request('answerWebAppQuery', { form });\n  }\n\n  /**\n   * Use this method to send an invoice.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} title Product name, 1-32 characters\n   * @param  {String} description Product description, 1-255 characters\n   * @param  {String} payload Bot defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.\n   * @param  {String} providerToken Payments provider token, obtained via `@BotFather`\n   * @param  {String} currency Three-letter ISO 4217 currency code\n   * @param  {Array} prices Breakdown of prices\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n   * @see https://core.telegram.org/bots/api#sendinvoice\n   */\n  sendInvoice(chatId, title, description, payload, providerToken, currency, prices, form = {}) {\n    form.chat_id = chatId;\n    form.title = title;\n    form.description = description;\n    form.payload = payload;\n    form.provider_token = providerToken;\n    form.currency = currency;\n    form.prices = stringify(prices);\n    form.provider_data = stringify(form.provider_data);\n    if (form.suggested_tip_amounts) {\n      form.suggested_tip_amounts = stringify(form.suggested_tip_amounts);\n    }\n    return this._request('sendInvoice', { form });\n  }\n\n  /**\n  * Use this method to create a link for an invoice.\n  *\n  * @param {String} title Product name, 1-32 characters\n  * @param {String} description Product description, 1-255 characters\n  * @param {String} payload Bot defined invoice payload\n  * @param {String} providerToken Payment provider token\n  * @param {String} currency Three-letter ISO 4217 currency code\n  * @param {Array} prices Breakdown of prices\n  * @param {Object} [options] Additional Telegram query options\n  * @returns {Promise} The created invoice link as String on success.\n  * @see https://core.telegram.org/bots/api#createinvoicelink\n  */\n  createInvoiceLink(title, description, payload, providerToken, currency, prices, form = {}) {\n    form.title = title;\n    form.description = description;\n    form.payload = payload;\n    form.provider_token = providerToken;\n    form.currency = currency;\n    form.prices = stringify(prices);\n    return this._request('createInvoiceLink', { form });\n  }\n\n  /**\n  * Use this method to reply to shipping queries.\n  *\n  * If you sent an invoice requesting a shipping address and the parameter is_flexible was specified,\n  * the Bot API will send an [Update](https://core.telegram.org/bots/api#update) with a shipping_query field to the bot\n  *\n  * @param  {String} shippingQueryId  Unique identifier for the query to be answered\n  * @param  {Boolean} ok Specify if delivery of the product is possible\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} On success, True is returned\n  * @see https://core.telegram.org/bots/api#answershippingquery\n  */\n  answerShippingQuery(shippingQueryId, ok, form = {}) {\n    form.shipping_query_id = shippingQueryId;\n    form.ok = ok;\n    form.shipping_options = stringify(form.shipping_options);\n    return this._request('answerShippingQuery', { form });\n  }\n\n  /**\n   * Use this method to respond to such pre-checkout queries\n   *\n   * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of\n   * an [Update](https://core.telegram.org/bots/api#update) with the field *pre_checkout_query*.\n   *\n   * **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n   *\n   * @param  {String} preCheckoutQueryId  Unique identifier for the query to be answered\n   * @param  {Boolean} ok Specify if every order details are ok\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, True is returned\n   * @see https://core.telegram.org/bots/api#answerprecheckoutquery\n   */\n  answerPreCheckoutQuery(preCheckoutQueryId, ok, form = {}) {\n    form.pre_checkout_query_id = preCheckoutQueryId;\n    form.ok = ok;\n    return this._request('answerPreCheckoutQuery', { form });\n  }\n\n  /**\n   * Use this method to send a game.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} gameShortName name of the game to be sent. Set up your games via `@BotFather`.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n   * @see https://core.telegram.org/bots/api#sendgame\n   */\n  sendGame(chatId, gameShortName, form = {}) {\n    form.chat_id = chatId;\n    form.game_short_name = gameShortName;\n    return this._request('sendGame', { form });\n  }\n\n  /**\n   * Use this method to set the score of the specified user in a game message.\n   *\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Number} score New score value, must be non-negative\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, if the message is not an inline message, the [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#setgamescore\n   */\n  setGameScore(userId, score, form = {}) {\n    form.user_id = userId;\n    form.score = score;\n    return this._request('setGameScore', { form });\n  }\n\n  /**\n   * Use this method to get data for high score tables.\n   *\n   * Will return the score of the specified user and several of their neighbors in a game.\n   *\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns an Array of [GameHighScore](https://core.telegram.org/bots/api#gamehighscore) objects\n   * @see https://core.telegram.org/bots/api#getgamehighscores\n   */\n  getGameHighScores(userId, form = {}) {\n    form.user_id = userId;\n    return this._request('getGameHighScores', { form });\n  }\n\n\n  /**\n * Use this method to delete a message, including service messages, with the following limitations:\n * - A message can only be deleted if it was sent less than 48 hours ago.\n * - A dice message can only be deleted if it was sent more than 24 hours ago.\n * - Bots can delete outgoing messages in groups and supergroups.\n * - Bots can delete incoming messages in groups, supergroups and channels.\n * - Bots granted `can_post_messages` permissions can delete outgoing messages in channels.\n * - If the bot is an administrator of a group, it can delete any message there.\n * - If the bot has `can_delete_messages` permission in a supergroup, it can delete any message there.\n *\n * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n * @param  {Number} messageId  Unique identifier of the target message\n * @param  {Object} [options] Additional Telegram query options\n * @return {Promise} True on success\n * @see https://core.telegram.org/bots/api#deletemessage\n */\n  deleteMessage(chatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = messageId;\n    return this._request('deleteMessage', { form });\n  }\n\n  /**\n   * Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n   * @param  {Array<Number|String>} messageIds  Identifiers of 1-100 messages to delete. See deleteMessage for limitations on which messages can be deleted\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise<Boolean>} True on success\n   * @see https://core.telegram.org/bots/api#deletemessages\n   */\n  deleteMessages(chatId, messageIds, form = {}) {\n    form.chat_id = chatId;\n    form.message_ids = stringify(messageIds);\n    return this._request('deleteMessages', { form });\n  }\n\n}\n\nmodule.exports = TelegramBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}